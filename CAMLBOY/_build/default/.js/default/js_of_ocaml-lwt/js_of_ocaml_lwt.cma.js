// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.9.1

//# unitInfo: Provides: Js_of_ocaml_lwt__
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    Js_of_ocaml_lwt = [0],
    Js_of_ocaml_lwt$0 = [0, Js_of_ocaml_lwt];
   runtime.caml_register_global(0, Js_of_ocaml_lwt$0, "Js_of_ocaml_lwt__");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Js_of_ocaml_lwt__Import
//# unitInfo: Requires: Stdlib__Char, Stdlib__String
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    global_data = runtime.caml_get_global_data(),
    Stdlib_String = global_data.Stdlib__String,
    Stdlib_Char = global_data.Stdlib__Char,
    Poly = [0];
   function symbol(x, y){return x < y ? 1 : 0;}
   function symbol$0(x, y){return x <= y ? 1 : 0;}
   function symbol$1(x, y){return x !== y ? 1 : 0;}
   function symbol$2(x, y){return x === y ? 1 : 0;}
   function symbol$3(x, y){return y < x ? 1 : 0;}
   function symbol$4(x, y){return y <= x ? 1 : 0;}
   var compare = runtime.caml_int_compare;
   function equal(x, y){return x === y ? 1 : 0;}
   function max(x, y){return y <= x ? x : y;}
   function min(x, y){return x <= y ? x : y;}
   var
    Int_replace_polymorphic_compar =
      [0,
       symbol,
       symbol$0,
       symbol$1,
       symbol$2,
       symbol$3,
       symbol$4,
       compare,
       equal,
       max,
       min],
    make = Stdlib_String[1],
    init = Stdlib_String[2],
    empty = Stdlib_String[3],
    of_bytes = Stdlib_String[4],
    to_bytes = Stdlib_String[5],
    concat = Stdlib_String[6],
    cat = Stdlib_String[7],
    compare$0 = Stdlib_String[9],
    starts_with = Stdlib_String[10],
    ends_with = Stdlib_String[11],
    contains_from = Stdlib_String[12],
    rcontains_from = Stdlib_String[13],
    contains = Stdlib_String[14],
    sub = Stdlib_String[15],
    split_on_char = Stdlib_String[16],
    map = Stdlib_String[17],
    mapi = Stdlib_String[18],
    fold_left = Stdlib_String[19],
    fold_right = Stdlib_String[20],
    for_all = Stdlib_String[21],
    exists = Stdlib_String[22],
    trim = Stdlib_String[23],
    escaped = Stdlib_String[24],
    uppercase_ascii = Stdlib_String[25],
    lowercase_ascii = Stdlib_String[26],
    capitalize_ascii = Stdlib_String[27],
    uncapitalize_ascii = Stdlib_String[28],
    iter = Stdlib_String[29],
    iteri = Stdlib_String[30],
    index_from = Stdlib_String[31],
    index_from_opt = Stdlib_String[32],
    rindex_from = Stdlib_String[33],
    rindex_from_opt = Stdlib_String[34],
    index = Stdlib_String[35],
    index_opt = Stdlib_String[36],
    rindex = Stdlib_String[37],
    rindex_opt = Stdlib_String[38],
    to_seq = Stdlib_String[39],
    to_seqi = Stdlib_String[40],
    of_seq = Stdlib_String[41],
    blit = Stdlib_String[42],
    copy = Stdlib_String[43],
    fill = Stdlib_String[44],
    uppercase = Stdlib_String[45],
    lowercase = Stdlib_String[46],
    capitalize = Stdlib_String[47],
    uncapitalize = Stdlib_String[48],
    get_uint8 = Stdlib_String[49],
    get_int8 = Stdlib_String[50],
    get_uint16_ne = Stdlib_String[51],
    get_uint16_be = Stdlib_String[52],
    get_uint16_le = Stdlib_String[53],
    get_int16_ne = Stdlib_String[54],
    get_int16_be = Stdlib_String[55],
    get_int16_le = Stdlib_String[56],
    get_int32_ne = Stdlib_String[57],
    get_int32_be = Stdlib_String[58],
    get_int32_le = Stdlib_String[59],
    get_int64_ne = Stdlib_String[60],
    get_int64_be = Stdlib_String[61],
    get_int64_le = Stdlib_String[62],
    equal$0 = runtime.caml_string_equal,
    String =
      [0,
       make,
       init,
       empty,
       of_bytes,
       to_bytes,
       concat,
       cat,
       compare$0,
       starts_with,
       ends_with,
       contains_from,
       rcontains_from,
       contains,
       sub,
       split_on_char,
       map,
       mapi,
       fold_left,
       fold_right,
       for_all,
       exists,
       trim,
       escaped,
       uppercase_ascii,
       lowercase_ascii,
       capitalize_ascii,
       uncapitalize_ascii,
       iter,
       iteri,
       index_from,
       index_from_opt,
       rindex_from,
       rindex_from_opt,
       index,
       index_opt,
       rindex,
       rindex_opt,
       to_seq,
       to_seqi,
       of_seq,
       blit,
       copy,
       fill,
       uppercase,
       lowercase,
       capitalize,
       uncapitalize,
       get_uint8,
       get_int8,
       get_uint16_ne,
       get_uint16_be,
       get_uint16_le,
       get_int16_ne,
       get_int16_be,
       get_int16_le,
       get_int32_ne,
       get_int32_be,
       get_int32_le,
       get_int64_ne,
       get_int64_be,
       get_int64_le,
       equal$0],
    chr = Stdlib_Char[1],
    escaped$0 = Stdlib_Char[2],
    lowercase$0 = Stdlib_Char[3],
    uppercase$0 = Stdlib_Char[4],
    lowercase_ascii$0 = Stdlib_Char[5],
    uppercase_ascii$0 = Stdlib_Char[6],
    compare$1 = Stdlib_Char[7];
   function equal$1(x, y){return x === y ? 1 : 0;}
   var
    Char =
      [0,
       chr,
       escaped$0,
       lowercase$0,
       uppercase$0,
       lowercase_ascii$0,
       uppercase_ascii$0,
       compare$1,
       equal$1],
    symbol$5 = Int_replace_polymorphic_compar[1],
    symbol$6 = Int_replace_polymorphic_compar[2],
    symbol$7 = Int_replace_polymorphic_compar[3],
    symbol$8 = Int_replace_polymorphic_compar[4],
    symbol$9 = Int_replace_polymorphic_compar[5],
    symbol$10 = Int_replace_polymorphic_compar[6],
    compare$2 = Int_replace_polymorphic_compar[7],
    equal$2 = Int_replace_polymorphic_compar[8],
    max$0 = Int_replace_polymorphic_compar[9],
    min$0 = Int_replace_polymorphic_compar[10],
    Js_of_ocaml_lwt_Import =
      [0,
       Poly,
       Int_replace_polymorphic_compar,
       String,
       Char,
       symbol$5,
       symbol$6,
       symbol$7,
       symbol$8,
       symbol$9,
       symbol$10,
       compare$2,
       equal$2,
       max$0,
       min$0];
   runtime.caml_register_global
    (2, Js_of_ocaml_lwt_Import, "Js_of_ocaml_lwt__Import");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Js_of_ocaml_lwt__Lwt_xmlHttpRequest
//# unitInfo: Requires: Assert_failure, Js_of_ocaml__Dom, Js_of_ocaml__Dom_html, Js_of_ocaml__File, Js_of_ocaml__Form, Js_of_ocaml__Js, Js_of_ocaml__Url, Js_of_ocaml__XmlHttpRequest, Js_of_ocaml_lwt__Import, Lwt, Stdlib, Stdlib__List
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$6 = "",
    cst$5 = "&",
    cst$7 = "=",
    cst_GET$1 = "GET",
    cst_POST$3 = "POST",
    cst_lib_lwt_lwt_xmlHttpRequest = "lib/lwt/lwt_xmlHttpRequest.ml",
    caml_jsstring_of_string = runtime.caml_jsstring_of_string,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_string_of_jsstring = runtime.caml_string_of_jsstring,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    c = "application/x-www-form-urlencoded",
    cst$3 = cst$5,
    cst$4 = "?",
    cst$2 = cst$6,
    cst = cst$7,
    cst$0 = cst$7,
    cst$1 = cst$5,
    Js_of_ocaml_Url = global_data.Js_of_ocaml__Url,
    Js_of_ocaml_Js = global_data.Js_of_ocaml__Js,
    Js_of_ocaml_Dom = global_data.Js_of_ocaml__Dom,
    Js_of_ocaml_Dom_html = global_data.Js_of_ocaml__Dom_html,
    Lwt = global_data.Lwt,
    Js_of_ocaml_Form = global_data.Js_of_ocaml__Form,
    Stdlib_List = global_data.Stdlib__List,
    Stdlib = global_data.Stdlib,
    Js_of_ocaml_XmlHttpRequest = global_data.Js_of_ocaml__XmlHttpRequest,
    Js_of_ocaml_lwt_Import = global_data.Js_of_ocaml_lwt__Import,
    Assert_failure = global_data.Assert_failure,
    Js_of_ocaml_File = global_data.Js_of_ocaml__File,
    Wrong_headers =
      [248,
       "Js_of_ocaml_lwt__Lwt_xmlHttpRequest.Wrong_headers",
       runtime.caml_fresh_oo_id(0)],
    _a_ = [0, cst_lib_lwt_lwt_xmlHttpRequest, 66, 29],
    _b_ = [0, cst_lib_lwt_lwt_xmlHttpRequest, 74, 29],
    _c_ = [0, cst_lib_lwt_lwt_xmlHttpRequest, 82, 29],
    _d_ = [0, cst_lib_lwt_lwt_xmlHttpRequest, 90, 29],
    _e_ = [0, cst_lib_lwt_lwt_xmlHttpRequest, 98, 29],
    cst_PATCH = "PATCH",
    cst_POST = cst_POST$3,
    cst_HEAD = "HEAD",
    cst_DELETE = "DELETE",
    cst_GET = cst_GET$1,
    cst_PUT = "PUT",
    cst_OPTIONS = "OPTIONS",
    cst_POST$0 = cst_POST$3,
    cst_POST$1 = cst_POST$3,
    cst_POST$2 = cst_POST$3,
    cst_GET$0 = cst_GET$1;
   function perform_raw
   (opt,
    content_type,
    _j_,
    _i_,
    progress,
    upload_progress,
    contents,
    override_mime_type,
    override_method,
    with_credentials,
    response_type){
    if(opt) var sth = opt[1], headers = sth; else var headers = 0;
    if(_j_) var sth$0 = _j_[1], get_args = sth$0; else var get_args = 0;
    if(_i_)
     var sth$1 = _i_[1], check_headers = sth$1;
    else
     var check_headers = function(param, _G_){return 1;};
    return function(url){
     if(contents){
      var c$0 = contents[1], _n_ = c$0[1];
      if(440620227 === _n_){
       var
        args = c$0[2],
        only_strings =
          caml_call2
           (Stdlib_List[32],
            function(x){
             var _F_ = x[2];
             if(typeof _F_ !== "number" && -976970511 === _F_[1]) return 1;
             return 0;
            },
            args),
        form_contents =
          only_strings
           ? [0, 891486873, [0, 0]]
           : caml_call1(Js_of_ocaml_Form[6], 0);
       caml_call2
        (Stdlib_List[17],
         function(param){
          var value = param[2], name = param[1];
          return caml_call2
                  (Js_of_ocaml_Form[3], form_contents, [0, name, value]);
         },
         args);
       var _o_ = [0, -836918635, form_contents];
      }
      else if(737307005 <= _n_)
       var b = c$0[2], _o_ = [0, 737307005, b];
      else
       var _o_ = c$0;
      var contents$0 = [0, _o_];
     }
     else
      var contents$0 = 0;
     function override_method$0(m){
      if(! override_method) return m;
      var v = override_method[1];
      return 492530731 <= v
              ? 891112544
                <= v
                ? 994393768 <= v ? cst_PATCH : cst_POST
                : 801894688 <= v ? cst_HEAD : cst_DELETE
              : 3546230 === v ? cst_GET : 3997359 <= v ? cst_PUT : cst_OPTIONS;
     }
     if(contents$0){
      var match = contents$0[1];
      if(-836918635 === match[1]){
       var form = match[2];
       if(891486873 <= form[1])
        var
         content_type$0 = content_type || [0, c],
         content_type$1 = content_type$0,
         method = override_method$0(cst_POST$0);
       else
        var
         content_type$1 = content_type,
         method = override_method$0(cst_POST$1);
      }
      else
       var
        content_type$1 = content_type,
        method = override_method$0(cst_POST$2);
     }
     else
      var
       method$0 = override_method$0(cst_GET$0),
       content_type$1 = content_type,
       method = method$0;
     if(0 === get_args)
      var url$0 = url;
     else{
      var _r_ = caml_call1(Js_of_ocaml_Url[6], get_args);
      try{
       caml_call2(Js_of_ocaml_lwt_Import[3][34], url, 63);
       var _m_ = 1, _s_ = _m_;
      }
      catch(_E_){
       var _l_ = caml_wrap_exception(_E_);
       if(_l_ !== Stdlib[8]) throw caml_maybe_attach_backtrace(_l_, 0);
       var _s_ = 0;
      }
      var
       _t_ = _s_ ? cst$3 : cst$4,
       _u_ = caml_call2(Stdlib[28], _t_, _r_),
       url$0 = caml_call2(Stdlib[28], url, _u_);
     }
     var
      match$0 = caml_call1(Lwt[22], 0),
      w = match$0[2],
      res = match$0[1],
      req = caml_call1(Js_of_ocaml_XmlHttpRequest[1], 0),
      t11 = Js_of_ocaml_Js[7],
      t10 = caml_jsstring_of_string(url$0),
      t9 = caml_jsstring_of_string(method);
     req.open(t9, t10, t11);
     if(override_mime_type){
      var
       mime_type = override_mime_type[1],
       t13 = caml_jsstring_of_string(mime_type);
      req.overrideMimeType(t13);
     }
     switch(response_type){
       case 0:
        req.responseType = "arraybuffer"; break;
       case 1:
        req.responseType = "blob"; break;
       case 2:
        req.responseType = "document"; break;
       case 3:
        req.responseType = "json"; break;
       case 4:
        req.responseType = "text"; break;
       default: req.responseType = cst$6;
     }
     if(with_credentials){
      var c$1 = with_credentials[1], t27 = ! ! c$1;
      req.withCredentials = t27;
     }
     if(content_type$1){
      var
       content_type$2 = content_type$1[1],
       t30 = caml_jsstring_of_string(content_type$2);
      req.setRequestHeader("Content-type", t30);
     }
     caml_call2
      (Stdlib_List[17],
       function(param){
        var
         v = param[2],
         n = param[1],
         t33 = caml_jsstring_of_string(v),
         t32 = caml_jsstring_of_string(n);
        return req.setRequestHeader(t32, t33);
       },
       headers);
     function headers$0(s){
      var
       t35 = runtime.caml_jsbytes_of_string(s),
       _D_ = req.getResponseHeader(t35);
      return caml_call3
              (Js_of_ocaml_Js[5][7],
               _D_,
               function(param){return 0;},
               function(v){return [0, caml_string_of_jsstring(v)];});
     }
     var st = [0, 382334108];
     function do_check_headers(param){
      if(382334108 === st[1])
       if(caml_call2(check_headers, req.status, headers$0))
        st[1] = 583419792;
       else{
        caml_call2(Lwt[53], w, [0, Wrong_headers, [0, req.status, headers$0]]);
        st[1] = 479410653;
        req.abort();
       }
      return 479410653 !== st[1] ? 1 : 0;
     }
     var
      t47 =
        runtime.caml_js_wrap_callback
         (function(param){
           switch(req.readyState){
             case 2:
              if(! Js_of_ocaml_Dom_html[124]){do_check_headers(0); return 0;}
              break;
             case 3:
              if(Js_of_ocaml_Dom_html[124]){do_check_headers(0); return 0;}
              break;
             case 4:
              var _B_ = do_check_headers(0);
              if(! _B_) return _B_;
              switch(response_type){
                case 0:
                 var
                  code = req.status,
                  response =
                    [0,
                     url$0,
                     code,
                     headers$0,
                     caml_call1(Js_of_ocaml_File[3][5], req.response),
                     function(param){
                      throw caml_maybe_attach_backtrace
                             ([0, Assert_failure, _e_], 1);
                     }];
                 break;
                case 1:
                 var
                  code$0 = req.status,
                  response =
                    [0,
                     url$0,
                     code$0,
                     headers$0,
                     caml_call1(Js_of_ocaml_File[3][2], req.response),
                     function(param){
                      throw caml_maybe_attach_backtrace
                             ([0, Assert_failure, _d_], 1);
                     }];
                 break;
                case 2:
                 var
                  code$1 = req.status,
                  response =
                    [0,
                     url$0,
                     code$1,
                     headers$0,
                     caml_call1(Js_of_ocaml_File[3][1], req.response),
                     function(param){
                      throw caml_maybe_attach_backtrace
                             ([0, Assert_failure, _b_], 1);
                     }];
                 break;
                case 3:
                 var
                  code$2 = req.status,
                  response =
                    [0,
                     url$0,
                     code$2,
                     headers$0,
                     caml_call1(Js_of_ocaml_File[3][3], req.response),
                     function(param){
                      throw caml_maybe_attach_backtrace
                             ([0, Assert_failure, _c_], 1);
                     }];
                 break;
                case 4:
                 var
                  code$3 = req.status,
                  response =
                    [0,
                     url$0,
                     code$3,
                     headers$0,
                     caml_call3
                      (Js_of_ocaml_Js[5][7],
                       req.responseText,
                       function(param){return cst$6;},
                       function(x){return x;}),
                     function(param){
                      throw caml_maybe_attach_backtrace
                             ([0, Assert_failure, _a_], 1);
                     }];
                 break;
                default:
                 var
                  code$4 = req.status,
                  response =
                    [0,
                     url$0,
                     code$4,
                     headers$0,
                     caml_call3
                      (Js_of_ocaml_Js[5][7],
                       req.responseText,
                       function(param){return cst$2;},
                       caml_string_of_jsstring),
                     function(param){
                      var
                       match = caml_call1(Js_of_ocaml_Js[5][10], req.responseXML);
                      if(! match) return 0;
                      var doc = match[1], _C_ = Js_of_ocaml_Js[1];
                      return caml_call1(Js_of_ocaml_Js[2], doc.documentElement)
                              === _C_
                              ? 0
                              : [0, doc];
                     }];
              }
              return caml_call2(Lwt[52], w, response);
           }
           return 0;
          });
     req.onreadystatechange = t47;
     if(progress){
      var
       progress$0 = progress[1],
       t51 =
         caml_call1
          (Js_of_ocaml_Dom[10],
           function(t50){
            caml_call2(progress$0, t50.loaded, t50.total);
            return Js_of_ocaml_Js[7];
           });
      req.onprogress = t51;
     }
     caml_call2
      (Js_of_ocaml_Js[6][6],
       req.upload,
       function(upload){
        if(! upload_progress) return 0;
        var
         upload_progress$0 = upload_progress[1],
         t56 =
           caml_call1
            (Js_of_ocaml_Dom[10],
             function(t55){
              caml_call2(upload_progress$0, t55.loaded, t55.total);
              return Js_of_ocaml_Js[7];
             });
        return upload.onprogress = t56;
       });
     if(contents$0){
      var match$1 = contents$0[1], _p_ = match$1[1];
      if(-836918635 === _p_){
       var match$2 = match$1[2];
       if(891486873 <= match$2[1]){
        var
         l = match$2[2],
         l$0 = l[1],
         _k_ =
           caml_call2
            (Stdlib_List[19],
             function(param){
              var match = param[2], name = param[1];
              if(781515420 <= match[1]){
               var
                t0 = match[2],
                _v_ =
                  caml_call2
                   (Js_of_ocaml_Url[2], 0, caml_string_of_jsstring(t0.name)),
                _w_ = caml_call2(Stdlib[28], cst, _v_),
                _x_ = caml_call2(Js_of_ocaml_Url[2], 0, name);
               return caml_call2(Stdlib[28], _x_, _w_);
              }
              var
               s = match[2],
               _y_ =
                 caml_call2(Js_of_ocaml_Url[2], 0, caml_string_of_jsstring(s)),
               _z_ = caml_call2(Stdlib[28], cst$0, _y_),
               _A_ = caml_call2(Js_of_ocaml_Url[2], 0, name);
              return caml_call2(Stdlib[28], _A_, _z_);
             },
             l$0),
         _q_ =
           caml_jsstring_of_string
            (caml_call2(Js_of_ocaml_lwt_Import[3][6], cst$1, _k_)),
         t60 = caml_call1(Js_of_ocaml_Js[2], _q_);
        req.send(t60);
       }
       else{var t62 = match$2[2]; req.send(t62);}
      }
      else if(737307005 <= _p_){
       var t66 = match$1[2];
       req.send(t66);
      }
      else{
       var
        s = match$1[2],
        t64 = caml_call1(Js_of_ocaml_Js[2], caml_jsstring_of_string(s));
       req.send(t64);
      }
     }
     else{var t58 = Js_of_ocaml_Js[1]; req.send(t58);}
     caml_call2(Lwt[24], res, function(param){return req.abort();});
     return res;};
   }
   function perform_raw_url
   (opt,
    content_type,
    _h_,
    check_headers,
    progress,
    upload_progress,
    contents,
    override_mime_type,
    override_method,
    with_credentials,
    url){
    if(opt) var sth = opt[1], headers = sth; else var headers = 0;
    if(_h_) var sth$0 = _h_[1], get_args = sth$0; else var get_args = 0;
    return perform_raw
             ([0, headers],
              content_type,
              [0, get_args],
              check_headers,
              progress,
              upload_progress,
              contents,
              override_mime_type,
              override_method,
              with_credentials,
              5)
            (url);
   }
   function perform
   (opt,
    content_type,
    _f_,
    check_headers,
    progress,
    upload_progress,
    contents,
    override_mime_type,
    override_method,
    with_credentials,
    url){
    if(opt) var sth = opt[1], headers = sth; else var headers = 0;
    if(_f_) var sth$0 = _f_[1], get_args = sth$0; else var get_args = 0;
    var _g_ = caml_call1(Js_of_ocaml_Url[9], url);
    return perform_raw
             ([0, headers],
              content_type,
              [0, get_args],
              check_headers,
              progress,
              upload_progress,
              contents,
              override_mime_type,
              override_method,
              with_credentials,
              5)
            (_g_);
   }
   function get(s){return perform_raw_url(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, s);}
   var
    Js_of_ocaml_lwt_Lwt_xmlHttpReq =
      [0, Wrong_headers, perform_raw, perform_raw_url, perform, get];
   runtime.caml_register_global
    (89,
     Js_of_ocaml_lwt_Lwt_xmlHttpReq,
     "Js_of_ocaml_lwt__Lwt_xmlHttpRequest");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Js_of_ocaml_lwt__Lwt_js
//# unitInfo: Requires: Js_of_ocaml__Dom_html, Js_of_ocaml__Firebug, Js_of_ocaml__Js, Lwt, Stdlib, Stdlib__Printexc
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib_Printexc = global_data.Stdlib__Printexc,
    Stdlib = global_data.Stdlib,
    Js_of_ocaml_Firebug = global_data.Js_of_ocaml__Firebug,
    Lwt = global_data.Lwt,
    Js_of_ocaml_Dom_html = global_data.Js_of_ocaml__Dom_html;
   function sleep(d){
    var
     match = caml_call1(Lwt[22], 0),
     w = match[2],
     t = match[1],
     _a_ = caml_call1(Lwt[52], w),
     id = caml_call2(Js_of_ocaml_Dom_html[119], _a_, d * 1000.);
    caml_call2
     (Lwt[24],
      t,
      function(param){return caml_call1(Js_of_ocaml_Dom_html[120], id);});
    return t;
   }
   function yield$0(param){return sleep(0.);}
   function wakeup(param){
    if(1 !== param) return 0;
    var
     t0 = runtime.caml_js_wrap_callback(Lwt[58]),
     t2 = Js_of_ocaml_Dom_html[8];
    t2.setTimeout(t0, 0.);
    return 0;
   }
   caml_call1(Lwt[60], wakeup);
   var
    cst_Exception_during_Lwt_async = "Exception during Lwt.async: ",
    dummy = 0;
   function prerr_string(s){
    var t3 = runtime.caml_jsstring_of_string(s), t4 = Js_of_ocaml_Firebug[1];
    t4.log(t3);
   }
   Lwt[12][1] =
    function(exn){
     prerr_string(cst_Exception_during_Lwt_async);
     prerr_string(caml_call1(Stdlib_Printexc[1], exn));
     return caml_call1(Stdlib_Printexc[5], Stdlib[40]);
    };
   var Js_of_ocaml_lwt_Lwt_js = [0, sleep, yield$0];
   runtime.caml_register_global
    (11, Js_of_ocaml_lwt_Lwt_js, "Js_of_ocaml_lwt__Lwt_js");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Js_of_ocaml_lwt__Lwt_jsonp
//# unitInfo: Requires: Js_of_ocaml__Dom, Js_of_ocaml__Dom_html, Js_of_ocaml__Firebug, Js_of_ocaml__Js, Js_of_ocaml__Url, Js_of_ocaml_lwt__Import, Js_of_ocaml_lwt__Lwt_js, Lwt, Stdlib, Stdlib__Buffer, Stdlib__List, Stdlib__Random
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$1 = "",
    caml_jsstring_of_string = runtime.caml_jsstring_of_string;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst$0 = cst$1,
    cst = cst$1,
    Stdlib_Buffer = global_data.Stdlib__Buffer,
    Stdlib_Random = global_data.Stdlib__Random,
    Js_of_ocaml_lwt_Import = global_data.Js_of_ocaml_lwt__Import,
    Js_of_ocaml_Dom_html = global_data.Js_of_ocaml__Dom_html,
    Js_of_ocaml_Js = global_data.Js_of_ocaml__Js,
    Js_of_ocaml_Url = global_data.Js_of_ocaml__Url,
    Stdlib = global_data.Stdlib,
    Stdlib_List = global_data.Stdlib__List,
    Lwt = global_data.Lwt,
    Js_of_ocaml_lwt_Lwt_js = global_data.Js_of_ocaml_lwt__Lwt_js,
    Js_of_ocaml_Dom = global_data.Js_of_ocaml__Dom,
    Js_of_ocaml_Firebug = global_data.Js_of_ocaml__Firebug,
    cst_Jsonp_call_Cannot_parse_ur = "Jsonp.call: Cannot parse url",
    cst_callback = "callback";
   function call_custom_url(timeout, opt, make_uri){
    if(opt) var sth = opt[1], prefix = sth; else var prefix = cst;
    var
     match = caml_call1(Lwt[22], 0),
     w = match[2],
     t = match[1],
     user_cb = caml_call1(Lwt[52], w);
    function error_cb(param){return caml_call1(Lwt[23], t);}
    var size = 10;
    for(;;){
     var b = caml_call1(Stdlib_Buffer[1], size), i = 0;
     for(;;){
      var
       _i_ = 97 + caml_call1(Stdlib_Random[5], 26) | 0,
       _j_ = caml_call1(Js_of_ocaml_lwt_Import[4][1], _i_);
      caml_call2(Stdlib_Buffer[12], b, _j_);
      var _k_ = i + 1 | 0;
      if(9 === i) break;
      i = _k_;
     }
     var
      s = caml_call1(Stdlib_Buffer[2], b),
      _h_ = Js_of_ocaml_Dom_html[8][caml_jsstring_of_string(s)];
     if(! caml_call1(Js_of_ocaml_Js[6][5], _h_)) break;
    }
    var
     name = caml_call2(Stdlib[28], prefix, s),
     uri = caml_call1(make_uri, name),
     script = caml_call1(Js_of_ocaml_Dom_html[73], Js_of_ocaml_Dom_html[2]);
    function finalize(param){
     delete Js_of_ocaml_Dom_html[8][caml_jsstring_of_string(name)];
     return caml_call2
             (Js_of_ocaml_Js[5][6],
              script.parentNode,
              function(parent){
               return caml_call2(Js_of_ocaml_Dom[4], parent, script);
              });
    }
    var executed = [0, 0];
    Js_of_ocaml_Dom_html[8][caml_jsstring_of_string(name)] =
     runtime.caml_js_wrap_callback
      (function(x){
        executed[1] = 1;
        finalize(0);
        return caml_call1(user_cb, x);
       });
    var t1 = caml_jsstring_of_string(uri);
    script.src = t1;
    script.type = "text/javascript";
    var t5 = Js_of_ocaml_Js[7];
    script.async = t5;
    function t7(x){finalize(0); return error_cb(x);}
    script.onerror = t7;
    function t11(x){
     return caml_call1
             (Lwt[11],
              function(param){
               var _m_ = caml_call1(Js_of_ocaml_lwt_Lwt_js[1], 1.);
               return caml_call2
                       (Lwt[6],
                        _m_,
                        function(param){
                         if(executed[1]) return Lwt[36];
                         var t10 = Js_of_ocaml_Firebug[1];
                         t10.warn("Jsonp: script loaded but callback not executed");
                         finalize(0);
                         error_cb(x);
                         return Lwt[36];
                        });
              });
    }
    script.onload = t11;
    caml_call2(Lwt[24], t, finalize);
    if(timeout)
     var
      delay = timeout[1],
      _l_ = caml_call1(Js_of_ocaml_lwt_Lwt_js[1], delay),
      wait =
        caml_call2
         (Lwt[6], _l_, function(param){caml_call1(Lwt[23], t); return t;}),
      new_t = caml_call1(Lwt[17], [0, wait, [0, t, 0]]);
    else
     var new_t = t;
    var t13 = Js_of_ocaml_Dom_html[2];
    caml_call2(Js_of_ocaml_Dom[5], t13.body, script);
    return new_t;
   }
   function add_param(name, value, l){
    var
     l$0 =
       caml_call2
        (Stdlib_List[41],
         function(param){
          var x = param[1];
          return 1 - caml_call2(Js_of_ocaml_lwt_Import[3][62], x, name);
         },
         l);
    return [0, [0, name, value], l$0];
   }
   function call(timeout, opt, _a_, url){
    if(opt) var sth = opt[1], param = sth; else var param = cst_callback;
    if(_a_) var sth$0 = _a_[1], prefix = sth$0; else var prefix = cst$0;
    function make_uri(cbname){
     var match = caml_call1(Js_of_ocaml_Url[8], url);
     if(! match) return caml_call1(Stdlib[2], cst_Jsonp_call_Cannot_parse_ur);
     var url$0 = match[1];
     switch(url$0[0]){
       case 0:
        var
         http = url$0[1],
         _b_ = http[6],
         _c_ = add_param(param, cbname, http[5]),
         new_url = [0, [0, http[1], http[2], http[3], http[4], _c_, _b_]];
        break;
       case 1:
        var
         http$0 = url$0[1],
         _d_ = http$0[6],
         _e_ = add_param(param, cbname, http$0[5]),
         new_url =
           [1, [0, http$0[1], http$0[2], http$0[3], http$0[4], _e_, _d_]];
        break;
       default:
        var
         file = url$0[1],
         _f_ = file[4],
         _g_ = add_param(param, cbname, file[3]),
         new_url = [2, [0, file[1], file[2], _g_, _f_]];
     }
     return caml_call1(Js_of_ocaml_Url[9], new_url);
    }
    return call_custom_url(timeout, [0, prefix], make_uri);
   }
   var Js_of_ocaml_lwt_Lwt_jsonp = [0, call, call_custom_url];
   runtime.caml_register_global
    (27, Js_of_ocaml_lwt_Lwt_jsonp, "Js_of_ocaml_lwt__Lwt_jsonp");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Js_of_ocaml_lwt__Lwt_js_events
//# unitInfo: Requires: Js_of_ocaml__Dom, Js_of_ocaml__Dom_html, Js_of_ocaml__Firebug, Js_of_ocaml__Js, Js_of_ocaml_lwt__Import, Js_of_ocaml_lwt__Lwt_js, Lwt, Lwt_condition, Stdlib, Stdlib__Printexc
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Lwt_js_event$2 = "Lwt_js_event",
    cst_complete = "complete",
    caml_js_from_bool = runtime.caml_js_from_bool;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) === 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) === 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Lwt = global_data.Lwt,
    Js_of_ocaml_Dom_html = global_data.Js_of_ocaml__Dom_html,
    Js_of_ocaml_Dom = global_data.Js_of_ocaml__Dom,
    Js_of_ocaml_Firebug = global_data.Js_of_ocaml__Firebug,
    Js_of_ocaml_Js = global_data.Js_of_ocaml__Js,
    Js_of_ocaml_lwt_Lwt_js = global_data.Js_of_ocaml_lwt__Lwt_js,
    Js_of_ocaml_lwt_Import = global_data.Js_of_ocaml_lwt__Import,
    Lwt_condition = global_data.Lwt_condition,
    Stdlib = global_data.Stdlib,
    Stdlib_Printexc = global_data.Stdlib__Printexc,
    symbol_bind = Lwt[6],
    cst_Lwt_js_event = cst_Lwt_js_event$2,
    cst_Lwt_js_event$0 = cst_Lwt_js_event$2,
    cst_Lwt_js_event$1 = cst_Lwt_js_event$2;
   function async(f){
    return caml_call1
            (Lwt[11],
             function(param){
              return caml_call2
                      (symbol_bind, caml_call1(Js_of_ocaml_lwt_Lwt_js[2], 0), f);
             });
   }
   function opt_map(f, param){
    if(! param) return 0;
    var x = param[1];
    return [0, caml_call1(f, x)];
   }
   function make_event(event_kind, use_capture, passive, target){
    var
     el = [0, Js_of_ocaml_Js[1]],
     match = caml_call1(Lwt[22], 0),
     w = match[2],
     t = match[1];
    function cancel(param){
     return caml_call2(Js_of_ocaml_Js[5][6], el[1], Js_of_ocaml_Dom_html[18]);
    }
    caml_call2(Lwt[24], t, cancel);
    var
     _a3_ =
       caml_call1
        (Js_of_ocaml_Dom_html[10],
         function(ev){cancel(0); caml_call2(Lwt[52], w, ev); return ! ! 1;}),
     _a4_ = opt_map(caml_js_from_bool, passive),
     _a5_ = opt_map(caml_js_from_bool, use_capture),
     _a6_ =
       caml_call6
        (Js_of_ocaml_Dom[15], target, event_kind, _a5_, 0, _a4_, _a3_);
    el[1] = caml_call1(Js_of_ocaml_Js[2], _a6_);
    return t;
   }
   function catch_cancel(f, x){
    return caml_call2
            (Lwt[7],
             function(param){return caml_call1(f, x);},
             function(e){
              return e === Lwt[21]
                      ? caml_call1(Lwt[4], 0)
                      : caml_call1(Lwt[5], e);
             });
   }
   function with_error_log(f, x){
    return caml_call2
            (Lwt[7],
             function(param){return caml_call1(f, x);},
             function(e){
              var
               t0 =
                 runtime.caml_jsstring_of_string
                  (caml_call1(Stdlib_Printexc[1], e)),
               t1 = Js_of_ocaml_Firebug[1];
              t1.log(t0);
              return caml_call1(Lwt[4], 0);
             });
   }
   function seq_loop(evh, opt, use_capture, passive, target, handler){
    if(opt)
     var sth = opt[1], cancel_handler = sth;
    else
     var cancel_handler = 0;
    var
     cancelled = [0, 0],
     cur = [0, caml_call1(Lwt[5], [0, Stdlib[7], cst_Lwt_js_event])],
     cur_handler = [0, caml_call1(Lwt[4], 0)],
     lt = caml_call1(Lwt[22], 0)[1];
    caml_call2
     (Lwt[24],
      lt,
      function(param){
       caml_call1(Lwt[23], cur[1]);
       if(cancel_handler) caml_call1(Lwt[23], cur_handler[1]);
       cancelled[1] = 1;
       return 0;
      });
    function aux(param){
     if(cancelled[1]) return caml_call1(Lwt[4], 0);
     var t = caml_call3(evh, use_capture, passive, target);
     cur[1] = t;
     return caml_call2
             (symbol_bind,
              t,
              function(e){
               cur_handler[1] = with_error_log(caml_call1(handler, e), lt);
               return caml_call2(symbol_bind, cur_handler[1], aux);
              });
    }
    caml_call1(Lwt[11], function(_a2_){return catch_cancel(aux, _a2_);});
    return lt;
   }
   function async_loop(evh, use_capture, passive, target, handler){
    var
     cancelled = [0, 0],
     cur = [0, caml_call1(Lwt[5], [0, Stdlib[7], cst_Lwt_js_event$0])],
     lt = caml_call1(Lwt[22], 0)[1];
    caml_call2
     (Lwt[24],
      lt,
      function(param){
       caml_call1(Lwt[23], cur[1]);
       cancelled[1] = 1;
       return 0;
      });
    function aux(param){
     if(cancelled[1]) return caml_call1(Lwt[4], 0);
     var t = caml_call3(evh, use_capture, passive, target);
     cur[1] = t;
     return caml_call2
             (symbol_bind,
              t,
              function(e){
               caml_call1
                (Lwt[11],
                 function(param){
                  return with_error_log(caml_call1(handler, e), lt);
                 });
               return aux(0);
              });
    }
    caml_call1(Lwt[11], function(_a1_){return catch_cancel(aux, _a1_);});
    return lt;
   }
   function buffered_loop
   (evh, opt, _aZ_, use_capture, passive, target, handler){
    if(opt)
     var sth = opt[1], cancel_handler = sth;
    else
     var cancel_handler = 0;
    if(_aZ_)
     var sth$0 = _aZ_[1], cancel_queue = sth$0;
    else
     var cancel_queue = 1;
    var
     cancelled = [0, 0],
     queue = [0, 0],
     cur = [0, caml_call1(Lwt[5], [0, Stdlib[7], cst_Lwt_js_event$1])],
     cur_handler = [0, caml_call1(Lwt[4], 0)],
     lt = caml_call1(Lwt[22], 0)[1],
     spawn = caml_call1(Lwt_condition[1], 0);
    caml_call2
     (Lwt[24],
      lt,
      function(param){
       caml_call1(Lwt[23], cur[1]);
       if(cancel_handler) caml_call1(Lwt[23], cur_handler[1]);
       if(cancel_queue) queue[1] = 0;
       cancelled[1] = 1;
       return 0;
      });
    function spawner(param){
     if(cancelled[1]) return caml_call1(Lwt[4], 0);
     var t = caml_call3(evh, use_capture, passive, target);
     cur[1] = t;
     return caml_call2
             (symbol_bind,
              t,
              function(e){
               queue[1] = [0, e, queue[1]];
               caml_call2(Lwt_condition[3], spawn, 0);
               return spawner(0);
              });
    }
    function runner(param){
     cur_handler[1] = caml_call1(Lwt[4], 0);
     if(cancelled[1]) return caml_call1(Lwt[4], 0);
     var match = queue[1];
     if(! match)
      return caml_call2
              (symbol_bind, caml_call2(Lwt_condition[2], 0, spawn), runner);
     var tl = match[2], e = match[1];
     queue[1] = tl;
     cur_handler[1] = with_error_log(caml_call1(handler, e), lt);
     return caml_call2(symbol_bind, cur_handler[1], runner);
    }
    caml_call1(Lwt[11], function(_a0_){return catch_cancel(spawner, _a0_);});
    caml_call1(Lwt[11], runner);
    return lt;
   }
   function func_limited_loop
   (event, limited_func, use_capture, passive, target, handler){
    var count = [0, 0];
    return async_loop
            (event,
             use_capture,
             passive,
             target,
             function(ev, lt){
              count[1]++;
              var nb = count[1];
              return caml_call2
                      (symbol_bind,
                       caml_call1(limited_func, 0),
                       function(param){
                        return caml_call2(Js_of_ocaml_lwt_Import[8], count[1], nb)
                                ? caml_call2(handler, ev, lt)
                                : caml_call1(Lwt[4], 0);
                       });
             });
   }
   function limited_loop(event, opt){
    if(opt) var sth = opt[1], elapsed_time = sth; else var elapsed_time = 0.1;
    function _aU_(param){
     return caml_call1(Js_of_ocaml_lwt_Lwt_js[1], elapsed_time);
    }
    return function(_aV_, _aW_, _aX_, _aY_){
     return func_limited_loop(event, _aU_, _aV_, _aW_, _aX_, _aY_);};
   }
   function click(use_capture, passive, target){
    return make_event
            (Js_of_ocaml_Dom_html[15][2], use_capture, passive, target);
   }
   function copy(use_capture, passive, target){
    return make_event
            (Js_of_ocaml_Dom_html[15][4], use_capture, passive, target);
   }
   function cut(use_capture, passive, target){
    return make_event
            (Js_of_ocaml_Dom_html[15][5], use_capture, passive, target);
   }
   function paste(use_capture, passive, target){
    return make_event
            (Js_of_ocaml_Dom_html[15][6], use_capture, passive, target);
   }
   function dblclick(use_capture, passive, target){
    return make_event
            (Js_of_ocaml_Dom_html[15][7], use_capture, passive, target);
   }
   function mousedown(use_capture, passive, target){
    return make_event
            (Js_of_ocaml_Dom_html[15][8], use_capture, passive, target);
   }
   function mouseup(use_capture, passive, target){
    return make_event
            (Js_of_ocaml_Dom_html[15][9], use_capture, passive, target);
   }
   function mouseover(use_capture, passive, target){
    return make_event
            (Js_of_ocaml_Dom_html[15][10], use_capture, passive, target);
   }
   function mousemove(use_capture, passive, target){
    return make_event
            (Js_of_ocaml_Dom_html[15][11], use_capture, passive, target);
   }
   function mouseout(use_capture, passive, target){
    return make_event
            (Js_of_ocaml_Dom_html[15][12], use_capture, passive, target);
   }
   function keypress(use_capture, passive, target){
    return make_event
            (Js_of_ocaml_Dom_html[15][13], use_capture, passive, target);
   }
   function keydown(use_capture, passive, target){
    return make_event
            (Js_of_ocaml_Dom_html[15][14], use_capture, passive, target);
   }
   function keyup(use_capture, passive, target){
    return make_event
            (Js_of_ocaml_Dom_html[15][15], use_capture, passive, target);
   }
   function change(use_capture, passive, target){
    return make_event
            (Js_of_ocaml_Dom_html[15][31], use_capture, passive, target);
   }
   function input(use_capture, passive, target){
    return make_event
            (Js_of_ocaml_Dom_html[15][32], use_capture, passive, target);
   }
   function timeupdate(use_capture, passive, target){
    return make_event
            (Js_of_ocaml_Dom_html[15][33], use_capture, passive, target);
   }
   function dragstart(use_capture, passive, target){
    return make_event
            (Js_of_ocaml_Dom_html[15][23], use_capture, passive, target);
   }
   function dragend(use_capture, passive, target){
    return make_event
            (Js_of_ocaml_Dom_html[15][24], use_capture, passive, target);
   }
   function dragenter(use_capture, passive, target){
    return make_event
            (Js_of_ocaml_Dom_html[15][25], use_capture, passive, target);
   }
   function dragover(use_capture, passive, target){
    return make_event
            (Js_of_ocaml_Dom_html[15][26], use_capture, passive, target);
   }
   function dragleave(use_capture, passive, target){
    return make_event
            (Js_of_ocaml_Dom_html[15][27], use_capture, passive, target);
   }
   function drag(use_capture, passive, target){
    return make_event
            (Js_of_ocaml_Dom_html[15][28], use_capture, passive, target);
   }
   function drop(use_capture, passive, target){
    return make_event
            (Js_of_ocaml_Dom_html[15][29], use_capture, passive, target);
   }
   function focus(use_capture, passive, target){
    return make_event
            (Js_of_ocaml_Dom_html[15][36], use_capture, passive, target);
   }
   function blur(use_capture, passive, target){
    return make_event
            (Js_of_ocaml_Dom_html[15][37], use_capture, passive, target);
   }
   function scroll(use_capture, passive, target){
    return make_event
            (Js_of_ocaml_Dom_html[15][35], use_capture, passive, target);
   }
   function submit(use_capture, passive, target){
    return make_event
            (Js_of_ocaml_Dom_html[15][34], use_capture, passive, target);
   }
   function select(use_capture, passive, target){
    return make_event
            (Js_of_ocaml_Dom_html[15][46], use_capture, passive, target);
   }
   function abort(use_capture, passive, target){
    return make_event
            (Js_of_ocaml_Dom_html[15][45], use_capture, passive, target);
   }
   function error(use_capture, passive, target){
    return make_event
            (Js_of_ocaml_Dom_html[15][44], use_capture, passive, target);
   }
   function load(use_capture, passive, target){
    return make_event
            (Js_of_ocaml_Dom_html[15][38], use_capture, passive, target);
   }
   function canplay(use_capture, passive, target){
    return make_event
            (Js_of_ocaml_Dom_html[15][65], use_capture, passive, target);
   }
   function canplaythrough(use_capture, passive, target){
    return make_event
            (Js_of_ocaml_Dom_html[15][66], use_capture, passive, target);
   }
   function durationchange(use_capture, passive, target){
    return make_event
            (Js_of_ocaml_Dom_html[15][67], use_capture, passive, target);
   }
   function emptied(use_capture, passive, target){
    return make_event
            (Js_of_ocaml_Dom_html[15][68], use_capture, passive, target);
   }
   function ended(use_capture, passive, target){
    return make_event
            (Js_of_ocaml_Dom_html[15][69], use_capture, passive, target);
   }
   function loadeddata(use_capture, passive, target){
    return make_event
            (Js_of_ocaml_Dom_html[15][71], use_capture, passive, target);
   }
   function loadedmetadata(use_capture, passive, target){
    return make_event
            (Js_of_ocaml_Dom_html[15][72], use_capture, passive, target);
   }
   function loadstart(use_capture, passive, target){
    return make_event
            (Js_of_ocaml_Dom_html[15][73], use_capture, passive, target);
   }
   function pause(use_capture, passive, target){
    return make_event
            (Js_of_ocaml_Dom_html[15][76], use_capture, passive, target);
   }
   function play(use_capture, passive, target){
    return make_event
            (Js_of_ocaml_Dom_html[15][77], use_capture, passive, target);
   }
   function playing(use_capture, passive, target){
    return make_event
            (Js_of_ocaml_Dom_html[15][78], use_capture, passive, target);
   }
   function ratechange(use_capture, passive, target){
    return make_event
            (Js_of_ocaml_Dom_html[15][87], use_capture, passive, target);
   }
   function seeked(use_capture, passive, target){
    return make_event
            (Js_of_ocaml_Dom_html[15][88], use_capture, passive, target);
   }
   function seeking(use_capture, passive, target){
    return make_event
            (Js_of_ocaml_Dom_html[15][89], use_capture, passive, target);
   }
   function stalled(use_capture, passive, target){
    return make_event
            (Js_of_ocaml_Dom_html[15][90], use_capture, passive, target);
   }
   function suspend(use_capture, passive, target){
    return make_event
            (Js_of_ocaml_Dom_html[15][91], use_capture, passive, target);
   }
   function volumechange(use_capture, passive, target){
    return make_event
            (Js_of_ocaml_Dom_html[15][92], use_capture, passive, target);
   }
   function waiting(use_capture, passive, target){
    return make_event
            (Js_of_ocaml_Dom_html[15][93], use_capture, passive, target);
   }
   function mousewheel(use_capture, passive, target){
    var
     el = [0, Js_of_ocaml_Js[1]],
     match = caml_call1(Lwt[22], 0),
     w = match[2],
     t = match[1];
    function cancel(param){
     return caml_call2(Js_of_ocaml_Js[5][6], el[1], Js_of_ocaml_Dom_html[18]);
    }
    caml_call2(Lwt[24], t, cancel);
    var
     _aR_ = opt_map(caml_js_from_bool, passive),
     _aS_ = opt_map(caml_js_from_bool, use_capture),
     _aT_ =
       caml_call5
        (Js_of_ocaml_Dom_html[19],
         target,
         _aS_,
         0,
         _aR_,
         function(ev, dx, dy){
          var t3 = Js_of_ocaml_Firebug[1];
          t3.log(ev);
          cancel(0);
          caml_call2(Lwt[52], w, [0, ev, [0, dx, dy]]);
          return ! ! 1;
         });
    el[1] = caml_call1(Js_of_ocaml_Js[2], _aT_);
    return t;
   }
   function wheel(use_capture, passive, target){
    return make_event
            (Js_of_ocaml_Dom_html[15][18], use_capture, passive, target);
   }
   function touchstart(use_capture, passive, target){
    return make_event
            (Js_of_ocaml_Dom_html[15][19], use_capture, passive, target);
   }
   function touchmove(use_capture, passive, target){
    return make_event
            (Js_of_ocaml_Dom_html[15][20], use_capture, passive, target);
   }
   function touchend(use_capture, passive, target){
    return make_event
            (Js_of_ocaml_Dom_html[15][21], use_capture, passive, target);
   }
   function touchcancel(use_capture, passive, target){
    return make_event
            (Js_of_ocaml_Dom_html[15][22], use_capture, passive, target);
   }
   function lostpointercapture(use_capture, passive, target){
    return make_event
            (Js_of_ocaml_Dom_html[15][74], use_capture, passive, target);
   }
   function gotpointercapture(use_capture, passive, target){
    return make_event
            (Js_of_ocaml_Dom_html[15][70], use_capture, passive, target);
   }
   function pointerenter(use_capture, passive, target){
    return make_event
            (Js_of_ocaml_Dom_html[15][79], use_capture, passive, target);
   }
   function pointercancel(use_capture, passive, target){
    return make_event
            (Js_of_ocaml_Dom_html[15][80], use_capture, passive, target);
   }
   function pointerdown(use_capture, passive, target){
    return make_event
            (Js_of_ocaml_Dom_html[15][81], use_capture, passive, target);
   }
   function pointerleave(use_capture, passive, target){
    return make_event
            (Js_of_ocaml_Dom_html[15][82], use_capture, passive, target);
   }
   function pointermove(use_capture, passive, target){
    return make_event
            (Js_of_ocaml_Dom_html[15][83], use_capture, passive, target);
   }
   function pointerout(use_capture, passive, target){
    return make_event
            (Js_of_ocaml_Dom_html[15][84], use_capture, passive, target);
   }
   function pointerover(use_capture, passive, target){
    return make_event
            (Js_of_ocaml_Dom_html[15][85], use_capture, passive, target);
   }
   function pointerup(use_capture, passive, target){
    return make_event
            (Js_of_ocaml_Dom_html[15][86], use_capture, passive, target);
   }
   function transitionend(use_capture, passive, elt){
    return make_event(Js_of_ocaml_Dom_html[15][63], use_capture, passive, elt);
   }
   function transitionstart(use_capture, passive, elt){
    return make_event(Js_of_ocaml_Dom_html[15][62], use_capture, passive, elt);
   }
   function transitionrun(use_capture, passive, elt){
    return make_event(Js_of_ocaml_Dom_html[15][61], use_capture, passive, elt);
   }
   function transitioncancel(use_capture, passive, elt){
    return make_event(Js_of_ocaml_Dom_html[15][64], use_capture, passive, elt);
   }
   function clicks(cancel_handler, use_capture, passive, t){
    return function(_aQ_){
     return seq_loop(click, cancel_handler, use_capture, passive, t, _aQ_);};
   }
   function copies(cancel_handler, use_capture, passive, t){
    return function(_aP_){
     return seq_loop(copy, cancel_handler, use_capture, passive, t, _aP_);};
   }
   function cuts(cancel_handler, use_capture, passive, t){
    return function(_aO_){
     return seq_loop(cut, cancel_handler, use_capture, passive, t, _aO_);};
   }
   function pastes(cancel_handler, use_capture, passive, t){
    return function(_aN_){
     return seq_loop(paste, cancel_handler, use_capture, passive, t, _aN_);};
   }
   function dblclicks(cancel_handler, use_capture, passive, t){
    return function(_aM_){
     return seq_loop(dblclick, cancel_handler, use_capture, passive, t, _aM_);};
   }
   function mousedowns(cancel_handler, use_capture, passive, t){
    return function(_aL_){
     return seq_loop(mousedown, cancel_handler, use_capture, passive, t, _aL_);};
   }
   function mouseups(cancel_handler, use_capture, passive, t){
    return function(_aK_){
     return seq_loop(mouseup, cancel_handler, use_capture, passive, t, _aK_);};
   }
   function mouseovers(cancel_handler, use_capture, passive, t){
    return function(_aJ_){
     return seq_loop(mouseover, cancel_handler, use_capture, passive, t, _aJ_);};
   }
   function mousemoves(cancel_handler, use_capture, passive, t){
    return function(_aI_){
     return seq_loop(mousemove, cancel_handler, use_capture, passive, t, _aI_);};
   }
   function mouseouts(cancel_handler, use_capture, passive, t){
    return function(_aH_){
     return seq_loop(mouseout, cancel_handler, use_capture, passive, t, _aH_);};
   }
   function keypresses(cancel_handler, use_capture, passive, t){
    return function(_aG_){
     return seq_loop(keypress, cancel_handler, use_capture, passive, t, _aG_);};
   }
   function keydowns(cancel_handler, use_capture, passive, t){
    return function(_aF_){
     return seq_loop(keydown, cancel_handler, use_capture, passive, t, _aF_);};
   }
   function keyups(cancel_handler, use_capture, passive, t){
    return function(_aE_){
     return seq_loop(keyup, cancel_handler, use_capture, passive, t, _aE_);};
   }
   function changes(cancel_handler, use_capture, passive, t){
    return function(_aD_){
     return seq_loop(change, cancel_handler, use_capture, passive, t, _aD_);};
   }
   function inputs(cancel_handler, use_capture, passive, t){
    return function(_aC_){
     return seq_loop(input, cancel_handler, use_capture, passive, t, _aC_);};
   }
   function timeupdates(cancel_handler, use_capture, passive, t){
    return function(_aB_){
     return seq_loop
             (timeupdate, cancel_handler, use_capture, passive, t, _aB_);};
   }
   function dragstarts(cancel_handler, use_capture, passive, t){
    return function(_aA_){
     return seq_loop(dragstart, cancel_handler, use_capture, passive, t, _aA_);};
   }
   function dragends(cancel_handler, use_capture, passive, t){
    return function(_az_){
     return seq_loop(dragend, cancel_handler, use_capture, passive, t, _az_);};
   }
   function dragenters(cancel_handler, use_capture, passive, t){
    return function(_ay_){
     return seq_loop(dragenter, cancel_handler, use_capture, passive, t, _ay_);};
   }
   function dragovers(cancel_handler, use_capture, passive, t){
    return function(_ax_){
     return seq_loop(dragover, cancel_handler, use_capture, passive, t, _ax_);};
   }
   function dragleaves(cancel_handler, use_capture, passive, t){
    return function(_aw_){
     return seq_loop(dragleave, cancel_handler, use_capture, passive, t, _aw_);};
   }
   function drags(cancel_handler, use_capture, passive, t){
    return function(_av_){
     return seq_loop(drag, cancel_handler, use_capture, passive, t, _av_);};
   }
   function drops(cancel_handler, use_capture, passive, t){
    return function(_au_){
     return seq_loop(drop, cancel_handler, use_capture, passive, t, _au_);};
   }
   function mousewheels(cancel_handler, use_capture, passive, t){
    return function(_at_){
     return seq_loop
             (mousewheel, cancel_handler, use_capture, passive, t, _at_);};
   }
   function wheels(cancel_handler, use_capture, passive, t){
    return function(_as_){
     return seq_loop(wheel, cancel_handler, use_capture, passive, t, _as_);};
   }
   function touchstarts(cancel_handler, use_capture, passive, t){
    return function(_ar_){
     return seq_loop
             (touchstart, cancel_handler, use_capture, passive, t, _ar_);};
   }
   function touchmoves(cancel_handler, use_capture, passive, t){
    return function(_aq_){
     return seq_loop(touchmove, cancel_handler, use_capture, passive, t, _aq_);};
   }
   function touchends(cancel_handler, use_capture, passive, t){
    return function(_ap_){
     return seq_loop(touchend, cancel_handler, use_capture, passive, t, _ap_);};
   }
   function touchcancels(cancel_handler, use_capture, passive, t){
    return function(_ao_){
     return seq_loop
             (touchcancel, cancel_handler, use_capture, passive, t, _ao_);};
   }
   function focuses(cancel_handler, use_capture, passive, t){
    return function(_an_){
     return seq_loop(focus, cancel_handler, use_capture, passive, t, _an_);};
   }
   function blurs(cancel_handler, use_capture, passive, t){
    return function(_am_){
     return seq_loop(blur, cancel_handler, use_capture, passive, t, _am_);};
   }
   function scrolls(cancel_handler, use_capture, passive, t){
    return function(_al_){
     return seq_loop(scroll, cancel_handler, use_capture, passive, t, _al_);};
   }
   function submits(cancel_handler, use_capture, passive, t){
    return function(_ak_){
     return seq_loop(submit, cancel_handler, use_capture, passive, t, _ak_);};
   }
   function selects(cancel_handler, use_capture, passive, t){
    return function(_aj_){
     return seq_loop(select, cancel_handler, use_capture, passive, t, _aj_);};
   }
   function aborts(cancel_handler, use_capture, passive, t){
    return function(_ai_){
     return seq_loop(abort, cancel_handler, use_capture, passive, t, _ai_);};
   }
   function errors(cancel_handler, use_capture, passive, t){
    return function(_ah_){
     return seq_loop(error, cancel_handler, use_capture, passive, t, _ah_);};
   }
   function loads(cancel_handler, use_capture, passive, t){
    return function(_ag_){
     return seq_loop(load, cancel_handler, use_capture, passive, t, _ag_);};
   }
   function canplays(cancel_handler, use_capture, passive, t){
    return function(_af_){
     return seq_loop(canplay, cancel_handler, use_capture, passive, t, _af_);};
   }
   function canplaythroughs(cancel_handler, use_capture, passive, t){
    return function(_ae_){
     return seq_loop
             (canplaythrough, cancel_handler, use_capture, passive, t, _ae_);};
   }
   function durationchanges(cancel_handler, use_capture, passive, t){
    return function(_ad_){
     return seq_loop
             (durationchange, cancel_handler, use_capture, passive, t, _ad_);};
   }
   function emptieds(cancel_handler, use_capture, passive, t){
    return function(_ac_){
     return seq_loop(emptied, cancel_handler, use_capture, passive, t, _ac_);};
   }
   function endeds(cancel_handler, use_capture, passive, t){
    return function(_ab_){
     return seq_loop(ended, cancel_handler, use_capture, passive, t, _ab_);};
   }
   function loadeddatas(cancel_handler, use_capture, passive, t){
    return function(_aa_){
     return seq_loop
             (loadeddata, cancel_handler, use_capture, passive, t, _aa_);};
   }
   function loadedmetadatas(cancel_handler, use_capture, passive, t){
    return function(_$_){
     return seq_loop
             (loadedmetadata, cancel_handler, use_capture, passive, t, _$_);};
   }
   function loadstarts(cancel_handler, use_capture, passive, t){
    return function(___){
     return seq_loop(loadstart, cancel_handler, use_capture, passive, t, ___);};
   }
   function pauses(cancel_handler, use_capture, passive, t){
    return function(_Z_){
     return seq_loop(pause, cancel_handler, use_capture, passive, t, _Z_);};
   }
   function plays(cancel_handler, use_capture, passive, t){
    return function(_Y_){
     return seq_loop(play, cancel_handler, use_capture, passive, t, _Y_);};
   }
   function playings(cancel_handler, use_capture, passive, t){
    return function(_X_){
     return seq_loop(playing, cancel_handler, use_capture, passive, t, _X_);};
   }
   function ratechanges(cancel_handler, use_capture, passive, t){
    return function(_W_){
     return seq_loop(ratechange, cancel_handler, use_capture, passive, t, _W_);};
   }
   function seekeds(cancel_handler, use_capture, passive, t){
    return function(_V_){
     return seq_loop(seeked, cancel_handler, use_capture, passive, t, _V_);};
   }
   function seekings(cancel_handler, use_capture, passive, t){
    return function(_U_){
     return seq_loop(seeking, cancel_handler, use_capture, passive, t, _U_);};
   }
   function stalleds(cancel_handler, use_capture, passive, t){
    return function(_T_){
     return seq_loop(stalled, cancel_handler, use_capture, passive, t, _T_);};
   }
   function suspends(cancel_handler, use_capture, passive, t){
    return function(_S_){
     return seq_loop(suspend, cancel_handler, use_capture, passive, t, _S_);};
   }
   function volumechanges(cancel_handler, use_capture, passive, t){
    return function(_R_){
     return seq_loop
             (volumechange, cancel_handler, use_capture, passive, t, _R_);};
   }
   function waitings(cancel_handler, use_capture, passive, t){
    return function(_Q_){
     return seq_loop(waiting, cancel_handler, use_capture, passive, t, _Q_);};
   }
   function lostpointercaptures(cancel_handler, use_capture, passive, t){
    return function(_P_){
     return seq_loop
             (lostpointercapture,
              cancel_handler,
              use_capture,
              passive,
              t,
              _P_);};
   }
   function gotpointercaptures(cancel_handler, use_capture, passive, t){
    return function(_O_){
     return seq_loop
             (gotpointercapture, cancel_handler, use_capture, passive, t, _O_);};
   }
   function pointerenters(cancel_handler, use_capture, passive, t){
    return function(_N_){
     return seq_loop
             (pointerenter, cancel_handler, use_capture, passive, t, _N_);};
   }
   function pointercancels(cancel_handler, use_capture, passive, t){
    return function(_M_){
     return seq_loop
             (pointercancel, cancel_handler, use_capture, passive, t, _M_);};
   }
   function pointerdowns(cancel_handler, use_capture, passive, t){
    return function(_L_){
     return seq_loop
             (pointerdown, cancel_handler, use_capture, passive, t, _L_);};
   }
   function pointerleaves(cancel_handler, use_capture, passive, t){
    return function(_K_){
     return seq_loop
             (pointerleave, cancel_handler, use_capture, passive, t, _K_);};
   }
   function pointermoves(cancel_handler, use_capture, passive, t){
    return function(_J_){
     return seq_loop
             (pointermove, cancel_handler, use_capture, passive, t, _J_);};
   }
   function pointerouts(cancel_handler, use_capture, passive, t){
    return function(_I_){
     return seq_loop(pointerout, cancel_handler, use_capture, passive, t, _I_);};
   }
   function pointerovers(cancel_handler, use_capture, passive, t){
    return function(_H_){
     return seq_loop
             (pointerover, cancel_handler, use_capture, passive, t, _H_);};
   }
   function pointerups(cancel_handler, use_capture, passive, t){
    return function(_G_){
     return seq_loop(pointerup, cancel_handler, use_capture, passive, t, _G_);};
   }
   function transitionends(cancel_handler, use_capture, passive, t){
    return function(_F_){
     return seq_loop
             (transitionend, cancel_handler, use_capture, passive, t, _F_);};
   }
   function transitionstarts(cancel_handler, use_capture, passive, t){
    return function(_E_){
     return seq_loop
             (transitionstart, cancel_handler, use_capture, passive, t, _E_);};
   }
   function transitionruns(cancel_handler, use_capture, passive, t){
    return function(_D_){
     return seq_loop
             (transitionrun, cancel_handler, use_capture, passive, t, _D_);};
   }
   function transitioncancels(cancel_handler, use_capture, passive, t){
    return function(_C_){
     return seq_loop
             (transitioncancel, cancel_handler, use_capture, passive, t, _C_);};
   }
   function request_animation_frame(param){
    var
     match = caml_call1(Lwt[1], 0),
     s = match[2],
     t = match[1],
     t4 =
       runtime.caml_js_wrap_callback
        (function(param){return caml_call2(Lwt[52], s, 0);}),
     t5 = Js_of_ocaml_Dom_html[8];
    t5.requestAnimationFrame(t4);
    return t;
   }
   function onload(param){
    return make_event
            (Js_of_ocaml_Dom_html[15][38], 0, 0, Js_of_ocaml_Dom_html[8]);
   }
   var
    t6 = Js_of_ocaml_Dom_html[8],
    doc = t6.document,
    cst_readystatechange = "readystatechange";
   function domContentLoaded(param){
    if(doc.readyState === cst_complete) return Lwt[36];
    var match = caml_call1(Lwt[22], 0), w = match[2], t = match[1];
    function wakeup(w, param){
     var _B_ = caml_call1(Lwt[76], t);
     return _B_ ? caml_call2(Lwt[52], w, 0) : _B_;
    }
    function wakeup_exn(w, e){
     var _A_ = caml_call1(Lwt[76], t);
     return _A_ ? caml_call2(Lwt[53], w, e) : _A_;
    }
    var regular = make_event(Js_of_ocaml_Dom_html[15][56], 0, 0, doc);
    caml_call3
     (Lwt[32],
      regular,
      function(_z_){return wakeup(w, _z_);},
      function(_y_){return wakeup_exn(w, _y_);});
    var
     _s_ = caml_call1(Js_of_ocaml_Dom[14][1], cst_readystatechange),
     readystatechange =
       async_loop
        (function(_v_, _w_, _x_){return make_event(_s_, _v_, _w_, _x_);},
         0,
         0,
         doc,
         function(e, param){
          if(doc.readyState === cst_complete) wakeup(w, e);
          return Lwt[36];
         }),
     init =
       make_event(Js_of_ocaml_Dom_html[15][38], 0, 0, Js_of_ocaml_Dom_html[8]);
    caml_call3
     (Lwt[32],
      init,
      function(_u_){return wakeup(w, _u_);},
      function(_t_){return wakeup_exn(w, _t_);});
    return caml_call2
            (Lwt[6],
             t,
             function(e){
              caml_call1(Lwt[23], regular);
              caml_call1(Lwt[23], readystatechange);
              caml_call1(Lwt[23], init);
              return Lwt[36];
             });
   }
   function onunload(param){
    return make_event
            (Js_of_ocaml_Dom_html[15][39], 0, 0, Js_of_ocaml_Dom_html[8]);
   }
   function onbeforeunload(param){
    return make_event
            (Js_of_ocaml_Dom_html[15][40], 0, 0, Js_of_ocaml_Dom_html[8]);
   }
   function onresize(param){
    return make_event
            (Js_of_ocaml_Dom_html[15][41], 0, 0, Js_of_ocaml_Dom_html[8]);
   }
   function onorientationchange(param){
    return make_event
            (Js_of_ocaml_Dom_html[15][42], 0, 0, Js_of_ocaml_Dom_html[8]);
   }
   function onpopstate(param){
    return make_event
            (Js_of_ocaml_Dom_html[15][43], 0, 0, Js_of_ocaml_Dom_html[8]);
   }
   function onhashchange(param){
    return make_event
            (Js_of_ocaml_Dom_html[15][30], 0, 0, Js_of_ocaml_Dom_html[8]);
   }
   function onorientationchange_or_onresiz(param){
    var _q_ = [0, onorientationchange(0), 0], _r_ = [0, onresize(0), _q_];
    return caml_call1(Lwt[16], _r_);
   }
   function onresizes(t){
    return seq_loop
            (function(param, _p_, _o_){return onresize(0);}, 0, 0, 0, 0, t);
   }
   function onorientationchanges(t){
    return seq_loop
            (function(param, _n_, _m_){return onorientationchange(0);},
             0,
             0,
             0,
             0,
             t);
   }
   function onpopstates(t){
    return seq_loop
            (function(param, _l_, _k_){return onpopstate(0);}, 0, 0, 0, 0, t);
   }
   function onhashchanges(t){
    return seq_loop
            (function(param, _j_, _i_){return onhashchange(0);},
             0,
             0,
             0,
             0,
             t);
   }
   function onorientationchanges_or_onresi(t){
    return seq_loop
            (function(param, _h_, _g_){
              return onorientationchange_or_onresiz(0);
             },
             0,
             0,
             0,
             0,
             t);
   }
   function limited_onresizes(elapsed_time, t){
    return limited_loop
             (function(param, _f_, _e_){return onresize(0);}, elapsed_time)
            (0, 0, 0, t);
   }
   function limited_onorientationchanges(elapsed_time, t){
    return limited_loop
             (function(param, _d_, _c_){return onorientationchange(0);},
              elapsed_time)
            (0, 0, 0, t);
   }
   function limited_onorientationchanges_o(elapsed_time, t){
    return limited_loop
             (function(param, _b_, _a_){
               return onorientationchange_or_onresiz(0);
              },
              elapsed_time)
            (0, 0, 0, t);
   }
   var
    Js_of_ocaml_lwt_Lwt_js_events =
      [0,
       make_event,
       seq_loop,
       async_loop,
       buffered_loop,
       async,
       func_limited_loop,
       limited_loop,
       click,
       copy,
       cut,
       paste,
       dblclick,
       mousedown,
       mouseup,
       mouseover,
       mousemove,
       mouseout,
       keypress,
       keydown,
       keyup,
       input,
       timeupdate,
       change,
       dragstart,
       dragend,
       dragenter,
       dragover,
       dragleave,
       drag,
       drop,
       focus,
       blur,
       scroll,
       submit,
       select,
       mousewheel,
       wheel,
       touchstart,
       touchmove,
       touchend,
       touchcancel,
       lostpointercapture,
       gotpointercapture,
       pointerenter,
       pointercancel,
       pointerdown,
       pointerleave,
       pointermove,
       pointerout,
       pointerover,
       pointerup,
       transitionend,
       transitionstart,
       transitionrun,
       transitioncancel,
       load,
       error,
       abort,
       canplay,
       canplaythrough,
       durationchange,
       emptied,
       ended,
       loadeddata,
       loadedmetadata,
       loadstart,
       pause,
       play,
       playing,
       ratechange,
       seeked,
       seeking,
       stalled,
       suspend,
       volumechange,
       waiting,
       clicks,
       copies,
       cuts,
       pastes,
       dblclicks,
       mousedowns,
       mouseups,
       mouseovers,
       mousemoves,
       mouseouts,
       keypresses,
       keydowns,
       keyups,
       inputs,
       timeupdates,
       changes,
       dragstarts,
       dragends,
       dragenters,
       dragovers,
       dragleaves,
       drags,
       drops,
       mousewheels,
       wheels,
       touchstarts,
       touchmoves,
       touchends,
       touchcancels,
       focuses,
       blurs,
       scrolls,
       submits,
       selects,
       loads,
       errors,
       aborts,
       canplays,
       canplaythroughs,
       durationchanges,
       emptieds,
       endeds,
       loadeddatas,
       loadedmetadatas,
       loadstarts,
       pauses,
       plays,
       playings,
       ratechanges,
       seekeds,
       seekings,
       stalleds,
       suspends,
       volumechanges,
       waitings,
       lostpointercaptures,
       gotpointercaptures,
       pointerenters,
       pointercancels,
       pointerdowns,
       pointerleaves,
       pointermoves,
       pointerouts,
       pointerovers,
       pointerups,
       transitionends,
       transitionstarts,
       transitionruns,
       transitioncancels,
       request_animation_frame,
       onload,
       domContentLoaded,
       onunload,
       onbeforeunload,
       onresize,
       onorientationchange,
       onpopstate,
       onhashchange,
       onorientationchange_or_onresiz,
       onresizes,
       onorientationchanges,
       onpopstates,
       onhashchanges,
       onorientationchanges_or_onresi,
       limited_onresizes,
       limited_onorientationchanges,
       limited_onorientationchanges_o];
   runtime.caml_register_global
    (22, Js_of_ocaml_lwt_Lwt_js_events, "Js_of_ocaml_lwt__Lwt_js_events");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Js_of_ocaml_lwt__Lwt_file
//# unitInfo: Requires: Assert_failure, Js_of_ocaml__Dom, Js_of_ocaml__File, Js_of_ocaml__Js, Lwt
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Js_of_ocaml_File = global_data.Js_of_ocaml__File,
    Js_of_ocaml_Js = global_data.Js_of_ocaml__Js,
    Assert_failure = global_data.Assert_failure,
    Lwt = global_data.Lwt,
    Js_of_ocaml_Dom = global_data.Js_of_ocaml__Dom,
    _a_ = [0, "lib/lwt/lwt_file.ml", 37, 22];
   function reader(kind, file){
    var
     fileReader = Js_of_ocaml_File[6],
     reader = new fileReader,
     match = caml_call1(Lwt[22], 0),
     w = match[2],
     res = match[1],
     t3 =
       caml_call1
        (Js_of_ocaml_Dom[10],
         function(param){
          if(2 === reader.readyState){
           var
            _b_ = caml_call1(Js_of_ocaml_File[3][4], reader.result),
            match = caml_call1(Js_of_ocaml_Js[5][10], _b_);
           if(! match)
            throw caml_maybe_attach_backtrace([0, Assert_failure, _a_], 1);
           var s = match[1];
           caml_call2(Lwt[52], w, s);
          }
          return Js_of_ocaml_Js[8];
         });
    reader.onloadend = t3;
    caml_call2(Lwt[24], res, function(param){return reader.abort();});
    if(typeof kind === "number")
     if(-550809787 === kind)
      reader.readAsDataURL(file);
     else if(936573133 <= kind)
      reader.readAsText(file);
     else
      reader.readAsBinaryString(file);
    else{var t11 = kind[2]; reader.readAsText(file, t11);}
    return res;
   }
   function readAsBinaryString(file){return reader(-1041425454, file);}
   function readAsText(file){return reader(936573133, file);}
   function readAsText_withEncoding(file, e){return reader([0, -973237525, e], file);
   }
   function readAsDataURL(file){return reader(-550809787, file);}
   var
    Js_of_ocaml_lwt_Lwt_file =
      [0,
       readAsBinaryString,
       readAsText,
       readAsText_withEncoding,
       readAsDataURL];
   runtime.caml_register_global
    (14, Js_of_ocaml_lwt_Lwt_file, "Js_of_ocaml_lwt__Lwt_file");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Js_of_ocaml_lwt
//# unitInfo: Requires: Js_of_ocaml__File, Js_of_ocaml__XmlHttpRequest, Js_of_ocaml_lwt__Lwt_file, Js_of_ocaml_lwt__Lwt_xmlHttpRequest
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    global_data = runtime.caml_get_global_data(),
    Js_of_ocaml_XmlHttpRequest = global_data.Js_of_ocaml__XmlHttpRequest,
    Js_of_ocaml_lwt_Lwt_xmlHttpReq =
      global_data.Js_of_ocaml_lwt__Lwt_xmlHttpRequest,
    Js_of_ocaml_File = global_data.Js_of_ocaml__File,
    Js_of_ocaml_lwt_Lwt_file = global_data.Js_of_ocaml_lwt__Lwt_file,
    create = Js_of_ocaml_XmlHttpRequest[1],
    Event = Js_of_ocaml_XmlHttpRequest[2],
    Wrong_headers = Js_of_ocaml_lwt_Lwt_xmlHttpReq[1],
    perform_raw = Js_of_ocaml_lwt_Lwt_xmlHttpReq[2],
    perform_raw_url = Js_of_ocaml_lwt_Lwt_xmlHttpReq[3],
    perform = Js_of_ocaml_lwt_Lwt_xmlHttpReq[4],
    get = Js_of_ocaml_lwt_Lwt_xmlHttpReq[5],
    XmlHttpRequest =
      [0,
       create,
       Event,
       Wrong_headers,
       perform_raw,
       perform_raw_url,
       perform,
       get],
    blob_from_string = Js_of_ocaml_File[1],
    blob_from_any = Js_of_ocaml_File[2],
    CoerceTo = Js_of_ocaml_File[3],
    ReaderEvent = Js_of_ocaml_File[4],
    filename = Js_of_ocaml_File[5],
    fileReader = Js_of_ocaml_File[6],
    addEventListener = Js_of_ocaml_File[7],
    readAsBinaryString = Js_of_ocaml_lwt_Lwt_file[1],
    readAsText = Js_of_ocaml_lwt_Lwt_file[2],
    readAsText_withEncoding = Js_of_ocaml_lwt_Lwt_file[3],
    readAsDataURL = Js_of_ocaml_lwt_Lwt_file[4],
    File =
      [0,
       blob_from_string,
       blob_from_any,
       CoerceTo,
       ReaderEvent,
       filename,
       fileReader,
       addEventListener,
       readAsBinaryString,
       readAsText,
       readAsText_withEncoding,
       readAsDataURL],
    Js_of_ocaml_lwt = [0, XmlHttpRequest, File];
   runtime.caml_register_global(4, Js_of_ocaml_lwt, "Js_of_ocaml_lwt");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
