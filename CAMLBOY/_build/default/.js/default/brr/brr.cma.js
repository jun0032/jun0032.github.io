// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.9.1

//# unitInfo: Provides: Jstr
//# unitInfo: Requires: Stdlib, Stdlib__Uchar
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_length = "length",
    caml_equal = runtime.caml_equal,
    caml_js_meth_call = runtime.caml_js_meth_call,
    caml_list_of_js_array = runtime.caml_list_of_js_array;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib_Uchar = global_data.Stdlib__Uchar,
    Stdlib = global_data.Stdlib,
    jv_global = globalThis;
   function length(s){return s[cst_length];}
   function jstr_of_int(opt, i){
    if(opt) var sth = opt[1], base = sth; else var base = 10;
    return i.toString(base);
   }
   function get(s, i){
    if(s[cst_length] <= i){
     var
      len = s[cst_length],
      s1 = jstr_of_int(0, len - 1 | 0),
      s1$0 = jstr_of_int(0, i),
      s0 = "index ".concat(s1$0),
      s0$1 = s0.concat(" not in bounds [0;"),
      s0$0 = s0$1.concat(s1),
      _b_ = runtime.caml_string_of_jsstring(s0$0.concat("]"));
     return caml_call1(Stdlib[1], _b_);
    }
    var u = s.codePointAt(i);
    a:
    {if(55296 <= u && 57343 >= u){var u$0 = 65533; break a;} var u$0 = u;}
    return caml_call1(Stdlib_Uchar[9], u$0);
   }
   function jstr_of_uchar_int(i){return jv_global["String"].fromCodePoint(i);}
   function get_jstr(s, i){
    var _a_ = get(s, i);
    return jstr_of_uchar_int(caml_call1(Stdlib_Uchar[10], _a_));
   }
   var empty = "", sp = " ", nl = "\n";
   function append(s0, s1){return s0.concat(s1);}
   function concat(opt, ss){
    if(opt) var sth = opt[1], sep = sth; else var sep = empty;
    return runtime.caml_list_to_js_array(ss).join(sep);
   }
   function pad_start(opt, len, s){
    if(opt) var sth = opt[1], pad = sth; else var pad = sp;
    return s.padStart(len, pad);
   }
   function pad_end(opt, len, s){
    if(opt) var sth = opt[1], pad = sth; else var pad = sp;
    return s.padEnd(len, pad);
   }
   function repeat(n, s){return s.repeat(n);}
   function find_sub(opt, sub, s){
    if(opt) var sth = opt[1], start = sth; else var start = 0;
    var i = s.indexOf(sub, start);
    return -1 === i ? 0 : [0, i];
   }
   function find_last_sub(before, sub, s){
    if(before)
     var b = before[1], before$0 = b;
    else
     var before$0 = s[cst_length];
    var pos = before$0 - sub[cst_length] | 0;
    if(0 > pos) return 0;
    var i = s.lastIndexOf(sub, pos);
    return -1 === i ? 0 : [0, i];
   }
   function slice(opt, stop, s){
    if(opt) var sth = opt[1], start = sth; else var start = 0;
    if(stop)
     var stop$0 = stop[1], args = [0, start, stop$0];
    else
     var args = [0, start];
    return caml_js_meth_call(s, "slice", args);
   }
   function sub(opt, len, s){
    if(opt) var sth = opt[1], start = sth; else var start = 0;
    if(len)
     var len$0 = len[1], args = [0, start, len$0];
    else
     var args = [0, start];
    return caml_js_meth_call(s, "substr", args);
   }
   function cuts(sep, s){return caml_list_of_js_array(s.split(sep));}
   var iterator = Symbol.iterator;
   function fold_uchars(f, s, acc){
    var it = s[iterator](), acc$0 = acc;
    for(;;){
     var r = it.next();
     if(r["done"] | 0) return acc$0;
     var u = r["value"].codePointAt(0);
     a:
     {if(55296 <= u && 57343 >= u){var u$0 = 65533; break a;} var u$0 = u;}
     var acc$1 = caml_call2(f, caml_call1(Stdlib_Uchar[9], u$0), acc$0);
     acc$0 = acc$1;
    }
   }
   function fold_jstr_uchars(f, s, acc){
    function f$0(u, acc){
     return caml_call2
             (f, jstr_of_uchar_int(caml_call1(Stdlib_Uchar[10], u)), acc);
    }
    return fold_uchars(f$0, s, acc);
   }
   function trim(s){return s.trim();}
   function normalized(nf, s){
    var
     nf$0 =
       868484048 <= nf
        ? 868484049 <= nf ? "NFKD" : "NFKC"
        : 3894540 <= nf ? "NFD" : "NFC";
    return s.normalize(nf$0);
   }
   function lowercased(s){return s.toLowerCase();}
   function uppercased(s){return s.toUpperCase();}
   function is_empty(s){return 0 === s[cst_length] ? 1 : 0;}
   function starts_with(prefix, s){return s.startsWith(prefix) | 0;}
   function includes(affix, s){return s.includes(affix) | 0;}
   function ends_with(suffix, s){return s.endsWith(suffix) | 0;}
   var equal = caml_equal, compare = runtime.caml_compare;
   function of_uchar(u){
    return jstr_of_uchar_int(caml_call1(Stdlib_Uchar[10], u));
   }
   function of_char(c){return jstr_of_uchar_int(c);}
   var number = jv_global["Number"];
   function to_int(base, s){
    if(base) var b = base[1], args = [0, s, b]; else var args = [0, s];
    var n = caml_js_meth_call(number, "parseInt", args);
    return caml_equal(n, n) ? [0, n] : 0;
   }
   function to_float(s){return number.parseFloat(s);}
   function of_float(frac, n){
    if(! frac) return n.toString();
    var frac$0 = frac[1];
    return n.toFixed(frac$0);
   }
   var
    Jstr =
      [0,
       length,
       get,
       get_jstr,
       empty,
       sp,
       nl,
       append,
       append,
       concat,
       pad_start,
       pad_end,
       repeat,
       find_sub,
       find_last_sub,
       slice,
       sub,
       cuts,
       fold_uchars,
       fold_jstr_uchars,
       trim,
       normalized,
       lowercased,
       uppercased,
       is_empty,
       starts_with,
       includes,
       ends_with,
       equal,
       compare,
       of_uchar,
       of_char,
       to_int,
       jstr_of_int,
       to_float,
       of_float];
   runtime.caml_register_global(46, Jstr, "Jstr");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Jv
//# unitInfo: Requires: Jsoo_runtime, Jstr, Stdlib__Array, Stdlib__List
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Array = "Array",
    cst_name = "name",
    cst_value = "value",
    caml_js_get = runtime.caml_js_get,
    caml_js_set = runtime.caml_js_set,
    caml_js_strict_equals = runtime.caml_js_strict_equals,
    caml_js_to_bool = runtime.caml_js_to_bool,
    caml_js_wrap_callback_strict = runtime.caml_js_wrap_callback_strict,
    caml_string_compare = runtime.caml_string_compare,
    caml_string_of_jsstring = runtime.caml_string_of_jsstring;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib_Array = global_data.Stdlib__Array,
    Stdlib_List = global_data.Stdlib__List,
    Jsoo_runtime = global_data.Jsoo_runtime,
    null$0 = null,
    undefined$0 = undefined;
   function is_null(v){return v === null$0 ? 1 : 0;}
   function is_undefined(v){return v === undefined$0 ? 1 : 0;}
   function is_none(v){
    var _g_ = v === null$0 ? 1 : 0;
    return _g_ ? _g_ : v === undefined$0 ? 1 : 0;
   }
   function is_some(v){return 1 - is_none(v);}
   function to_option(conv, v){
    return is_none(v) ? 0 : [0, caml_call1(conv, v)];
   }
   function of_option(none, conv, param){
    if(! param) return none;
    var v = param[1];
    return caml_call1(conv, v);
   }
   var global = globalThis;
   function set_if_some(o, p, param){
    if(! param) return 0;
    var v = param[1];
    return o[p] = v;
   }
   function find(o, p){var v = o[p]; return is_none(v) ? 0 : [0, v];}
   function find_map(f, o, p){
    var v = o[p];
    return is_none(v) ? 0 : [0, caml_call1(f, v)];
   }
   function find_path(o, param){
    var o$0 = o, param$0 = param;
    for(;;){
     if(! param$0) return [0, o$0];
     var ps = param$0[2], p = param$0[1], match = find(o$0, p);
     if(! match) return 0;
     var o$1 = match[1];
     o$0 = o$1;
     param$0 = ps;
    }
   }
   var true$0 = true, false$0 = false;
   function find$0(o, p){var b = o[p]; return is_none(b) ? 0 : [0, b | 0];}
   function get(o, p){return o[p] | 0;}
   function set(o, p, b){return o[p] = ! ! b;}
   function set_if_some$0(o, p, param){
    if(! param) return 0;
    var b = param[1];
    return set(o, p, b);
   }
   var Bool = [0, find$0, get, set, set_if_some$0];
   function find$1(o, p){var i = o[p]; return is_none(i) ? 0 : [0, i];}
   var get$0 = caml_js_get, set$0 = caml_js_set;
   function set_if_some$1(o, p, param){
    if(! param) return 0;
    var i = param[1];
    return o[p] = i;
   }
   var Int = [0, find$1, get$0, set$0, set_if_some$1];
   function find$2(o, p){var f = o[p]; return is_none(f) ? 0 : [0, f];}
   var get$1 = caml_js_get, set$1 = caml_js_set;
   function set_if_some$2(o, p, param){
    if(! param) return 0;
    var f = param[1];
    return o[p] = f;
   }
   var Float = [0, find$2, get$1, set$1, set_if_some$2];
   function find$3(o, p){var f = o[p]; return is_none(f) ? 0 : [0, f | 0];}
   function get$2(o, p){return o[p] | 0;}
   var set$2 = caml_js_set;
   function set_if_some$3(o, p, param){
    if(! param) return 0;
    var f = param[1];
    return o[p] = f;
   }
   var Int32 = [0, find$3, get$2, set$2, set_if_some$3];
   function find$4(o, p){var s = o[p]; return is_none(s) ? 0 : [0, s];}
   var get$3 = caml_js_get, set$3 = caml_js_set;
   function set_if_some$4(o, p, param){
    if(! param) return 0;
    var f = param[1];
    return o[p] = f;
   }
   function is_array(jv){return global[cst_Array].isArray(jv) | 0;}
   function create(n){return new global[cst_Array](n);}
   function length(a){return a["length"];}
   var Jarray = [0, create, length];
   function to_array(conv, v){
    var len = caml_call1(Jarray[2], v);
    return caml_call2
            (Stdlib_Array[2],
             len,
             function(i){return caml_call1(conv, v[i]);});
   }
   function of_array(conv, a){
    var
     len = a.length - 1,
     ja = caml_call1(Jarray[1], len),
     _e_ = len - 1 | 0,
     _d_ = 0;
    if(_e_ >= 0){
     var i = _d_;
     for(;;){
      ja[i] = caml_call1(conv, runtime.caml_check_bound(a, i)[1 + i]);
      var _f_ = i + 1 | 0;
      if(_e_ === i) break;
      i = _f_;
     }
    }
    return ja;
   }
   function to_list(conv, v){
    var len = caml_call1(Jarray[2], v);
    return caml_call2
            (Stdlib_List[10],
             len,
             function(i){return caml_call1(conv, v[i]);});
   }
   function of_list(conv, l){
    var ja = caml_call1(Jarray[1], 0), i = 0, param = l;
    for(;;){
     if(! param) return ja;
     var vs = param[2], v = param[1];
     ja[i] = caml_call1(conv, v);
     var i$0 = i + 1 | 0;
     i = i$0;
     param = vs;
    }
   }
   function v(name, msg){
    var e = new global["Error"](msg);
    if(! name) return e;
    var n = name[1];
    e[cst_name] = n;
    return e;
   }
   function name(e){return e[cst_name];}
   function enum$0(e){
    var
     match = caml_string_of_jsstring(e[cst_name]),
     switch$0 = caml_string_compare(match, "NotAllowedError");
    if(0 <= switch$0){
     if(0 >= switch$0) return 971339429;
     var switch$1 = caml_string_compare(match, "SyntaxError");
     if(0 <= switch$1){
      if(0 >= switch$1) return 148000204;
      if(match === "TimeoutError") return -129520566;
      if(match === "TransactionInactiveError") return -28376747;
      if(match === "TypeMismatchError") return -823442212;
      if(match === "URLMismatchError") return 147573767;
      if(match === "UnknownError") return -1064646157;
      if(match === "VersionError") return -1025659903;
      if(match === "WrongDocumentError") return -937074026;
     }
     else{
      if(match === "NotFoundError") return 829592127;
      if(match === "NotReadableError") return -119831547;
      if(match === "NotSupportedError") return -935732949;
      if(match === "OperationError") return 115193424;
      if(match === "QuotaExceededError") return 246360739;
      if(match === "ReadOnlyError") return 842968798;
      if(match === "SecurityError") return 496062953;
     }
    }
    else{
     var switch$2 = caml_string_compare(match, "InvalidAccessError");
     if(0 <= switch$2){
      if(0 >= switch$2) return 753062229;
      if(match === "InvalidCharacterError") return 197539530;
      if(match === "InvalidModificationError") return 943132429;
      if(match === "InvalidNodeTypeError") return -94613768;
      if(match === "InvalidStateError") return 986514226;
      if(match === "NamespaceError") return 861236164;
      if(match === "NetworkError") return 943709719;
      if(match === "NoModificationAllowedError") return 320841004;
     }
     else{
      if(match === "AbortError") return 183065241;
      if(match === "ConstraintError") return 539235142;
      if(match === "DataCloneError") return 1031143793;
      if(match === "DataError") return 483354835;
      if(match === "EncodingError") return 518067260;
      if(match === "HierarchyRequestError") return 227342318;
      if(match === "IndexSizeError") return 89185783;
     }
    }
    return -912009552;
   }
   function message(e){return e["message"];}
   function stack(e){return e["stack"];}
   function throw$0(name, msg){
    var e = v(name, msg);
    return caml_call1(function(exn){throw exn;}, e);
   }
   var Error = Jsoo_runtime[3][4], symbol = Symbol.iterator;
   function iterable(o){
    var match = to_option(function(_c_){return _c_;}, o[symbol]);
    if(! match) return 0;
    var func = match[1];
    return func();
   }
   function iterator(o){return o[symbol]();}
   function next(it){return it.next();}
   function result_done(o){
    var match = to_option(caml_js_to_bool, o["done"]);
    if(! match) return 0;
    var d = match[1];
    return d;
   }
   function result_value(o){
    return to_option(function(_b_){return _b_;}, o[cst_value]);
   }
   function get_result_value(o){return o[cst_value];}
   function fold(of_jv, f, it, acc){
    var acc$0 = acc;
    for(;;){
     var r = it.next();
     if(result_done(r)) return acc$0;
     var acc$1 = caml_call2(f, caml_call1(of_jv, r[cst_value]), acc$0);
     acc$0 = acc$1;
    }
   }
   function fold_bindings(key, value, f, it, acc){
    var acc$0 = acc;
    for(;;){
     var r = it.next();
     if(result_done(r)) return acc$0;
     var
      arr = r[cst_value],
      _a_ = caml_call1(value, arr[1]),
      acc$1 = caml_call3(f, caml_call1(key, arr[0]), _a_, acc$0);
     acc$0 = acc$1;
    }
   }
   var promise = global["Promise"];
   function create$0(f){
    function g(res, rej){
     return caml_call2
             (f, function(x){return res(x);}, function(x){return rej(x);});
    }
    return new promise(caml_js_wrap_callback_strict(2, g));
   }
   function resolve(v){return promise.resolve(v);}
   function reject(v){return promise.reject(v);}
   function await$0(p, k){
    p.then(caml_js_wrap_callback_strict(1, k));
    return 0;
   }
   function bind(p, res){return p.then(caml_js_wrap_callback_strict(1, res));}
   function then(p, res, rej){
    return p.then
            (caml_js_wrap_callback_strict(1, res),
             caml_js_wrap_callback_strict(1, rej));
   }
   function all(arr){return promise.all(arr);}
   function find$5(o, p){var v = o[p]; return is_none(v) ? 0 : [0, v];}
   function find_map$0(f, o, p){
    var v = o[p];
    return is_none(v) ? 0 : [0, caml_call1(f, v)];
   }
   function obj(props){
    return runtime.caml_js_object
            (caml_call2
              (Stdlib_Array[15],
               function(param){
                var v = param[2], p = param[1];
                return [0, caml_string_of_jsstring(p), v];
               },
               props));
   }
   function call(o, m, args){
    return runtime.caml_js_meth_call(o, caml_string_of_jsstring(m), args);
   }
   function has(p, v){return is_some(v[p]);}
   function defined(v){return is_some(v);}
   var
    Id = [0],
    Jv =
      [0,
       caml_js_strict_equals,
       runtime.caml_js_typeof,
       runtime.caml_js_instanceof,
       null$0,
       undefined$0,
       is_null,
       is_undefined,
       is_none,
       is_some,
       to_option,
       of_option,
       global,
       find,
       find_map,
       find_path,
       set_if_some,
       true$0,
       false$0,
       Bool,
       Int,
       Float,
       Int32,
       [0, find$4, get$3, set$3, set_if_some$4],
       runtime.caml_jsstring_of_string,
       caml_string_of_jsstring,
       is_array,
       to_array,
       of_array,
       to_list,
       of_list,
       Jarray,
       [0, v, name, enum$0, message, stack],
       Error,
       throw$0,
       [0,
        result_done,
        result_value,
        get_result_value,
        iterable,
        iterator,
        next,
        fold,
        fold_bindings],
       [0, create$0, resolve, reject, await$0, bind, then, all],
       find$5,
       find_map$0,
       obj,
       call,
       has,
       defined,
       Id];
   runtime.caml_register_global(62, Jv, "Jv");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Fut
//# unitInfo: Requires: Assert_failure, Jstr, Jv, Stdlib__Result
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_fut = "fut",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib_Result = global_data.Stdlib__Result,
    Jv = global_data.Jv,
    Assert_failure = global_data.Assert_failure,
    _a_ = [0, "src/fut.ml", 34, 25];
   function promise(f){return f[cst_fut];}
   function create(param){
    function not_set(param){
     throw caml_maybe_attach_backtrace([0, Assert_failure, _a_], 1);
    }
    function is_set(param){
     return caml_call2(Jv[34], 0, "The future is already set");
    }
    var setter = [0, not_set];
    function set_setter(resolve, reject){setter[1] = resolve; return 0;}
    var p = caml_call1(Jv[36][1], set_setter);
    function set(v){caml_call1(setter[1], v); setter[1] = is_set; return 0;}
    return [0, {fut: p}, set];
   }
   function await$0(f, k){
    var _k_ = f[cst_fut];
    return caml_call2(Jv[36][4], _k_, k);
   }
   function return$0(v){var p = caml_call1(Jv[36][2], v); return {fut: p};}
   function bind(f, fn){
    var
     _j_ = f[cst_fut],
     p =
       caml_call2
        (Jv[36][5],
         _j_,
         function(v){var f = caml_call1(fn, v); return f[cst_fut];});
    return {fut: p};
   }
   function map(fn, f){
    return bind(f, function(v){return return$0(caml_call1(fn, v));});
   }
   function pair(f0, f1){
    var
     _h_ = f0[cst_fut],
     p =
       caml_call1
        (caml_call1(Jv[36][5], _h_),
         function(v0){
          var _i_ = f1[cst_fut];
          return caml_call1
                  (caml_call1(Jv[36][5], _i_),
                   function(v1){return caml_call1(Jv[36][2], [0, v0, v1]);});
         });
    return {fut: p};
   }
   function of_list(fs){
    var
     arr = caml_call2(Jv[30], promise, fs),
     all = caml_call1(Jv[36][7], arr);
    function to_list(l){
     var _f_ = caml_call2(Jv[29], function(_g_){return _g_;}, l);
     return caml_call1(Jv[36][2], _f_);
    }
    var p = caml_call2(Jv[36][5], all, to_list);
    return {fut: p};
   }
   function tick(ms){
    var
     p =
       caml_call1
        (Jv[36][1],
         function(res, rej){
          Jv[12]["setTimeout"]
           (runtime.caml_js_wrap_callback_strict(1, res), ms);
          return 0;
         });
    return {fut: p};
   }
   function ok(v){return return$0([0, v]);}
   function error(e){return return$0([1, e]);}
   function of_promise(ok, error, p){
    function ok$0(v){
     var _e_ = [0, caml_call1(ok, v)];
     return caml_call1(Jv[36][2], _e_);
    }
    function error$0(e){
     var _d_ = [1, caml_call1(error, e)];
     return caml_call1(Jv[36][2], _d_);
    }
    var p$0 = caml_call3(Jv[36][6], p, ok$0, error$0);
    return {fut: p$0};
   }
   function to_promise(ok, error, f){
    return caml_call1
            (Jv[36][1],
             function(res, rej){
              return await$0
                      (f,
                       function(param){
                        if(0 === param[0]){
                         var v = param[1];
                         return caml_call1(res, caml_call1(ok, v));
                        }
                        var e = param[1];
                        return caml_call1(rej, caml_call1(error, e));
                       });
             });
   }
   function of_promise$0(ok, v){
    return of_promise(ok, function(_c_){return _c_;}, v);
   }
   function to_promise$0(ok, v){
    return to_promise(ok, function(_b_){return _b_;}, v);
   }
   function let$0(f, fn){return map(fn, f);}
   var Syntax = [0, bind, pair, let$0, pair];
   function result_pair(r0, r1){
    if(0 === r0[0]){
     var v0 = r0[1];
     if(0 === r1[0]){var v1 = r1[1]; return [0, [0, v0, v1]];}
     var r = r1;
    }
    else
     var r = r0;
    return r;
   }
   function let$1(f, fn){
    return bind
            (f,
             function(e){
              if(0 !== e[0]) return return$0(e);
              var v = e[1];
              return caml_call1(fn, v);
             });
   }
   function and(f0, f1){return map(result_pair, pair(f0, f1));}
   function let$2(f, fn){return map(caml_call1(Stdlib_Result[8], fn), f);}
   var
    Fut =
      [0,
       create,
       await$0,
       return$0,
       map,
       bind,
       pair,
       of_list,
       tick,
       ok,
       error,
       of_promise$0,
       to_promise$0,
       of_promise,
       to_promise,
       Syntax,
       [0, let$1, and, let$2, and]];
   runtime.caml_register_global(9, Fut, "Fut");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Brr
//# unitInfo: Requires: Fut, Jstr, Jv, Stdlib__Array, Stdlib__Bigarray, Stdlib__List, Stdlib__Option, Stdlib__Sys
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst = " ",
    cst_Float32Array = "Float32Array",
    cst_Float64Array = "Float64Array",
    cst_Int16Array = "Int16Array",
    cst_Int32Array = "Int32Array",
    cst_Int8Array = "Int8Array",
    cst_Uint16Array = "Uint16Array",
    cst_Uint32Array = "Uint32Array",
    cst_Uint8Array = "Uint8Array",
    cst_Uint8ClampedArray = "Uint8ClampedArray",
    cst_abort = "abort",
    cst_activeElement = "activeElement",
    cst_altKey$1 = "altKey",
    cst_append = "append",
    cst_auto = "auto",
    cst_blur = "blur",
    cst_body = "body",
    cst_bubbles$1 = "bubbles",
    cst_buffer = "buffer",
    cst_button$0 = "button",
    cst_byteLength$1 = "byteLength",
    cst_cancelable$1 = "cancelable",
    cst_checked = "checked",
    cst_classList = "classList",
    cst_clear$0 = "clear",
    cst_click = "click",
    cst_close = "close",
    cst_code$0 = "code",
    cst_composed$1 = "composed",
    cst_console = "console",
    cst_copy = "copy",
    cst_ctrlKey$1 = "ctrlKey",
    cst_data$1 = "data",
    cst_dataTransfer$1 = "dataTransfer",
    cst_dblclick = "dblclick",
    cst_dir$0 = "dir",
    cst_documentElement = "documentElement",
    cst_dropEffect$1 = "dropEffect",
    cst_effectAllowed$1 = "effectAllowed",
    cst_error$0 = "error",
    cst_firstChild = "firstChild",
    cst_focus = "focus",
    cst_hash$2 = "hash",
    cst_head = "head",
    cst_height$1 = "height",
    cst_hidden = "hidden",
    cst_hostname$1 = "hostname",
    cst_id = "id",
    cst_input = "input",
    cst_isComposing$1 = "isComposing",
    cst_lastModified$1 = "lastModified",
    cst_length$4 = "length",
    cst_link = "link",
    cst_location$0 = "location",
    cst_map = "map",
    cst_mark = "mark",
    cst_measure = "measure",
    cst_metaKey$1 = "metaKey",
    cst_name$2 = "name",
    cst_nodeType$1 = "nodeType",
    cst_open = "open",
    cst_ownerDocument = "ownerDocument",
    cst_pathname$1 = "pathname",
    cst_pointerLockElement = "pointerLockElement",
    cst_port$1 = "port",
    cst_progress = "progress",
    cst_protocol$1 = "protocol",
    cst_relatedTarget$1 = "relatedTarget",
    cst_reload = "reload",
    cst_scrollRestoration$1 = "scrollRestoration",
    cst_search$2 = "search",
    cst_select = "select",
    cst_shiftKey$1 = "shiftKey",
    cst_state = "state",
    cst_style = "style",
    cst_table$0 = "table",
    cst_time$0 = "time",
    cst_timeStamp$1 = "timeStamp",
    cst_title$1 = "title",
    cst_type$4 = "type",
    cst_value = "value",
    cst_width$1 = "width",
    cst_window = "window",
    caml_js_from_bool = runtime.caml_js_from_bool,
    caml_js_get = runtime.caml_js_get,
    caml_js_meth_call = runtime.caml_js_meth_call,
    caml_js_set = runtime.caml_js_set,
    caml_js_wrap_callback_strict = runtime.caml_js_wrap_callback_strict,
    caml_list_of_js_array = runtime.caml_list_of_js_array,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) === 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Jv = global_data.Jv,
    Jstr = global_data.Jstr,
    Fut = global_data.Fut,
    Stdlib_List = global_data.Stdlib__List,
    Stdlib_Array = global_data.Stdlib__Array,
    Stdlib_Option = global_data.Stdlib__Option,
    Stdlib_Bigarray = global_data.Stdlib__Bigarray,
    Stdlib_Sys = global_data.Stdlib__Sys,
    Type = [0],
    cst_bubbles = cst_bubbles$1,
    cst_cancelable = cst_cancelable$1,
    cst_composed = cst_composed$1;
   function init(bubbles, cancelable, composed, param){
    var o = {};
    caml_call3(Jv[19][4], o, cst_bubbles, bubbles);
    caml_call3(Jv[19][4], o, cst_cancelable, cancelable);
    caml_call3(Jv[19][4], o, cst_composed, composed);
    return o;
   }
   var
    event = Jv[12]["Event"],
    cst_type = cst_type$4,
    cst_eventPhase = "eventPhase",
    cst_bubbles$0 = cst_bubbles$1,
    cst_cancelable$0 = cst_cancelable$1,
    cst_defaultPrevented = "defaultPrevented",
    cst_composed$0 = cst_composed$1,
    cst_isTrusted = "isTrusted",
    cst_timeStamp = cst_timeStamp$1,
    cst_capture = "capture",
    cst_once = "once",
    cst_passive = "passive",
    _a_ = [0, 1];
   function create(opt, t){
    if(opt) var sth = opt[1], init = sth; else var init = {};
    return new event(t, init);
   }
   function type(e){return caml_call2(Jv[23][2], e, cst_type);}
   function target(e){return e["target"];}
   function current_target(e){return e["currentTarget"];}
   function composed_path(e){
    var _db_ = e.composedPath();
    return caml_call2(Jv[29], function(_dc_){return _dc_;}, _db_);
   }
   function event_phase(e){
    var switcher = caml_call2(Jv[20][2], e, cst_eventPhase) - 1 | 0;
    if(2 < switcher >>> 0) return 870530776;
    switch(switcher){
      case 0:
       return 497141539;
      case 1:
       return -276077507;
      default: return 608305129;
    }
   }
   function bubbles(e){return caml_call2(Jv[19][2], e, cst_bubbles$0);}
   function stop_propagation(e){e.stopPropagation(); return 0;}
   function stop_immediate_propagation(e){
    e.stopImmediatePropagation();
    return 0;
   }
   function cancelable(e){return caml_call2(Jv[19][2], e, cst_cancelable$0);}
   function prevent_default(e){e.preventDefault(); return 0;}
   function default_prevented(e){
    return caml_call2(Jv[19][2], e, cst_defaultPrevented);
   }
   function composed(e){return caml_call2(Jv[19][2], e, cst_composed$0);}
   function is_trusted(e){return caml_call2(Jv[19][2], e, cst_isTrusted);}
   function timestamp_ms(e){return caml_call2(Jv[21][2], e, cst_timeStamp);}
   function dispatch(e, t){return t.dispatchEvent(e) | 0;}
   function listen_opts(capture, once, passive, param){
    var o = {};
    caml_call3(Jv[19][4], o, cst_capture, capture);
    caml_call3(Jv[19][4], o, cst_once, once);
    caml_call3(Jv[19][4], o, cst_passive, passive);
    return o;
   }
   function listen(opt, type, f, t){
    if(opt) var sth = opt[1], opts = sth; else var opts = {};
    var f$0 = caml_js_wrap_callback_strict(1, f);
    function unlisten(param){
     t.removeEventListener(type, f$0, opts);
     return 0;
    }
    t.addEventListener(type, f$0, opts);
    return unlisten;
   }
   function unlisten(unlisten){return caml_call1(unlisten, 0);}
   function next(capture, type, t){
    var
     match = caml_call1(Fut[1], 0),
     set = match[2],
     fut = match[1],
     opts = listen_opts(capture, _a_, 0, 0);
    listen([0, opts], type, set, t);
    return fut;
   }
   var
    none = "none",
    copy = cst_copy,
    copy_link = "copyLink",
    copy_move = "copyMove",
    link = cst_link,
    link_move = "linkMove",
    move = "move",
    all = "all",
    uninitialized = "uninitialized",
    Effect =
      [0,
       none,
       copy,
       copy_link,
       copy_move,
       link,
       link_move,
       move,
       all,
       uninitialized],
    file = "file",
    string = "string",
    Kind = [0, file, string],
    cst_kind = "kind",
    cst_type$0 = cst_type$4;
   function kind(i){return caml_call2(Jv[23][2], i, cst_kind);}
   function type$0(i){return caml_call2(Jv[23][2], i, cst_type$0);}
   function get_file(i){
    var _c$_ = i.getAsFile();
    return caml_call2(Jv[10], function(_da_){return _da_;}, _c$_);
   }
   function get_jstr(i){
    var
     match = caml_call1(Fut[1], 0),
     set_str = match[2],
     str = match[1],
     set_str$0 = caml_js_wrap_callback_strict(1, set_str);
    i.getAsString(set_str$0);
    return str;
   }
   var
    Item = [0, Kind, kind, type$0, get_file, get_jstr],
    cst_length = cst_length$4,
    cst_dropEffect = cst_dropEffect$1,
    cst_dropEffect$0 = cst_dropEffect$1,
    cst_effectAllowed = cst_effectAllowed$1,
    cst_effectAllowed$0 = cst_effectAllowed$1,
    cst_clipboardData = "clipboardData";
   function length(l){return caml_call2(Jv[20][2], l, cst_length);}
   function add_jstr(l, type, str){
    var _c9_ = l.add(str, type);
    return caml_call1(caml_call1(Jv[10], function(_c__){return _c__;}), _c9_);
   }
   function add_file(t, file){
    var _c7_ = t.add(file);
    return caml_call1(caml_call1(Jv[10], function(_c8_){return _c8_;}), _c7_);
   }
   function remove(l, i){l.remove(i); return 0;}
   function clear(l){l.clear(); return 0;}
   function items(l){
    var acc = [0, 0], _c4_ = length(l) - 1 | 0;
    if(_c4_ >= 0){
     var i = _c4_;
     for(;;){
      var _c5_ = acc[1];
      acc[1] = [0, l[i], _c5_];
      var _c6_ = i - 1 | 0;
      if(0 === i) break;
      i = _c6_;
     }
    }
    return acc[1];
   }
   function drop_effect(d){return caml_call2(Jv[23][2], d, cst_dropEffect);}
   function set_drop_effect(d, e){
    return caml_call3(Jv[23][3], d, cst_dropEffect$0, e);
   }
   function effect_allowed(d){
    return caml_call2(Jv[23][2], d, cst_effectAllowed);
   }
   function set_effect_allowed(d, e){
    return caml_call3(Jv[23][3], d, cst_effectAllowed$0, e);
   }
   function items$0(d){return d["items"];}
   function data(c){
    return caml_call3
            (Jv[14], function(_c3_){return _c3_;}, c, cst_clipboardData);
   }
   var Clipboard = [0, data], cst_data = cst_data$1;
   function data$0(i){return caml_call2(Jv[23][2], i, cst_data);}
   var
    Composition = [0, data$0],
    cst_message = "message",
    cst_filename = "filename",
    cst_lineno = "lineno",
    cst_colno = "colno";
   function message(e){return caml_call2(Jv[23][2], e, cst_message);}
   function filename(e){return caml_call2(Jv[23][2], e, cst_filename);}
   function lineno(e){return caml_call2(Jv[20][2], e, cst_lineno);}
   function colno(e){return caml_call2(Jv[20][2], e, cst_colno);}
   function error(e){return e[cst_error$0];}
   var Error = [0, message, filename, lineno, colno, error];
   function wait_until(e, fut){
    e.waitUntil(caml_call2(Fut[12], function(_c2_){return _c2_;}, fut));
    return 0;
   }
   var Extendable = [0, wait_until], cst_relatedTarget = cst_relatedTarget$1;
   function related_target(m){
    return caml_call3
            (Jv[14], function(_c1_){return _c1_;}, m, cst_relatedTarget);
   }
   var
    Focus = [0, related_target],
    cst_oldURL = "oldURL",
    cst_newURL = "newURL";
   function old_url(e){return caml_call2(Jv[23][2], e, cst_oldURL);}
   function new_url(e){return caml_call2(Jv[23][2], e, cst_newURL);}
   var
    Hash_change = [0, old_url, new_url],
    cst_data$0 = cst_data$1,
    cst_dataTransfer = cst_dataTransfer$1,
    cst_inputType = "inputType",
    cst_isComposing = cst_isComposing$1;
   function data$1(i){return caml_call2(Jv[23][2], i, cst_data$0);}
   function data_transfer(i){return caml_call2(Jv[13], i, cst_dataTransfer);}
   function input_type(i){return caml_call2(Jv[23][2], i, cst_inputType);}
   function is_composing(i){return caml_call2(Jv[19][2], i, cst_isComposing);}
   var
    Input = [0, data$1, data_transfer, input_type, is_composing],
    Location = [0, 0, 1, 2, 3],
    cst_key = "key",
    cst_code = cst_code$0,
    cst_location = cst_location$0,
    cst_repeat = "repeat",
    cst_isComposing$0 = cst_isComposing$1,
    cst_altKey = cst_altKey$1,
    cst_ctrlKey = cst_ctrlKey$1,
    cst_shiftKey = cst_shiftKey$1,
    cst_metaKey = cst_metaKey$1;
   function key(k){return caml_call2(Jv[23][2], k, cst_key);}
   function code(k){return caml_call2(Jv[23][2], k, cst_code);}
   function location(k){return caml_call2(Jv[20][2], k, cst_location);}
   function repeat(k){return caml_call2(Jv[19][2], k, cst_repeat);}
   function is_composing$0(k){
    return caml_call2(Jv[19][2], k, cst_isComposing$0);
   }
   function alt_key(k){return caml_call2(Jv[19][2], k, cst_altKey);}
   function ctrl_key(k){return caml_call2(Jv[19][2], k, cst_ctrlKey);}
   function shift_key(k){return caml_call2(Jv[19][2], k, cst_shiftKey);}
   function meta_key(k){return caml_call2(Jv[19][2], k, cst_metaKey);}
   function get_modifier_state(k, key){return k.getModifierState(key) | 0;}
   var
    Keyboard =
      [0,
       Location,
       key,
       code,
       location,
       repeat,
       is_composing$0,
       alt_key,
       ctrl_key,
       shift_key,
       meta_key,
       get_modifier_state],
    cst_relatedTarget$0 = cst_relatedTarget$1,
    cst_offsetX = "offsetX",
    cst_offsetY = "offsetY",
    cst_clientX = "clientX",
    cst_clientY = "clientY",
    cst_pageX = "pageX",
    cst_pageY = "pageY",
    cst_screenX = "screenX",
    cst_screenY = "screenY",
    cst_movementX = "movementX",
    cst_movementY = "movementY",
    cst_button = cst_button$0,
    cst_buttons = "buttons",
    cst_altKey$0 = cst_altKey$1,
    cst_ctrlKey$0 = cst_ctrlKey$1,
    cst_shiftKey$0 = cst_shiftKey$1,
    cst_metaKey$0 = cst_metaKey$1;
   function related_target$0(m){
    return caml_call3
            (Jv[14], function(_c0_){return _c0_;}, m, cst_relatedTarget$0);
   }
   function offset_x(m){return caml_call2(Jv[21][2], m, cst_offsetX);}
   function offset_y(m){return caml_call2(Jv[21][2], m, cst_offsetY);}
   function client_x(m){return caml_call2(Jv[21][2], m, cst_clientX);}
   function client_y(m){return caml_call2(Jv[21][2], m, cst_clientY);}
   function page_x(m){return caml_call2(Jv[21][2], m, cst_pageX);}
   function page_y(m){return caml_call2(Jv[21][2], m, cst_pageY);}
   function screen_x(m){return caml_call2(Jv[21][2], m, cst_screenX);}
   function screen_y(m){return caml_call2(Jv[21][2], m, cst_screenY);}
   function movement_x(m){return caml_call2(Jv[21][2], m, cst_movementX);}
   function movement_y(m){return caml_call2(Jv[21][2], m, cst_movementY);}
   function button(m){return caml_call2(Jv[20][2], m, cst_button);}
   function buttons(m){return caml_call2(Jv[20][2], m, cst_buttons);}
   function alt_key$0(m){return caml_call2(Jv[19][2], m, cst_altKey$0);}
   function ctrl_key$0(m){return caml_call2(Jv[19][2], m, cst_ctrlKey$0);}
   function shift_key$0(m){return caml_call2(Jv[19][2], m, cst_shiftKey$0);}
   function meta_key$0(m){return caml_call2(Jv[19][2], m, cst_metaKey$0);}
   function get_modifier_state$0(m, key){return m.getModifierState(key) | 0;}
   var
    Mouse =
      [0,
       related_target$0,
       offset_x,
       offset_y,
       client_x,
       client_y,
       page_x,
       page_y,
       screen_x,
       screen_y,
       movement_x,
       movement_y,
       button,
       buttons,
       alt_key$0,
       ctrl_key$0,
       shift_key$0,
       meta_key$0,
       get_modifier_state$0],
    cst_dataTransfer$0 = cst_dataTransfer$1;
   function data_transfer$0(d){
    return caml_call3
            (Jv[14], function(_cZ_){return _cZ_;}, d, cst_dataTransfer$0);
   }
   var
    Drag = [0, data_transfer$0],
    cst_pointerId = "pointerId",
    cst_width = cst_width$1,
    cst_height = cst_height$1,
    cst_pressure = "pressure",
    cst_tangentialPressure = "tangentialPressure",
    cst_tiltX = "tiltX",
    cst_tiltY = "tiltY",
    cst_twist = "twist",
    cst_altitudeAngle = "altitudeAngle",
    cst_azimuthAngle = "azimuthAngle",
    cst_pointerType = "pointerType",
    cst_isPrimary = "isPrimary";
   function id(p){return caml_call2(Jv[20][2], p, cst_pointerId);}
   function width(p){return caml_call2(Jv[21][2], p, cst_width);}
   function height(p){return caml_call2(Jv[21][2], p, cst_height);}
   function pressure(p){return caml_call2(Jv[21][2], p, cst_pressure);}
   function tangential_pressure(p){
    return caml_call2(Jv[21][2], p, cst_tangentialPressure);
   }
   function tilt_x(p){return caml_call2(Jv[20][2], p, cst_tiltX);}
   function tilt_y(p){return caml_call2(Jv[20][2], p, cst_tiltY);}
   function twist(p){return caml_call2(Jv[20][2], p, cst_twist);}
   function altitude_angle(p){
    return caml_call2(Jv[21][2], p, cst_altitudeAngle);
   }
   function azimuth_angle(p){
    return caml_call2(Jv[21][2], p, cst_azimuthAngle);
   }
   function type$1(p){return caml_call2(Jv[23][2], p, cst_pointerType);}
   function is_primary(p){return caml_call2(Jv[19][2], p, cst_isPrimary);}
   function get_coalesced_events(p){
    var _cX_ = p.getCoalescedEvents();
    return caml_call2(Jv[29], function(_cY_){return _cY_;}, _cX_);
   }
   function get_predicted_events(p){
    var _cV_ = p.getPredictedEvents();
    return caml_call2(Jv[29], function(_cW_){return _cW_;}, _cV_);
   }
   var
    Pointer =
      [0,
       id,
       width,
       height,
       pressure,
       tangential_pressure,
       tilt_x,
       tilt_y,
       twist,
       altitude_angle,
       azimuth_angle,
       type$1,
       is_primary,
       get_coalesced_events,
       get_predicted_events],
    Delta_mode = [0, 0, 1, 2],
    cst_deltaX = "deltaX",
    cst_deltaY = "deltaY",
    cst_deltaZ = "deltaZ",
    cst_deltaMode = "deltaMode";
   function delta_x(w){return caml_call2(Jv[21][2], w, cst_deltaX);}
   function delta_y(w){return caml_call2(Jv[21][2], w, cst_deltaY);}
   function delta_z(w){return caml_call2(Jv[21][2], w, cst_deltaZ);}
   function delta_mode(w){return caml_call2(Jv[20][2], w, cst_deltaMode);}
   var
    Wheel = [0, Delta_mode, delta_x, delta_y, delta_z, delta_mode],
    abort = cst_abort,
    activate = "activate",
    auxclick = cst_dblclick,
    beforeinput = "beforeinput",
    beforeunload = "beforeunload",
    blur = cst_blur,
    canplay = "canplay",
    canplaythrough = "canplaythrough",
    change = "change",
    click = cst_click,
    clipboardchange = "clipboardchange",
    close = cst_close,
    compositionend = "compositionend",
    compositionstart = "compositionstart",
    compositionudpate = "compositionupdate",
    controllerchange = "controllerchange",
    copy$0 = cst_copy,
    cut = "cut",
    dblclick = cst_dblclick,
    dom_content_loaded = "DOMContentLoaded",
    drag = "drag",
    dragend = "dragend",
    dragenter = "dragenter",
    dragexit = "dragexit",
    dragleave = "dragleave",
    dragover = "dragover",
    dragstart = "dragstart",
    drop = "drop",
    durationchange = "durationchange",
    emptied = "emptied",
    ended = "ended",
    error$0 = cst_error$0,
    focus = cst_focus,
    focusin = "focusin",
    focusout = "focusout",
    fullscreenchange = "fullscreenchange",
    fullscreenerror = "fullscreenerror",
    gotpointercapture = "gotpointercapture",
    hashchange = "hashchange",
    input = cst_input,
    install = "install",
    keydown = "keydown",
    keyup = "keyup",
    languagechange = "languagechange",
    load = "load",
    loadeddata = "loadeddata",
    loadedmetadata = "loadedmetadata",
    loadstart = "loadstart",
    lostpointercapture = "lostpointercapture",
    mousedown = "mousedown",
    mouseenter = "mouseenter",
    mouseleave = "mouseleave",
    mousemove = "mousemove",
    mouseout = "mouseout",
    mouseover = "mouseover",
    mouseup = "mouseup",
    open = cst_open,
    paste = "paste",
    pause = "pause",
    play = "play",
    playing = "playing",
    pointercancel = "pointercancel",
    pointerdown = "pointerdown",
    pointerenter = "pointerenter",
    pointerleave = "pointerleave",
    pointerlockchange = "pointerlockchange",
    pointerlockerror = "pointerlockerror",
    pointermove = "pointermove",
    pointerout = "pointerout",
    pointerover = "pointerover",
    pointerrawupdate = "pointerrawupdate",
    pointerup = "pointerup",
    progress = cst_progress,
    ratechange = "ratechange",
    reset = "reset",
    resize = "resize",
    scroll = "scroll",
    seeked = "seeked",
    seeking = "seeking",
    select = cst_select,
    stalled = "stalled",
    statechange = "statechange",
    suspend = "suspend",
    timeupdate = "timeupdate",
    unload = "unload",
    updatefound = "updatefound",
    visibilitychange = "visibilitychange",
    volumechange = "volumechange",
    waiting = "waiting",
    wheel = "wheel",
    array_buffer = Jv[12]["ArrayBuffer"],
    cst_byteLength = cst_byteLength$1,
    cst_byteOffset = "byteOffset",
    cst_byteLength$0 = cst_byteLength$1;
   function create$0(n){return new array_buffer(n);}
   function byte_length(a){return caml_call2(Jv[20][2], a, cst_byteLength);}
   function slice(opt, stop, a){
    if(opt) var sth = opt[1], start = sth; else var start = 0;
    if(stop)
     var stop$0 = stop[1], stop$1 = stop$0;
    else
     var stop$1 = byte_length(a);
    return a.slice(start, stop$1);
   }
   function buffer(o){return o[cst_buffer];}
   function byte_offset(o){return caml_call2(Jv[20][2], o, cst_byteOffset);}
   function byte_length$0(o){
    return caml_call2(Jv[20][2], o, cst_byteLength$0);
   }
   var
    dataview = Jv[12]["DataView"],
    cst_length$0 = cst_length$4,
    cst_name = cst_name$2;
   function of_buffer(opt, byte_length$0, b){
    if(opt) var sth = opt[1], byte_offset = sth; else var byte_offset = 0;
    if(byte_length$0)
     var l = byte_length$0[1], byte_length$1 = l;
    else
     var byte_length$1 = byte_length(b);
    return new dataview(b, byte_offset, byte_length$1);
   }
   function get_int8(b, i){return b.getInt8(i);}
   function get_int16_be(b, i){return b.getInt16(i);}
   function get_int16_le(b, i){return b.getInt16(i, Jv[17]);}
   function get_int32_be(b, i){return b.getInt32(i) | 0;}
   function get_int32_le(b, i){return b.getInt32(i, Jv[17]) | 0;}
   function get_uint8(b, i){return b.getUint8(i);}
   function get_uint16_be(b, i){return b.getUint16(i);}
   function get_uint16_le(b, i){return b.getUint16(i, Jv[17]);}
   function get_uint32_be(b, i){return b.getUint32(i) | 0;}
   function get_uint32_le(b, i){return b.getUint32(i, Jv[17]) | 0;}
   function get_float32_be(b, i){return b.getFloat32(i);}
   function get_float32_le(b, i){return b.getFloat32(i, Jv[17]);}
   function get_float64_be(b, i){return b.getFloat64(i);}
   function get_float64_le(b, i){return b.getFloat64(i, Jv[17]);}
   function set_int8(b, i, v){b.setInt8(i, v); return 0;}
   function set_int16_be(b, i, v){b.setInt16(i, v); return 0;}
   function set_int16_le(b, i, v){b.setInt16(i, v, Jv[17]); return 0;}
   function set_int32_be(b, i, v){b.setInt32(i, v); return 0;}
   function set_int32_le(b, i, v){b.setInt32(i, v, Jv[17]); return 0;}
   function set_uint8(b, i, v){b.setUint8(i, v); return 0;}
   function set_uint16_be(b, i, v){b.setUint16(i, v); return 0;}
   function set_uint16_le(b, i, v){b.setUint16(i, v, Jv[17]); return 0;}
   function set_uint32_be(b, i, v){b.setUint32(i, v); return 0;}
   function set_uint32_le(b, i, v){b.setUint32(i, v, Jv[17]); return 0;}
   function set_float32_be(b, i, v){b.setFloat32(i, v); return 0;}
   function set_float32_le(b, i, v){b.setFloat32(i, v, Jv[17]); return 0;}
   function set_float64_be(b, i, v){b.setFloat64(i, v); return 0;}
   function set_float64_le(b, i, v){b.setFloat64(i, v, Jv[17]); return 0;}
   function type_size_in_bytes(param){
    switch(param){
      case 8:
       return 8;
      case 1:
      case 5:
       return 2;
      case 0:
      case 3:
      case 4:
       return 1;
      default: return 4;
    }
   }
   function cons_of_type(param){
    switch(param){
      case 0:
       return Jv[12][cst_Int8Array];
      case 1:
       return Jv[12][cst_Int16Array];
      case 2:
       return Jv[12][cst_Int32Array];
      case 3:
       return Jv[12][cst_Uint8Array];
      case 4:
       return Jv[12][cst_Uint8ClampedArray];
      case 5:
       return Jv[12][cst_Uint16Array];
      case 6:
       return Jv[12][cst_Uint32Array];
      case 7:
       return Jv[12][cst_Float32Array];
      default: return Jv[12][cst_Float64Array];
    }
   }
   function create$1(t, n){return new (cons_of_type(t))(n);}
   function of_buffer$0(t, opt, length, b){
    if(opt) var sth = opt[1], byte_offset = sth; else var byte_offset = 0;
    if(length)
     var l = length[1], args = [0, b, byte_offset, l];
    else
     var args = [0, b, byte_offset];
    return runtime.caml_js_new(cons_of_type(t), args);
   }
   function length$0(a){return caml_call2(Jv[20][2], a, cst_length$0);}
   function type$2(a){
    var
     _cT_ = a["constructor"],
     s =
       runtime.caml_string_of_jsstring(caml_call2(Jv[23][2], _cT_, cst_name));
    if(s === cst_Float32Array) return 7;
    if(s === cst_Float64Array) return 8;
    if(s === cst_Int16Array) return 1;
    if(s === cst_Int32Array) return 2;
    if(s === cst_Int8Array) return 0;
    if(s === cst_Uint16Array) return 5;
    if(s === cst_Uint32Array) return 6;
    if(s === cst_Uint8Array) return 3;
    if(s === cst_Uint8ClampedArray) return 4;
    var
     t = runtime.caml_jsstring_of_string(s),
     _cU_ = caml_call2(Jstr[7], "Unknown typed array: ", t);
    return caml_call2(Jv[34], 0, _cU_);
   }
   function elt_to_jv(a){
    switch(type$2(a)){
      case 0:
       return function(_cS_){return _cS_;};
      case 1:
       return function(_cR_){return _cR_;};
      case 2:
       return function(_cQ_){return _cQ_;};
      case 3:
       return function(_cP_){return _cP_;};
      case 4:
       return function(_cO_){return _cO_;};
      case 5:
       return function(_cN_){return _cN_;};
      case 6:
       return function(_cM_){return _cM_;};
      case 7:
       return function(_cL_){return _cL_;};
      default: return function(_cK_){return _cK_;};
    }
   }
   function elt_of_jv(a){
    switch(type$2(a)){
      case 0:
       return function(_cJ_){return _cJ_;};
      case 1:
       return function(_cI_){return _cI_;};
      case 2:
       return function(_cH_){return _cH_ | 0;};
      case 3:
       return function(_cG_){return _cG_;};
      case 4:
       return function(_cF_){return _cF_;};
      case 5:
       return function(_cE_){return _cE_;};
      case 6:
       return function(_cD_){return _cD_ | 0;};
      case 7:
       return function(_cC_){return _cC_;};
      default: return function(_cB_){return _cB_;};
    }
   }
   var _b_ = Stdlib_Sys[5];
   a:
   {
    var
     cst_timeOrigin = "timeOrigin",
     cst_redirectCount = "redirectCount",
     cst_type$3 = "type'",
     cst_loadEventEnd = "loadEventEnd",
     cst_loadEventStart = "loadEventStart",
     cst_domComplete = "domComplete",
     cst_domContentLoadedEventEnd = "domContentLoadedEventEnd",
     cst_domContentLoadedEventStart = "domContentLoadedEventStart",
     cst_domInteractive = "domInteractive",
     cst_unloadEventEnd = "unloadEventEnd",
     cst_unloadEventStart = "unloadEventStart",
     cst_decodedBodySize = "decodedBodySize",
     cst_encodedBodySize = "encodedBodySize",
     cst_transferSize = "transferSize",
     cst_responseEnd = "responseEnd",
     cst_responseStart = "responseStart",
     cst_requestStart = "requestStart",
     cst_secureConnectionStart = "secureConnectionStart",
     cst_connectEnd = "connectEnd",
     cst_connectStart = "connectStart",
     cst_domainLookupEnd = "domainLookupEnd",
     cst_domainLookupStart = "domainLookupStart",
     cst_fetchStart = "fetchStart",
     cst_redirectEnd = "redirectEnd",
     cst_redirectStart = "redirectStart",
     cst_workerStart = "workerStart",
     cst_nextHopProtocol = "nextHopProtocol",
     cst_initiatorType = "initiatorType",
     cst_duration = "duration",
     cst_endTime = "endTime",
     cst_startTime = "startTime",
     cst_entryType = "entryType",
     cst_name$1 = cst_name$2,
     cst_onLine = "onLine",
     cst_languages = "languages",
     cst_language = "language",
     cst_scrollRestoration$0 = cst_scrollRestoration$1,
     cst_scrollRestoration = cst_scrollRestoration$1,
     cst_length$3 = cst_length$4,
     cst_matches = "matches",
     cst_devicePixelRatio = "devicePixelRatio",
     cst_scrollY = "scrollY",
     cst_scrollX = "scrollX",
     cst_closed = "closed",
     cst_timeStamp$0 = cst_timeStamp$1,
     cst_profileEnd = "profileEnd",
     cst_profile = "profile",
     cst_timeEnd = "timeEnd",
     cst_timeLog = "timeLog",
     cst_time = cst_time$0,
     cst_countReset = "countReset",
     cst_count = "count",
     cst_groupCollapsed = "groupCollapsed",
     cst_group = "group",
     cst_groupEnd = "groupEnd",
     cst_table = cst_table$0,
     cst_dir = cst_dir$0,
     cst_assert = "assert",
     cst_debug = "debug",
     cst_info = "info",
     cst_warn = "warn",
     cst_error = cst_error$0,
     cst_trace = "trace",
     cst_log = "log",
     cst_clear = cst_clear$0,
     cst_aborted = "aborted",
     cst_fullscreenEnabled = "fullscreenEnabled",
     cst_visibilityState = "visibilityState",
     cst_title$0 = cst_title$1,
     cst_title = cst_title$1,
     cst_referrer = "referrer",
     cst_files = "files",
     cst_navigationUI = "navigationUI",
     _q_ = [0, 0],
     _p_ = [0, 1],
     cst_scrollHeight = "scrollHeight",
     cst_scrollWidth = "scrollWidth",
     cst_scrollTop = "scrollTop",
     cst_scrollLeft = "scrollLeft",
     cst_height$0 = cst_height$1,
     cst_width$0 = cst_width$1,
     cst_y = "y",
     cst_x = "x",
     cst_clientHeight = "clientHeight",
     cst_clientWidth = "clientWidth",
     cst_clientTop = "clientTop",
     cst_clientLeft = "clientLeft",
     cst_nextElementSibling = "nextElementSibling",
     cst_previousElementSibling = "previousElementSibling",
     cst_parentNode = "parentNode",
     cst_length$2 = cst_length$4,
     cst_nodeValue = "nodeValue",
     cst_nodeName = "nodeName",
     cst_nodeType$0 = cst_nodeType$1,
     cst_nodeType = cst_nodeType$1,
     cst_length$1 = cst_length$4,
     cst_hash$1 = cst_hash$2,
     cst_search$1 = cst_search$2,
     _n_ = [0, 1],
     cst_hash$0 = cst_hash$2,
     _m_ = [0, 1],
     cst_search$0 = cst_search$2,
     _l_ = [0, 1],
     cst_pathname$0 = cst_pathname$1,
     cst_port$0 = cst_port$1,
     cst_hostname$0 = cst_hostname$1,
     cst_protocol$0 = cst_protocol$1,
     _k_ = [0, -1],
     cst_protocol = cst_protocol$1,
     cst_hostname = cst_hostname$1,
     cst_port = cst_port$1,
     cst_pathname = cst_pathname$1,
     cst_search = cst_search$2,
     cst_hash = cst_hash$2,
     cst_lastModified$0 = cst_lastModified$1,
     cst_webkitRelativePath = "webkitRelativePath",
     cst_name$0 = cst_name$2,
     cst_lastModified = cst_lastModified$1,
     cst_lengthComputable = "lengthComputable",
     cst_loaded = "loaded",
     cst_total = "total",
     _j_ = [0, 1],
     cst_type$2 = cst_type$4,
     cst_size = "size",
     cst_type$1 = cst_type$4,
     cst_endings = "endings",
     _c_ = [0, 7],
     _d_ = [0, 8],
     _e_ = [0, 0],
     _f_ = [0, 3],
     _g_ = [0, 1],
     _h_ = [0, 5],
     _i_ = [0, 2],
     cst_utf_8 = "utf-8",
     cst_isSecureContext = "isSecureContext";
    if(typeof _b_ !== "number" && _b_[1] === "wasm_of_ocaml"){var compiled_to_wasm = 1; break a;}
    var compiled_to_wasm = 0;
   }
   var
    get =
      compiled_to_wasm
       ? function(a, i){var _cA_ = a[i]; return elt_of_jv(a)(_cA_);}
       : caml_js_get,
    set =
      compiled_to_wasm
       ? function(a, i, v){return a[i] = elt_to_jv(a)(v);}
       : caml_js_set;
   function set_tarray(a, dst, b){a.set(b, dst); return 0;}
   function fill(opt, stop, v, a){
    if(opt) var sth = opt[1], start = sth; else var start = 0;
    if(stop)
     var stop$0 = stop[1], stop$1 = stop$0;
    else
     var stop$1 = length$0(a);
    a.fill(elt_to_jv(a)(v), start, stop$1);
    return 0;
   }
   function copy_within(opt, stop, dst, a){
    if(opt) var sth = opt[1], start = sth; else var start = 0;
    if(stop)
     var stop$0 = stop[1], stop$1 = stop$0;
    else
     var stop$1 = length$0(a);
    a.copyWithin(dst, start, stop$1);
    return 0;
   }
   function slice$0(opt, stop, a){
    if(opt) var sth = opt[1], start = sth; else var start = 0;
    if(stop)
     var stop$0 = stop[1], stop$1 = stop$0;
    else
     var stop$1 = byte_length$0(a);
    return a.slice(start, stop$1);
   }
   function sub(opt, stop, a){
    if(opt) var sth = opt[1], start = sth; else var start = 0;
    if(stop)
     var stop$0 = stop[1], stop$1 = stop$0;
    else
     var stop$1 = byte_length$0(a);
    return a.subArray(start, stop$1);
   }
   function find(sat, a){
    var of_jv = elt_of_jv(a);
    function sat$0(v, i){return ! ! caml_call2(sat, i, of_jv(v));}
    var _cz_ = a.find(caml_js_wrap_callback_strict(2, sat$0));
    return caml_call2(Jv[10], of_jv, _cz_);
   }
   function find_index(sat, a){
    var of_jv = elt_of_jv(a);
    function sat$0(v, i){return ! ! caml_call2(sat, i, of_jv(v));}
    var i = a.findIndex(caml_js_wrap_callback_strict(2, sat$0));
    return -1 === i ? 0 : [0, i];
   }
   function for_all(sat, a){
    var of_jv = elt_of_jv(a);
    function sat$0(v, i){return ! ! caml_call2(sat, i, of_jv(v));}
    return a.every(caml_js_wrap_callback_strict(2, sat$0)) | 0;
   }
   function exists(sat, a){
    var of_jv = elt_of_jv(a);
    function sat$0(v, i){return ! ! caml_call2(sat, i, of_jv(v));}
    return a.every(caml_js_wrap_callback_strict(2, sat$0)) | 0;
   }
   function filter(sat, a){
    var of_jv = elt_of_jv(a);
    function sat$0(v, i){return ! ! caml_call2(sat, i, of_jv(v));}
    return a.filter(caml_js_wrap_callback_strict(2, sat$0));
   }
   function iter(f, a){
    var of_jv = elt_of_jv(a);
    function f$0(v, i){return caml_call2(f, i, of_jv(v));}
    a.forEach(caml_js_wrap_callback_strict(2, f$0));
    return 0;
   }
   function map(f, a){
    var of_jv = elt_of_jv(a);
    function f$0(v){return caml_call1(f, of_jv(v));}
    return a.map(caml_js_wrap_callback_strict(1, f$0));
   }
   function fold_left(f, acc, a){
    var of_jv = elt_of_jv(a);
    function f$0(acc, v){return caml_call2(f, acc, of_jv(v));}
    return a.reduce(caml_js_wrap_callback_strict(2, f$0), acc);
   }
   function fold_right(f, a, acc){
    var of_jv = elt_of_jv(a);
    function f$0(acc, v){return caml_call2(f, of_jv(v), acc);}
    return a.reduceRight(caml_js_wrap_callback_strict(2, f$0), acc);
   }
   function reverse(a){return a.reverse();}
   function of_tarray(t, a){return new (cons_of_type(t))(a);}
   function of_int_array(t, a){
    var _cx_ = caml_call2(Jv[28], function(_cy_){return _cy_;}, a);
    return new (cons_of_type(t))(_cx_);
   }
   function of_float_array(t, a){
    var _cv_ = caml_call2(Jv[28], function(_cw_){return _cw_;}, a);
    return new (cons_of_type(t))(_cv_);
   }
   function to_int_jstr(opt, b){
    if(opt) var sth = opt[1], sep = sth; else var sep = Jstr[5];
    return b.join(sep);
   }
   function to_hex_jstr(opt, a){
    if(opt) var sth = opt[1], sep = sth; else var sep = Jstr[4];
    var
     hex = "0123456789abcdef",
     d = of_buffer(0, 0, a[cst_buffer]),
     s = [0, Jstr[4]],
     _cp_ = byte_length$0(d) - 1 | 0,
     _co_ = 0;
    if(_cp_ >= 0){
     var i = _co_;
     for(;;){
      var
       b = d.getUint8(i),
       sep$0 = 0 === i ? Jstr[4] : sep,
       _cq_ = caml_call2(Jstr[3], hex, b & 15),
       _cr_ = caml_call2(Jstr[3], hex, b >>> 4 | 0),
       _cs_ = caml_call2(Jstr[8], s[1], sep$0),
       _ct_ = caml_call2(Jstr[8], _cs_, _cr_);
      s[1] = caml_call2(Jstr[8], _ct_, _cq_);
      var _cu_ = i + 1 | 0;
      if(_cp_ === i) break;
      i = _cu_;
     }
    }
    return s[1];
   }
   function uint8_of_buffer(b){return of_buffer$0(3, 0, 0, b);}
   function of_jstr(s){
    var enc = new Jv[12]["TextEncoder"];
    return enc.encode(s);
   }
   function to_jstr(a){
    var
     _cm_ = {fatal: Jv[17]},
     _cn_ = caml_call1(Jv[24], cst_utf_8),
     dec = new Jv[12]["TextDecoder"](_cn_, _cm_);
    try{var s = dec.decode(a);}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn[1] !== Jv[33]) throw caml_maybe_attach_backtrace(exn, 0);
     var e = exn[2];
     return [1, e];
    }
    return [0, s];
   }
   function of_binary_jstr(s){
    try{
     var
      n = caml_call1(Jstr[1], s),
      b = new array_buffer(n),
      d = of_buffer(0, 0, b),
      _ci_ = caml_call1(Jstr[1], s) - 1 | 0,
      _ch_ = 0;
     if(_ci_ >= 0){
      var i = _ch_;
      for(;;){
       var c = s.charCodeAt(i);
       if(255 < c)
        var
         _cc_ = caml_call2(Jstr[33], 0, c),
         _cd_ = caml_call2(Jstr[33], 0, i),
         _ce_ = caml_call2(Jstr[8], _cd_, ": char code "),
         _cf_ = caml_call2(Jstr[8], _ce_, _cc_),
         _cg_ = caml_call2(Jstr[8], _cf_, "exceeds 255"),
         _ck_ = caml_call2(Jv[34], 0, _cg_);
       else
        var _ck_ = c;
       set_int8(d, i, _ck_);
       var _cl_ = i + 1 | 0;
       if(_ci_ === i) break;
       i = _cl_;
      }
     }
     var _cj_ = [0, of_buffer$0(0, 0, 0, b)];
     return _cj_;
    }
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn[1] !== Jv[33]) throw caml_maybe_attach_backtrace(exn, 0);
     var e = exn[2];
     return [1, e];
    }
   }
   function to_binary_jstr(a){
    var
     d = of_buffer(0, 0, a[cst_buffer]),
     s = [0, Jstr[4]],
     _ca_ = byte_length$0(d) - 1 | 0,
     _b$_ = 0;
    if(_ca_ >= 0){
     var i = _b$_;
     for(;;){
      var b = d.getUint8(i), _b__ = Jv[12]["String"].fromCharCode(b);
      s[1] = caml_call2(Jstr[8], s[1], _b__);
      var _cb_ = i + 1 | 0;
      if(_ca_ === i) break;
      i = _cb_;
     }
    }
    return s[1];
   }
   function type_to_bigarray_kind(param){
    switch(param){
      case 0:
       return Stdlib_Bigarray[5];
      case 1:
       return Stdlib_Bigarray[7];
      case 2:
       return Stdlib_Bigarray[10];
      case 3:
       return Stdlib_Bigarray[6];
      case 4:
       return Stdlib_Bigarray[6];
      case 5:
       return Stdlib_Bigarray[8];
      case 6:
       return Stdlib_Bigarray[10];
      case 7:
       return Stdlib_Bigarray[1];
      default: return Stdlib_Bigarray[2];
    }
   }
   function type_of_bigarray_kind(param){
    switch(param){
      case 0:
       return _c_;
      case 1:
       return _d_;
      case 2:
       return _e_;
      case 3:
       return _f_;
      case 4:
       return _g_;
      case 5:
       return _h_;
      case 6:
       return _i_;
      default: return 0;
    }
   }
   var
    transparent = "transparent",
    native$0 = "native",
    Ending_type = [0, transparent, native$0];
   function init$0(type, endings, param){
    var o = {};
    caml_call3(Jv[23][4], o, cst_type$1, type);
    caml_call3(Jv[23][4], o, cst_endings, endings);
    return o;
   }
   var blob = Jv[12]["Blob"];
   function of_jstr$0(opt, s){
    if(opt) var sth = opt[1], init = sth; else var init = Jv[5];
    var a = caml_call1(Jv[31][1], 1);
    a[0] = s;
    return new blob(a, init);
   }
   function of_array_buffer(opt, b){
    if(opt) var sth = opt[1], init = sth; else var init = Jv[5];
    return new blob(runtime.caml_js_from_array([0, b]), init);
   }
   function byte_length$1(b){return caml_call2(Jv[20][2], b, cst_size);}
   function type$3(b){return caml_call2(Jv[23][2], b, cst_type$2);}
   function slice$1(opt, stop, _b9_, b){
    if(opt) var sth = opt[1], start = sth; else var start = 0;
    if(_b9_) var sth$0 = _b9_[1], type = sth$0; else var type = Jstr[4];
    if(stop)
     var stop$0 = stop[1], stop$1 = stop$0;
    else
     var stop$1 = byte_length$1(b);
    return b.slice(start, stop$1, type);
   }
   function stream(b){return b["stream"];}
   function file_reader(progress$0, conv){
    function progress_data(e){
     if(! caml_call2(Jv[19][2], e, cst_lengthComputable)) return 0;
     var
      loaded = caml_call2(Jv[21][2], e, cst_loaded),
      total = caml_call2(Jv[21][2], e, cst_total);
     return [0, [0, loaded, total]];
    }
    var
     reader = new Jv[12]["FileReader"],
     match = caml_call1(Fut[1], 0),
     set_fut = match[2],
     fut = match[1];
    function ok(e){
     if(progress$0){
      var progress = progress$0[1];
      caml_call1(progress, progress_data(e));
     }
     return caml_call1(set_fut, [0, caml_call1(conv, reader["result"])]);
    }
    function error(e){return caml_call1(set_fut, [1, reader[cst_error$0]]);}
    var opts = listen_opts(0, _j_, 0, 0);
    listen([0, opts], load, ok, reader);
    listen([0, opts], error$0, error, reader);
    if(progress$0){
     var
      progress$1 = progress$0[1],
      progress$2 =
        function(e){return caml_call1(progress$1, progress_data(e));};
     listen(0, progress, progress$2, reader);
    }
    return [0, fut, reader];
   }
   function array_buffer$0(progress, b){
    if(progress){
     var
      match = file_reader(progress, function(_b8_){return _b8_;}),
      reader = match[2],
      fut = match[1];
     reader.readAsArrayBuffer(b);
     return fut;
    }
    var _b6_ = b.arrayBuffer();
    return caml_call2(Fut[11], function(_b7_){return _b7_;}, _b6_);
   }
   function text(progress, b){
    if(progress){
     var
      match = file_reader(progress, function(_b5_){return _b5_;}),
      reader = match[2],
      fut = match[1];
     reader.readAsText(b);
     return fut;
    }
    var _b3_ = b.text();
    return caml_call2(Fut[11], function(_b4_){return _b4_;}, _b3_);
   }
   function data_uri(progress, b){
    var
     match = file_reader(progress, function(_b2_){return _b2_;}),
     reader = match[2],
     fut = match[1];
    reader.readAsDataURL(b);
    return fut;
   }
   function init$1(blob_init, last_modified_ms, param){
    if(blob_init) var b = blob_init[1], o = b; else var o = {};
    caml_call3(Jv[20][4], o, cst_lastModified, last_modified_ms);
    return o;
   }
   var file$0 = Jv[12]["File"];
   function of_blob(opt, name, b){
    if(opt) var sth = opt[1], init = sth; else var init = {};
    return new file$0(b, name, init);
   }
   function name(f){return caml_call2(Jv[23][2], f, cst_name$0);}
   function relative_path(f){
    var
     p =
       caml_call3
        (Jv[14], function(_b1_){return _b1_;}, f, cst_webkitRelativePath);
    return caml_call2(Stdlib_Option[3], p, Jstr[4]);
   }
   function last_modified_ms(f){
    return caml_call2(Jv[20][2], f, cst_lastModified$0);
   }
   function data_utf_8_of_jstr(s){return to_binary_jstr(of_jstr(s));}
   function data_utf_8_to_jstr(d){
    var e = of_binary_jstr(d);
    if(0 !== e[0]) return e;
    var t = e[1];
    return to_jstr(t);
   }
   function data_of_binary_jstr(_b0_){return _b0_;}
   function data_to_binary_jstr(_bZ_){return _bZ_;}
   function encode(bs){
    try{var v = Jv[12]["btoa"](bs);}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn[1] !== Jv[33]) throw caml_maybe_attach_backtrace(exn, 0);
     var e = exn[2];
     return [1, e];
    }
    return [0, v];
   }
   function decode(s){
    try{var v = Jv[12]["atob"](s);}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn[1] !== Jv[33]) throw caml_maybe_attach_backtrace(exn, 0);
     var e = exn[2];
     return [1, e];
    }
    return [0, v];
   }
   var
    Base64 =
      [0,
       data_utf_8_of_jstr,
       data_utf_8_to_jstr,
       data_of_binary_jstr,
       data_to_binary_jstr,
       encode,
       decode],
    json = Jv[12]["JSON"];
   function encode$0(v){return json.stringify(v);}
   function decode$0(s){
    try{var v = json.parse(s);}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn[1] !== Jv[33]) throw caml_maybe_attach_backtrace(exn, 0);
     var e = exn[2];
     return [1, e];
    }
    return [0, v];
   }
   var
    encode$1 = Jv[12]["encodeURI"],
    decode$1 = Jv[12]["decodeURI"],
    encode_component = Jv[12]["encodeURIComponent"],
    decode_component = Jv[12]["decodeURIComponent"],
    url = Jv[12]["URL"];
   function v(base, s){
    if(! base) return new url(s);
    var b = base[1];
    return new url(s, b);
   }
   function with_uri(scheme, host, port, path, query, fragment, u){
    var u$0 = new url(u);
    try{
     caml_call3(Jv[23][4], u$0, cst_protocol, scheme);
     caml_call3(Jv[23][4], u$0, cst_hostname, host);
     if(port){
      var
       p = port[1],
       arg = Jstr[33],
       _bX_ =
         caml_call2
          (Stdlib_Option[7],
           function(eta){return caml_call2(arg, 0, eta);},
           p);
      caml_call3(Jv[23][4], u$0, cst_port, _bX_);
     }
     caml_call3(Jv[23][4], u$0, cst_pathname, path);
     caml_call3(Jv[23][4], u$0, cst_search, query);
     caml_call3(Jv[23][4], u$0, cst_hash, fragment);
     var _bY_ = [0, u$0];
     return _bY_;
    }
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn[1] !== Jv[33]) throw caml_maybe_attach_backtrace(exn, 0);
     var e = exn[2];
     return [1, e];
    }
   }
   function scheme(u){
    var p = caml_call2(Jv[23][2], u, cst_protocol$0);
    return 0 === caml_call1(Jstr[1], p) ? p : caml_call3(Jstr[15], 0, _k_, p);
   }
   function host(u){return caml_call2(Jv[23][2], u, cst_hostname$0);}
   function port(u){
    var p = caml_call2(Jv[23][2], u, cst_port$0);
    return caml_call1(Jstr[24], p) ? 0 : caml_call2(Jstr[32], 0, p);
   }
   var prefix = "/";
   function path(u){return caml_call2(Jv[23][2], u, cst_pathname$0);}
   function query(u){
    var q = caml_call2(Jv[23][2], u, cst_search$0);
    return caml_call1(Jstr[24], q) ? q : caml_call3(Jstr[15], _l_, 0, q);
   }
   function fragment(u){
    var f = caml_call2(Jv[23][2], u, cst_hash$0);
    return caml_call1(Jstr[24], f) ? f : caml_call3(Jstr[15], _m_, 0, f);
   }
   function path_segments(u){
    function decode_seg(s){return decode_component(s);}
    try{
     var
      p = path(u),
      p$0 =
        caml_call2(Jstr[25], prefix, p) ? caml_call3(Jstr[15], _n_, 0, p) : p,
      _bV_ = caml_call2(Jstr[17], prefix, p$0),
      _bW_ = [0, caml_call2(Stdlib_List[19], decode_seg, _bV_)];
     return _bW_;
    }
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn[1] !== Jv[33]) throw caml_maybe_attach_backtrace(exn, 0);
     var e = exn[2];
     return [1, e];
    }
   }
   function with_path_segments(u, segs){
    function encode_seg(s){
     var _bU_ = encode_component(s);
     return caml_call2(Jstr[7], prefix, _bU_);
    }
    try{
     var
      u$0 = new url(u),
      _bS_ = caml_call2(Stdlib_List[19], encode_seg, segs),
      path = caml_call2(Jstr[9], 0, _bS_);
     u$0[cst_pathname$1] = path;
     var _bT_ = [0, u$0];
     return _bT_;
    }
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn[1] !== Jv[33]) throw caml_maybe_attach_backtrace(exn, 0);
     var e = exn[2];
     return [1, e];
    }
   }
   var usp = Jv[12]["URLSearchParams"];
   function is_empty(p){
    var _bQ_ = p.entries(), _bR_ = caml_call1(Jv[35][6], _bQ_);
    return caml_call1(Jv[35][1], _bR_);
   }
   function mem(k, p){return p.has(k) | 0;}
   function find$0(k, p){
    var _bO_ = p.get(k);
    return caml_call2(Jv[10], function(_bP_){return _bP_;}, _bO_);
   }
   function find_all(k, p){return caml_list_of_js_array(p.getAll(k));}
   function fold(f, p, acc){
    function key(_bN_){return _bN_;}
    function value(_bM_){return _bM_;}
    var _bL_ = p.entries();
    return caml_call5(Jv[35][8], key, value, f, _bL_, acc);
   }
   function of_jstr$1(s){return new usp(s);}
   function to_jstr$0(p){return p.toString();}
   function of_assoc(l){
    var s = Jstr[4], p = new usp(s);
    caml_call2
     (Stdlib_List[17],
      function(param){
       var v = param[2], k = param[1];
       p.append(k, v);
       return 0;
      },
      l);
    return p;
   }
   function to_assoc(p){
    var _bK_ = fold(function(k, v, acc){return [0, [0, k, v], acc];}, p, 0);
    return caml_call1(Stdlib_List[9], _bK_);
   }
   function of_obj(o){return new usp(o);}
   function query_params(u){var s = query(u); return new usp(s);}
   function with_query_params(u, ps){
    var u$0 = new url(u), _bJ_ = ps.toString();
    caml_call3(Jv[23][3], u$0, cst_search$1, _bJ_);
    return u$0;
   }
   function fragment_params(u){var s = fragment(u); return new usp(s);}
   function with_fragment_params(u, ps){
    var u$0 = new url(u), _bI_ = ps.toString();
    caml_call3(Jv[23][3], u$0, cst_hash$1, _bI_);
    return u$0;
   }
   function to_jstr$1(u){return u.toString();}
   function of_jstr$2(base, s){
    try{var v$0 = v(base, s);}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn[1] !== Jv[33]) throw caml_maybe_attach_backtrace(exn, 0);
     var e = exn[2];
     return [1, e];
    }
    return [0, v$0];
   }
   function code$0(f, s){
    try{var v = f(s);}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn[1] !== Jv[33]) throw caml_maybe_attach_backtrace(exn, 0);
     var e = exn[2];
     return [1, e];
    }
    return [0, v];
   }
   function encode$2(s){return code$0(encode$1, s);}
   function decode$2(s){return code$0(decode$1, s);}
   function encode_component$0(s){return code$0(encode_component, s);}
   function decode_component$0(s){return code$0(decode_component, s);}
   function v$0(n, v){return [0, n, v];}
   var void$0 = [0, Jstr[4], Jstr[4]];
   function is_void(param){
    var v = param[2], n = param[1], _bH_ = caml_call1(Jstr[24], n);
    return _bH_ ? caml_call1(Jstr[24], v) : _bH_;
   }
   function if$0(b, at){return b ? at : void$0;}
   function if_some(param){
    if(! param) return void$0;
    var at = param[1];
    return at;
   }
   function true$0(n){return [0, n, Jstr[4]];}
   function int$0(n, i){return [0, n, caml_call2(Jstr[33], 0, i)];}
   function float$0(n, f){return [0, n, caml_call2(Jstr[35], 0, f)];}
   function to_pair(_bG_){return _bG_;}
   function add_if(b, at, l){return b ? [0, at, l] : l;}
   function add_if_some(name, o, l){
    if(! o) return l;
    var a = o[1];
    return [0, [0, name, a], l];
   }
   var
    accesskey = "accesskey",
    action = "action",
    autocomplete = "autocomplete",
    autofocus = "autofocus",
    charset = "charset",
    checked = cst_checked,
    class$0 = "class",
    cols = "cols",
    content = "content",
    contenteditable = "contenteditable",
    defer = "defer",
    dir = cst_dir$0,
    disabled = "disabled",
    download = "download",
    draggable = "draggable",
    for$0 = "for",
    height$0 = cst_height$1,
    hidden = cst_hidden,
    href = "href",
    id$0 = cst_id,
    lang = "lang",
    list = "list",
    media = "media",
    method = "method",
    name$0 = cst_name$2,
    placeholder = "placeholder",
    rel = "rel",
    required = "required",
    rows = "rows",
    selected = "selected",
    spellcheck = "spellcheck",
    src = "src",
    style = cst_style,
    tabindex = "tabindex",
    title = cst_title$1,
    type$4 = cst_type$4,
    value = cst_value,
    width$0 = cst_width$1,
    wrap = "wrap",
    Name =
      [0,
       accesskey,
       action,
       autocomplete,
       autofocus,
       charset,
       checked,
       class$0,
       cols,
       content,
       contenteditable,
       defer,
       dir,
       disabled,
       download,
       draggable,
       for$0,
       height$0,
       hidden,
       href,
       id$0,
       lang,
       list,
       media,
       method,
       name$0,
       placeholder,
       rel,
       required,
       rows,
       selected,
       spellcheck,
       src,
       style,
       tabindex,
       title,
       type$4,
       value,
       width$0,
       wrap];
   function accesskey$0(s){var n = Name[1]; return [0, n, s];}
   function action$0(s){var n = Name[2]; return [0, n, s];}
   function autocomplete$0(s){var n = Name[3]; return [0, n, s];}
   var autofocus$0 = true$0(Name[4]), n = Name[5];
   function charset$0(v){return [0, n, v];}
   var checked$0 = true$0(Name[6]);
   function class$1(s){var n = Name[7]; return [0, n, s];}
   function cols$0(i){return int$0(Name[8], i);}
   function content$0(s){var n = Name[9]; return [0, n, s];}
   function contenteditable$0(s){return true$0(Name[10]);}
   var defer$0 = true$0(Name[11]);
   function dir$0(s){var n = Name[12]; return [0, n, s];}
   var disabled$0 = true$0(Name[13]);
   function download$0(s){var n = Name[14]; return [0, n, s];}
   function draggable$0(s){var n = Name[15]; return [0, n, s];}
   function for$1(s){var n = Name[16]; return [0, n, s];}
   function height$1(i){return int$0(Name[17], i);}
   var hidden$0 = true$0(Name[18]);
   function href$0(s){var n = Name[19]; return [0, n, s];}
   function id$1(s){var n = Name[20]; return [0, n, s];}
   function lang$0(s){var n = Name[21]; return [0, n, s];}
   function list$0(s){var n = Name[22]; return [0, n, s];}
   function media$0(s){var n = Name[23]; return [0, n, s];}
   function method$0(s){var n = Name[24]; return [0, n, s];}
   function name$1(s){var n = Name[25]; return [0, n, s];}
   function placeholder$0(s){var n = Name[26]; return [0, n, s];}
   function rel$0(s){var n = Name[27]; return [0, n, s];}
   var required$0 = true$0(Name[28]);
   function rows$0(i){return int$0(Name[29], i);}
   var selected$0 = true$0(Name[30]), n$0 = Name[31];
   function spellcheck$0(v){return [0, n$0, v];}
   function src$0(s){var n = Name[32]; return [0, n, s];}
   function style$0(s){var n = Name[33]; return [0, n, s];}
   function tabindex$0(i){return int$0(Name[34], i);}
   function title$0(s){var n = Name[35]; return [0, n, s];}
   function type$5(s){var n = Name[36]; return [0, n, s];}
   function value$0(s){var n = Name[37]; return [0, n, s];}
   function width$1(i){return int$0(Name[38], i);}
   function wrap$0(s){var n = Name[37]; return [0, n, s];}
   var global_document = Jv[12]["document"];
   function document(e){return e[cst_ownerDocument];}
   var
    global_root =
      caml_call1(Jv[8], global_document)
       ? Jv[5]
       : global_document[cst_documentElement];
   function el_list_of_node_list(nl){
    var
     acc = [0, 0],
     len = caml_call2(Jv[20][2], nl, cst_length$1),
     _bD_ = len - 1 | 0;
    if(_bD_ >= 0){
     var i = _bD_;
     for(;;){
      var _bE_ = acc[1];
      acc[1] = [0, nl[i], _bE_];
      var _bF_ = i - 1 | 0;
      if(0 === i) break;
      i = _bF_;
     }
    }
    return acc[1];
   }
   function _o_(e, n){e.appendChild(n); return 0;}
   function v$1(opt, _bB_, name, cs){
    if(opt) var sth = opt[1], d = sth; else var d = global_document;
    if(_bB_) var sth$0 = _bB_[1], at$0 = sth$0; else var at$0 = 0;
    var e = d.createElement(name), ss = 0, clss = 0, param = at$0;
    for(;;){
     if(! param) break;
     var at = param[2], match = param[1], v = match[2], a = match[1];
     if(caml_call1(Jstr[24], a))
      param = at;
     else if(caml_call2(Jstr[28], a, Name[33])){
      var ss$0 = [0, v, ss];
      ss = ss$0;
      param = at;
     }
     else if(caml_call2(Jstr[28], a, Name[7])){
      var clss$0 = caml_call1(Jstr[24], v) ? clss : [0, v, clss];
      clss = clss$0;
      param = at;
     }
     else{e.setAttribute(a, v); param = at;}
    }
    if(0 !== ss){
     var
      a$0 = Name[33],
      _bz_ = caml_call1(Stdlib_List[9], ss),
      v$0 = caml_call2(Jstr[9], [0, ";"], _bz_);
     e.setAttribute(a$0, v$0);
    }
    if(0 !== clss){
     var
      a$1 = Name[7],
      _bA_ = caml_call1(Stdlib_List[9], clss),
      v$1 = caml_call2(Jstr[9], [0, cst], _bA_);
     e.setAttribute(a$1, v$1);
    }
    caml_call2(Stdlib_List[17], function(_bC_){return _o_(e, _bC_);}, cs);
    return e;
   }
   function txt(opt, s){
    if(opt) var sth = opt[1], d = sth; else var d = global_document;
    return d.createTextNode(s);
   }
   function txt$0(opt, s){
    if(opt) var sth = opt[1], d = sth; else var d = global_document;
    return d.createTextNode(caml_call1(Jv[24], s));
   }
   function sp(opt, param){return txt(0, cst);}
   function nbsp(opt, param){return txt(0, " ");}
   function is_txt(e){
    return 3 === caml_call2(Jv[20][2], e, cst_nodeType) ? 1 : 0;
   }
   function is_el(e){
    return 1 === caml_call2(Jv[20][2], e, cst_nodeType$0) ? 1 : 0;
   }
   function tag_name(e){
    var _by_ = caml_call2(Jv[23][2], e, cst_nodeName);
    return caml_call1(Jstr[22], _by_);
   }
   function has_tag_name(n, e){
    var _bx_ = tag_name(e);
    return caml_call2(Jstr[28], n, _bx_);
   }
   function txt_text(txt){
    return is_txt(txt) ? caml_call2(Jv[23][2], txt, cst_nodeValue) : Jstr[4];
   }
   function find_by_class(opt, c){
    if(opt) var sth = opt[1], root = sth; else var root = global_root;
    return el_list_of_node_list(root.getElementsByClassName(c));
   }
   function find_by_tag_name(opt, n){
    if(opt) var sth = opt[1], root = sth; else var root = global_root;
    return el_list_of_node_list(root.getElementsByTagName(n));
   }
   function find_first_by_selector(opt, sel){
    if(opt) var sth = opt[1], root = sth; else var root = global_root;
    var _bv_ = root.querySelector(sel);
    return caml_call1(caml_call1(Jv[10], function(_bw_){return _bw_;}), _bv_);
   }
   function fold_find_by_selector(opt, f, sel, acc){
    if(opt) var sth = opt[1], root = sth; else var root = global_root;
    var
     nl = root.querySelectorAll(sel),
     acc$0 = [0, acc],
     _bs_ = caml_call2(Jv[20][2], nl, cst_length$2) - 1 | 0,
     _br_ = 0;
    if(_bs_ >= 0){
     var i = _br_;
     for(;;){
      var _bt_ = acc$0[1];
      acc$0[1] = caml_call2(f, nl[i], _bt_);
      var _bu_ = i + 1 | 0;
      if(_bs_ === i) break;
      i = _bu_;
     }
    }
    return acc$0[1];
   }
   function parent(e){
    var match = caml_call2(Jv[13], e, cst_parentNode);
    if(match){var e$0 = match[1]; if(is_el(e$0)) return [0, e$0];}
    return 0;
   }
   function children(opt, e){
    if(opt) var sth = opt[1], only_els = sth; else var only_els = 0;
    return only_els
            ? el_list_of_node_list(e["children"])
            : el_list_of_node_list(e["childNodes"]);
   }
   function set_children(e, l){
    for(;;){
     var _bp_ = e[cst_firstChild];
     if(caml_call1(Jv[6], _bp_)) break;
     e.removeChild(e[cst_firstChild]);
    }
    return caml_call2
            (Stdlib_List[17], function(_bq_){return _o_(e, _bq_);}, l);
   }
   function prepend_children(e, l){
    caml_js_meth_call(e, "prepend", caml_call1(Stdlib_Array[12], l));
    return 0;
   }
   function append_children(e, l){
    caml_js_meth_call(e, cst_append, caml_call1(Stdlib_Array[12], l));
    return 0;
   }
   function previous_sibling(e){
    return caml_call2(Jv[13], e, cst_previousElementSibling);
   }
   function next_sibling(e){
    return caml_call2(Jv[13], e, cst_nextElementSibling);
   }
   function insert_siblings(loc, e, l){
    if(-126259180 === loc)
     caml_js_meth_call(e, "replaceWith", caml_call1(Stdlib_Array[12], l));
    else if(818927100 <= loc)
     caml_js_meth_call(e, "after", caml_call1(Stdlib_Array[12], l));
    else
     caml_js_meth_call(e, "before", caml_call1(Stdlib_Array[12], l));
    return 0;
   }
   function remove$0(e){e.remove(e); return 0;}
   function at(a, e){
    var _bn_ = e.getAttribute(a);
    return caml_call2(Jv[10], function(_bo_){return _bo_;}, _bn_);
   }
   function set_at(a, v, e){
    if(caml_call1(Jstr[24], a)) return 0;
    if(v){var v$0 = v[1]; e.setAttribute(a, v$0); return 0;}
    e.removeAttribute(a);
    return 0;
   }
   function jv_to_bool(b){return caml_call1(Jv[7], b) ? 0 : b | 0;}
   function jv_to_int(i){return caml_call1(Jv[7], i) ? 0 : i;}
   function jv_to_float(f){return caml_call1(Jv[7], f) ? 0. : f;}
   function jv_to_jstr(s){return caml_call1(Jv[7], s) ? Jstr[4] : s;}
   function bool(n){return [0, n, jv_to_bool, caml_js_from_bool];}
   function int$1(n){return [0, n, jv_to_int, function(_bm_){return _bm_;}];}
   function float$1(n){
    return [0, n, jv_to_float, function(_bl_){return _bl_;}];
   }
   function jstr(n){return [0, n, jv_to_jstr, function(_bk_){return _bk_;}];}
   var
    checked$1 = bool(cst_checked),
    height$2 = int$1(cst_height$1),
    id$2 = jstr(cst_id),
    name$2 = jstr(cst_name$2),
    title$1 = jstr(cst_title$1),
    value$1 = jstr(cst_value),
    width$2 = int$1(cst_width$1);
   function prop(p, e){var _bj_ = e[p[1]]; return caml_call1(p[2], _bj_);}
   function set_prop(p, v, e){
    var _bi_ = caml_call1(p[3], v);
    e[p[1]] = _bi_;
    return 0;
   }
   function class$2(c, e){return e[cst_classList].contains(c) | 0;}
   function set_class(c, b, e){
    return b ? (e[cst_classList].add(c), 0) : (e[cst_classList].remove(c), 0);
   }
   var
    background_color = "background-color",
    bottom = "bottom",
    color = "color",
    cursor = "cursor",
    display = "display",
    height$3 = cst_height$1,
    left = "left",
    position = "position",
    right = "right",
    top = "top",
    visibility = "visibility",
    width$3 = cst_width$1,
    z_index = "z-index",
    Style =
      [0,
       background_color,
       bottom,
       color,
       cursor,
       display,
       height$3,
       left,
       position,
       right,
       top,
       visibility,
       width$3,
       z_index];
   function computed_style(opt, p, e){
    if(opt) var sth = opt[1], w = sth; else var w = Jv[12][cst_window];
    var style = w.getComputedStyle(e), v = style[p];
    return caml_call1(Jv[8], v) ? Jstr[4] : v;
   }
   function inline_style(p, e){
    var style = e[cst_style];
    if(caml_call1(Jv[8], style)) return Jstr[4];
    var v = style[p];
    return caml_call1(Jv[8], v) ? Jstr[4] : v;
   }
   function set_inline_style(opt, p, v, e){
    if(opt) var sth = opt[1], important = sth; else var important = 0;
    var priority = important ? "important" : Jstr[4], style = e[cst_style];
    return caml_call1(Jv[8], style)
            ? 0
            : (style.setProperty(p, v, priority), 0);
   }
   function remove_inline_style(p, e){
    var style = e[cst_style];
    return caml_call1(Jv[8], style) ? 0 : (style.removeProperty(p), 0);
   }
   function inner_x(e){return caml_call2(Jv[21][2], e, cst_clientLeft);}
   function inner_y(e){return caml_call2(Jv[21][2], e, cst_clientTop);}
   function inner_w(e){return caml_call2(Jv[21][2], e, cst_clientWidth);}
   function inner_h(e){return caml_call2(Jv[21][2], e, cst_clientHeight);}
   function bound_x(e){
    var _bh_ = e.getBoundingClientRect();
    return caml_call2(Jv[21][2], _bh_, cst_x);
   }
   function bound_y(e){
    var _bg_ = e.getBoundingClientRect();
    return caml_call2(Jv[21][2], _bg_, cst_y);
   }
   function bound_w(e){
    var _bf_ = e.getBoundingClientRect();
    return caml_call2(Jv[21][2], _bf_, cst_width$0);
   }
   function bound_h(e){
    var _be_ = e.getBoundingClientRect();
    return caml_call2(Jv[21][2], _be_, cst_height$0);
   }
   function scroll_x(e){return caml_call2(Jv[21][2], e, cst_scrollLeft);}
   function scroll_y(e){return caml_call2(Jv[21][2], e, cst_scrollTop);}
   function scroll_w(e){return caml_call2(Jv[21][2], e, cst_scrollWidth);}
   function scroll_h(e){return caml_call2(Jv[21][2], e, cst_scrollHeight);}
   function scroll_into_view(opt, e){
    if(opt) var sth = opt[1], align_v = sth; else var align_v = 389604418;
    var align = 389604418 <= align_v ? 1 : 0;
    e.scrollIntoView(! ! align);
    return 0;
   }
   function has_focus(e){
    var
     _bc_ = e[cst_ownerDocument][cst_activeElement],
     match = caml_call2(Jv[10], function(_bd_){return _bd_;}, _bc_);
    if(! match) return 0;
    var e$0 = match[1];
    return e === e$0 ? 1 : 0;
   }
   function set_has_focus(b, e){if(b) e.focus(); else e.blur(); return 0;}
   function is_locking_pointer(e){
    var
     _ba_ = e[cst_ownerDocument][cst_pointerLockElement],
     match = caml_call2(Jv[10], function(_bb_){return _bb_;}, _ba_);
    if(! match) return 0;
    var e$0 = match[1];
    return e === e$0 ? 1 : 0;
   }
   function request_pointer_lock(e){
    var
     match = caml_call1(Fut[1], 0),
     set = match[2],
     fut = match[1],
     d = e[cst_ownerDocument],
     opts = listen_opts(0, _p_, 0, 0),
     unlisten$0 = [0, function(param){return 0;}];
    function locked(ev){
     caml_call1(set, _q_);
     return caml_call1(unlisten$0[1], 0);
    }
    function error(ev){
     var err = caml_call2(Jv[32][1], 0, "Could not lock pointer");
     caml_call1(set, [1, err]);
     return caml_call1(unlisten$0[1], 0);
    }
    var
     k = listen([0, opts], pointerlockchange, locked, d),
     k$0 = listen([0, opts], pointerlockerror, error, d);
    unlisten$0[1] = function(param){unlisten(k); return unlisten(k$0);};
    e.requestPointerLock();
    return fut;
   }
   function click$0(e){e.click(); return 0;}
   function select_text(e){e.select(); return 0;}
   var
    auto = cst_auto,
    hide = "hide",
    show = "show",
    Navigation_ui = [0, auto, hide, show];
   function fullscreen_opts(navigation_ui, param){
    var o = {};
    caml_call3(Jv[23][4], o, cst_navigationUI, navigation_ui);
    return o;
   }
   function request_fullscreen(opt, e){
    if(opt) var sth = opt[1], opts = sth; else var opts = {};
    var _a__ = e.requestFullscreen(opts);
    return caml_call1(caml_call1(Fut[11], function(_a$_){return 0;}), _a__);
   }
   function files(e){
    var match = caml_call2(Jv[13], e, cst_files);
    if(! match) return 0;
    var files = match[1];
    return caml_call2(Jv[29], function(_a9_){return _a9_;}, files);
   }
   var
    Input$0 = [0, files],
    a = "a",
    abbr = "abbr",
    address = "address",
    area = "area",
    article = "article",
    aside = "aside",
    audio = "audio",
    b = "b",
    base = "base",
    bdi = "bdi",
    bdo = "bdo",
    blockquote = "blockquote",
    body = cst_body,
    br = "br",
    button$0 = cst_button$0,
    canvas = "canvas",
    caption = "caption",
    cite = "cite",
    code$1 = cst_code$0,
    col = "col",
    colgroup = "colgroup",
    command = "command",
    datalist = "datalist",
    dd = "dd",
    del = "del",
    details = "details",
    dfn = "dfn",
    div = "div",
    dl = "dl",
    dt = "dt",
    em = "em",
    embed = "embed",
    fieldset = "fieldset",
    figcaption = "figcaption",
    figure = "figure",
    footer = "footer",
    form = "form",
    h1 = "h1",
    h2 = "h2",
    h3 = "h3",
    h4 = "h4",
    h5 = "h5",
    h6 = "h6",
    head = cst_head,
    header = "header",
    hgroup = "hgroup",
    hr = "hr",
    html = "html",
    i = "i",
    iframe = "iframe",
    img = "img",
    input$0 = cst_input,
    ins = "ins",
    kbd = "kbd",
    keygen = "keygen",
    label = "label",
    legend = "legend",
    li = "li",
    link$0 = cst_link,
    map$0 = cst_map,
    mark = cst_mark,
    menu = "menu",
    meta = "meta",
    meter = "meter",
    nav = "nav",
    noscript = "noscript",
    object = "object",
    ol = "ol",
    optgroup = "optgroup",
    option = "option",
    output = "output",
    p = "p",
    pre = "pre",
    progress$0 = cst_progress,
    q = "q",
    rp = "rp",
    rt = "rt",
    ruby = "ruby",
    s = "s",
    samp = "samp",
    script = "script",
    section = "section",
    select$0 = cst_select,
    small = "small",
    source = "source",
    span = "span",
    strong = "strong",
    style$1 = cst_style,
    sub$0 = "sub",
    summary = "summary",
    sup = "sup",
    table = cst_table$0,
    tbody = "tbody",
    td = "td",
    textarea = "textarea",
    tfoot = "tfoot",
    th = "th",
    thead = "thead",
    time = cst_time$0,
    title$2 = cst_title$1,
    tr = "tr",
    track = "track",
    u = "u",
    ul = "ul",
    var$0 = "var",
    video = "video",
    wbr = "wbr",
    Name$0 =
      [0,
       a,
       abbr,
       address,
       area,
       article,
       aside,
       audio,
       b,
       base,
       bdi,
       bdo,
       blockquote,
       body,
       br,
       button$0,
       canvas,
       caption,
       cite,
       code$1,
       col,
       colgroup,
       command,
       datalist,
       dd,
       del,
       details,
       dfn,
       div,
       dl,
       dt,
       em,
       embed,
       fieldset,
       figcaption,
       figure,
       footer,
       form,
       h1,
       h2,
       h3,
       h4,
       h5,
       h6,
       head,
       header,
       hgroup,
       hr,
       html,
       i,
       iframe,
       img,
       input$0,
       ins,
       kbd,
       keygen,
       label,
       legend,
       li,
       link$0,
       map$0,
       mark,
       menu,
       meta,
       meter,
       nav,
       noscript,
       object,
       ol,
       optgroup,
       option,
       output,
       p,
       "param",
       pre,
       progress$0,
       q,
       rp,
       rt,
       ruby,
       s,
       samp,
       script,
       section,
       select$0,
       small,
       source,
       span,
       strong,
       style$1,
       sub$0,
       summary,
       sup,
       table,
       tbody,
       td,
       textarea,
       tfoot,
       th,
       thead,
       time,
       title$2,
       tr,
       track,
       u,
       ul,
       var$0,
       video,
       wbr];
   function void_cons(name, d, at, param){return v$1(d, at, name, 0);}
   var name$3 = Name$0[1];
   function a$0(d, at, cs){return v$1(d, at, name$3, cs);}
   var name$4 = Name$0[2];
   function abbr$0(d, at, cs){return v$1(d, at, name$4, cs);}
   var name$5 = Name$0[3];
   function address$0(d, at, cs){return v$1(d, at, name$5, cs);}
   var _r_ = Name$0[4];
   function area$0(_a6_, _a7_, _a8_){return void_cons(_r_, _a6_, _a7_, _a8_);}
   var name$6 = Name$0[5];
   function article$0(d, at, cs){return v$1(d, at, name$6, cs);}
   var name$7 = Name$0[6];
   function aside$0(d, at, cs){return v$1(d, at, name$7, cs);}
   var name$8 = Name$0[7];
   function audio$0(d, at, cs){return v$1(d, at, name$8, cs);}
   var name$9 = Name$0[8];
   function b$0(d, at, cs){return v$1(d, at, name$9, cs);}
   var _s_ = Name$0[9];
   function base$0(_a3_, _a4_, _a5_){return void_cons(_s_, _a3_, _a4_, _a5_);}
   var name$10 = Name$0[10];
   function bdi$0(d, at, cs){return v$1(d, at, name$10, cs);}
   var name$11 = Name$0[11];
   function bdo$0(d, at, cs){return v$1(d, at, name$11, cs);}
   var name$12 = Name$0[12];
   function blockquote$0(d, at, cs){return v$1(d, at, name$12, cs);}
   var name$13 = Name$0[13];
   function body$0(d, at, cs){return v$1(d, at, name$13, cs);}
   var _t_ = Name$0[14];
   function br$0(_a0_, _a1_, _a2_){return void_cons(_t_, _a0_, _a1_, _a2_);}
   var name$14 = Name$0[15];
   function button$1(d, at, cs){return v$1(d, at, name$14, cs);}
   var name$15 = Name$0[16];
   function canvas$0(d, at, cs){return v$1(d, at, name$15, cs);}
   var name$16 = Name$0[17];
   function caption$0(d, at, cs){return v$1(d, at, name$16, cs);}
   var name$17 = Name$0[18];
   function cite$0(d, at, cs){return v$1(d, at, name$17, cs);}
   var name$18 = Name$0[19];
   function code$2(d, at, cs){return v$1(d, at, name$18, cs);}
   var _u_ = Name$0[20];
   function col$0(_aX_, _aY_, _aZ_){return void_cons(_u_, _aX_, _aY_, _aZ_);}
   var name$19 = Name$0[21];
   function colgroup$0(d, at, cs){return v$1(d, at, name$19, cs);}
   var name$20 = Name$0[22];
   function command$0(d, at, cs){return v$1(d, at, name$20, cs);}
   var name$21 = Name$0[23];
   function datalist$0(d, at, cs){return v$1(d, at, name$21, cs);}
   var name$22 = Name$0[24];
   function dd$0(d, at, cs){return v$1(d, at, name$22, cs);}
   var name$23 = Name$0[25];
   function del$0(d, at, cs){return v$1(d, at, name$23, cs);}
   var name$24 = Name$0[26];
   function details$0(d, at, cs){return v$1(d, at, name$24, cs);}
   var name$25 = Name$0[27];
   function dfn$0(d, at, cs){return v$1(d, at, name$25, cs);}
   var name$26 = Name$0[28];
   function div$0(d, at, cs){return v$1(d, at, name$26, cs);}
   var name$27 = Name$0[29];
   function dl$0(d, at, cs){return v$1(d, at, name$27, cs);}
   var name$28 = Name$0[30];
   function dt$0(d, at, cs){return v$1(d, at, name$28, cs);}
   var name$29 = Name$0[31];
   function em$0(d, at, cs){return v$1(d, at, name$29, cs);}
   var _v_ = Name$0[32];
   function embed$0(_aU_, _aV_, _aW_){
    return void_cons(_v_, _aU_, _aV_, _aW_);
   }
   var name$30 = Name$0[33];
   function fieldset$0(d, at, cs){return v$1(d, at, name$30, cs);}
   var name$31 = Name$0[34];
   function figcaption$0(d, at, cs){return v$1(d, at, name$31, cs);}
   var name$32 = Name$0[35];
   function figure$0(d, at, cs){return v$1(d, at, name$32, cs);}
   var name$33 = Name$0[36];
   function footer$0(d, at, cs){return v$1(d, at, name$33, cs);}
   var name$34 = Name$0[37];
   function form$0(d, at, cs){return v$1(d, at, name$34, cs);}
   var name$35 = Name$0[38];
   function h1$0(d, at, cs){return v$1(d, at, name$35, cs);}
   var name$36 = Name$0[39];
   function h2$0(d, at, cs){return v$1(d, at, name$36, cs);}
   var name$37 = Name$0[40];
   function h3$0(d, at, cs){return v$1(d, at, name$37, cs);}
   var name$38 = Name$0[41];
   function h4$0(d, at, cs){return v$1(d, at, name$38, cs);}
   var name$39 = Name$0[42];
   function h5$0(d, at, cs){return v$1(d, at, name$39, cs);}
   var name$40 = Name$0[43];
   function h6$0(d, at, cs){return v$1(d, at, name$40, cs);}
   var name$41 = Name$0[44];
   function head$0(d, at, cs){return v$1(d, at, name$41, cs);}
   var name$42 = Name$0[45];
   function header$0(d, at, cs){return v$1(d, at, name$42, cs);}
   var name$43 = Name$0[46];
   function hgroup$0(d, at, cs){return v$1(d, at, name$43, cs);}
   var _w_ = Name$0[47];
   function hr$0(_aR_, _aS_, _aT_){return void_cons(_w_, _aR_, _aS_, _aT_);}
   var name$44 = Name$0[48];
   function html$0(d, at, cs){return v$1(d, at, name$44, cs);}
   var name$45 = Name$0[49];
   function i$0(d, at, cs){return v$1(d, at, name$45, cs);}
   var name$46 = Name$0[50];
   function iframe$0(d, at, cs){return v$1(d, at, name$46, cs);}
   var _x_ = Name$0[51];
   function img$0(_aO_, _aP_, _aQ_){return void_cons(_x_, _aO_, _aP_, _aQ_);}
   var _y_ = Name$0[52];
   function input$1(_aL_, _aM_, _aN_){
    return void_cons(_y_, _aL_, _aM_, _aN_);
   }
   var name$47 = Name$0[53];
   function ins$0(d, at, cs){return v$1(d, at, name$47, cs);}
   var name$48 = Name$0[54];
   function kbd$0(d, at, cs){return v$1(d, at, name$48, cs);}
   var name$49 = Name$0[55];
   function keygen$0(d, at, cs){return v$1(d, at, name$49, cs);}
   var name$50 = Name$0[56];
   function label$0(d, at, cs){return v$1(d, at, name$50, cs);}
   var name$51 = Name$0[57];
   function legend$0(d, at, cs){return v$1(d, at, name$51, cs);}
   var name$52 = Name$0[58];
   function li$0(d, at, cs){return v$1(d, at, name$52, cs);}
   var _z_ = Name$0[59];
   function link$1(_aI_, _aJ_, _aK_){return void_cons(_z_, _aI_, _aJ_, _aK_);}
   var name$53 = Name$0[60];
   function map$1(d, at, cs){return v$1(d, at, name$53, cs);}
   var name$54 = Name$0[61];
   function mark$0(d, at, cs){return v$1(d, at, name$54, cs);}
   var name$55 = Name$0[62];
   function menu$0(d, at, cs){return v$1(d, at, name$55, cs);}
   var _A_ = Name$0[63];
   function meta$0(_aF_, _aG_, _aH_){return void_cons(_A_, _aF_, _aG_, _aH_);}
   var name$56 = Name$0[64];
   function meter$0(d, at, cs){return v$1(d, at, name$56, cs);}
   var name$57 = Name$0[65];
   function nav$0(d, at, cs){return v$1(d, at, name$57, cs);}
   var name$58 = Name$0[66];
   function noscript$0(d, at, cs){return v$1(d, at, name$58, cs);}
   var name$59 = Name$0[67];
   function object$0(d, at, cs){return v$1(d, at, name$59, cs);}
   var name$60 = Name$0[68];
   function ol$0(d, at, cs){return v$1(d, at, name$60, cs);}
   var name$61 = Name$0[69];
   function optgroup$0(d, at, cs){return v$1(d, at, name$61, cs);}
   var name$62 = Name$0[70];
   function option$0(d, at, cs){return v$1(d, at, name$62, cs);}
   var name$63 = Name$0[71];
   function output$0(d, at, cs){return v$1(d, at, name$63, cs);}
   var name$64 = Name$0[72];
   function p$0(d, at, cs){return v$1(d, at, name$64, cs);}
   var _B_ = Name$0[73], name$65 = Name$0[74];
   function pre$0(d, at, cs){return v$1(d, at, name$65, cs);}
   var name$66 = Name$0[75];
   function progress$1(d, at, cs){return v$1(d, at, name$66, cs);}
   var name$67 = Name$0[76];
   function q$0(d, at, cs){return v$1(d, at, name$67, cs);}
   var name$68 = Name$0[77];
   function rp$0(d, at, cs){return v$1(d, at, name$68, cs);}
   var name$69 = Name$0[78];
   function rt$0(d, at, cs){return v$1(d, at, name$69, cs);}
   var name$70 = Name$0[79];
   function ruby$0(d, at, cs){return v$1(d, at, name$70, cs);}
   var name$71 = Name$0[80];
   function s$0(d, at, cs){return v$1(d, at, name$71, cs);}
   var name$72 = Name$0[81];
   function samp$0(d, at, cs){return v$1(d, at, name$72, cs);}
   var name$73 = Name$0[82];
   function script$0(d, at, cs){return v$1(d, at, name$73, cs);}
   var name$74 = Name$0[83];
   function section$0(d, at, cs){return v$1(d, at, name$74, cs);}
   var name$75 = Name$0[84];
   function select$1(d, at, cs){return v$1(d, at, name$75, cs);}
   var name$76 = Name$0[85];
   function small$0(d, at, cs){return v$1(d, at, name$76, cs);}
   var _C_ = Name$0[86];
   function source$0(_aC_, _aD_, _aE_){
    return void_cons(_C_, _aC_, _aD_, _aE_);
   }
   var name$77 = Name$0[87];
   function span$0(d, at, cs){return v$1(d, at, name$77, cs);}
   var name$78 = Name$0[88];
   function strong$0(d, at, cs){return v$1(d, at, name$78, cs);}
   var name$79 = Name$0[89];
   function style$2(d, at, cs){return v$1(d, at, name$79, cs);}
   var name$80 = Name$0[90];
   function sub$1(d, at, cs){return v$1(d, at, name$80, cs);}
   var name$81 = Name$0[91];
   function summary$0(d, at, cs){return v$1(d, at, name$81, cs);}
   var name$82 = Name$0[92];
   function sup$0(d, at, cs){return v$1(d, at, name$82, cs);}
   var name$83 = Name$0[93];
   function table$0(d, at, cs){return v$1(d, at, name$83, cs);}
   var name$84 = Name$0[94];
   function tbody$0(d, at, cs){return v$1(d, at, name$84, cs);}
   var name$85 = Name$0[95];
   function td$0(d, at, cs){return v$1(d, at, name$85, cs);}
   var name$86 = Name$0[96];
   function textarea$0(d, at, cs){return v$1(d, at, name$86, cs);}
   var name$87 = Name$0[97];
   function tfoot$0(d, at, cs){return v$1(d, at, name$87, cs);}
   var name$88 = Name$0[98];
   function th$0(d, at, cs){return v$1(d, at, name$88, cs);}
   var name$89 = Name$0[99];
   function thead$0(d, at, cs){return v$1(d, at, name$89, cs);}
   var name$90 = Name$0[100];
   function time$0(d, at, cs){return v$1(d, at, name$90, cs);}
   var name$91 = Name$0[101];
   function title$3(d, at, cs){return v$1(d, at, name$91, cs);}
   var name$92 = Name$0[102];
   function tr$0(d, at, cs){return v$1(d, at, name$92, cs);}
   var _D_ = Name$0[103];
   function track$0(_az_, _aA_, _aB_){
    return void_cons(_D_, _az_, _aA_, _aB_);
   }
   var name$93 = Name$0[104];
   function u$0(d, at, cs){return v$1(d, at, name$93, cs);}
   var name$94 = Name$0[105];
   function ul$0(d, at, cs){return v$1(d, at, name$94, cs);}
   var name$95 = Name$0[106];
   function var$1(d, at, cs){return v$1(d, at, name$95, cs);}
   var name$96 = Name$0[107];
   function video$0(d, at, cs){return v$1(d, at, name$96, cs);}
   var _E_ = Name$0[108];
   function wbr$0(_aw_, _ax_, _ay_){return void_cons(_E_, _aw_, _ax_, _ay_);}
   function as_target(d){return d;}
   function root(d){return d[cst_documentElement];}
   function body$1(d){
    var b = d[cst_body];
    return caml_call1(Jv[9], b)
            ? b
            : caml_call2
              (Jv[34],
               0,
               "Document body is null. Try to defer your script execution.");
   }
   function head$1(d){return d[cst_head];}
   function active_el(d){
    var _au_ = d[cst_activeElement];
    return caml_call2(Jv[10], function(_av_){return _av_;}, _au_);
   }
   function find_el_by_id(d, id){
    var _as_ = d.getElementById(id);
    return caml_call2(Jv[10], function(_at_){return _at_;}, _as_);
   }
   function find_els_by_name(d, n){
    return el_list_of_node_list(d.getElementsByName(n));
   }
   function referrer(d){return caml_call2(Jv[23][2], d, cst_referrer);}
   function title$4(d){return caml_call2(Jv[23][2], d, cst_title);}
   function set_title(d, t){return caml_call3(Jv[23][3], d, cst_title$0, t);}
   var
    hidden$1 = cst_hidden,
    visible = "visible",
    Visibility_state = [0, hidden$1, visible];
   function visibility_state(d){
    return caml_call2(Jv[23][2], d, cst_visibilityState);
   }
   function pointer_lock_element(d){
    var _aq_ = d[cst_pointerLockElement];
    return caml_call1(caml_call1(Jv[10], function(_ar_){return _ar_;}), _aq_);
   }
   function exit_pointer_lock(d){
    var fut = next(0, pointerlockchange, d);
    d.exitPointerLock();
    return fut;
   }
   function fullscreen_available(d){
    return caml_call2(Jv[19][2], d, cst_fullscreenEnabled);
   }
   function fullscreen_element(d){
    var _ao_ = d["fullscreenElement"];
    return caml_call1(caml_call1(Jv[10], function(_ap_){return _ap_;}), _ao_);
   }
   function exit_fullscreen(d){
    var _am_ = d.exitFullscreen();
    return caml_call1(caml_call1(Fut[11], function(_an_){return 0;}), _am_);
   }
   function aborted(s){return caml_call2(Jv[19][2], s, cst_aborted);}
   var abort$0 = cst_abort, Signal = [0, aborted, abort$0];
   function controller(param){return new Jv[12]["AbortController"];}
   function signal(c){return c["signal"];}
   function abort$1(c){c.abort(); return 0;}
   var Abort = [0, Signal, controller, signal, abort$1];
   function call(c, meth, args){caml_js_meth_call(c, meth, args); return 0;}
   var c = [0, Jv[12][cst_console]];
   function get$0(param){return c[1];}
   function set$0(n){c[1] = n; return 0;}
   function clear$0(param){return call(c[1], cst_clear, [0]);}
   function msg(v){return [0, v, 0];}
   function str(v){
    return caml_call1(Jv[6], v)
            ? "null"
            : caml_call1(Jv[7], v) ? "undefined" : v.toString();
   }
   function msg_to_jv_array(msg){
    var a = caml_call1(Jv[31][1], 0), i = 0, param = msg;
    for(;;){
     if(! param) return runtime.caml_js_to_array(a);
     var vs = param[2], v = param[1];
     a[i] = v;
     var i$0 = i + 1 | 0;
     i = i$0;
     param = vs;
    }
   }
   function log(msg){
    var _al_ = msg_to_jv_array(msg);
    return call(c[1], cst_log, _al_);
   }
   function trace(msg){
    var _ak_ = msg_to_jv_array(msg);
    return call(c[1], cst_trace, _ak_);
   }
   function error$1(msg){
    var _aj_ = msg_to_jv_array(msg);
    return call(c[1], cst_error, _aj_);
   }
   function warn(msg){
    var _ai_ = msg_to_jv_array(msg);
    return call(c[1], cst_warn, _ai_);
   }
   function info(msg){
    var _ah_ = msg_to_jv_array(msg);
    return call(c[1], cst_info, _ah_);
   }
   function debug(msg){
    var _ag_ = msg_to_jv_array(msg);
    return call(c[1], cst_debug, _ag_);
   }
   function assert(b, msg){
    var _af_ = msg_to_jv_array([0, ! ! b, msg]);
    return call(c[1], cst_assert, _af_);
   }
   function dir$1(o){return call(c[1], cst_dir, [0, o]);}
   function table$1(cols, v){
    if(cols)
     var l = cols[1], msg = [0, v, runtime.caml_list_to_js_array(l)];
    else
     var msg = [0, v];
    return call(c[1], cst_table, msg);
   }
   function group_end(param){return call(c[1], cst_groupEnd, [0]);}
   function group(opt, msg){
    if(opt) var sth = opt[1], closed = sth; else var closed = 0;
    if(closed){
     var _ad_ = msg_to_jv_array(msg);
     return call(c[1], cst_groupCollapsed, _ad_);
    }
    var _ae_ = msg_to_jv_array(msg);
    return call(c[1], cst_group, _ae_);
   }
   function count(label){return call(c[1], cst_count, [0, label]);}
   function count_reset(label){return call(c[1], cst_countReset, [0, label]);}
   function time$1(label){return call(c[1], cst_time, [0, label]);}
   function time_log(label, msg){
    var _ac_ = msg_to_jv_array([0, label, msg]);
    return call(c[1], cst_timeLog, _ac_);
   }
   function time_end(label){return call(c[1], cst_timeEnd, [0, label]);}
   function profile(label){return call(c[1], cst_profile, [0, label]);}
   function profile_end(label){return call(c[1], cst_profileEnd, [0, label]);}
   function time_stamp(label){return call(c[1], cst_timeStamp$0, [0, label]);}
   function log_result(opt, _ab_, r){
    if(opt)
     var sth = opt[1], ok = sth;
    else
     var ok = function(v){return [0, v, 0];};
    if(_ab_)
     var sth$0 = _ab_[1], err = sth$0;
    else
     var err = function(e){return [0, str(e), 0];};
    if(0 === r[0]){
     var v = r[1];
     log(caml_call1(ok, v));
    }
    else{var e = r[1]; error$1(caml_call1(err, e));}
    return r;
   }
   function log_if_error(opt, _aa_, use, param){
    if(opt) var sth = opt[1], l = sth; else var l = error$1;
    if(_aa_)
     var sth$0 = _aa_[1], error_msg = sth$0;
    else
     var error_msg = function(e){return [0, str(e), 0];};
    if(0 === param[0]){var v = param[1]; return v;}
    var e = param[1];
    caml_call1(l, caml_call1(error_msg, e));
    return use;
   }
   function log_if_error$0(l, error_msg, use, r){
    return [0, log_if_error(l, error_msg, use, r)];
   }
   function as_target$0(w){return w;}
   function closed(w){return caml_call2(Jv[19][2], w, cst_closed);}
   function scroll_x$0(w){return caml_call2(Jv[21][2], w, cst_scrollX);}
   function scroll_y$0(w){return caml_call2(Jv[21][2], w, cst_scrollY);}
   function device_pixel_ratio(w){
    return caml_call2(Jv[21][2], w, cst_devicePixelRatio);
   }
   function matches_media(w, s){
    var o = w.matchMedia(s);
    return caml_call2(Jv[19][2], o, cst_matches);
   }
   function prefers_dark_color_scheme(w){
    return matches_media(w, "(prefers-color-scheme: dark)");
   }
   function open$0(opt, _Z_, w, u){
    if(opt) var sth = opt[1], features = sth; else var features = Jstr[4];
    if(_Z_) var sth$0 = _Z_[1], name = sth$0; else var name = Jstr[4];
    var ___ = w.open(u, name, features);
    return caml_call1(caml_call1(Jv[10], function(_$_){return _$_;}), ___);
   }
   function close$0(w){w.close(); return 0;}
   function print(w){w.print(); return 0;}
   function reload(w){w[cst_location$0].reload(); return 0;}
   function location$0(w){return new url(w[cst_location$0]);}
   function set_location(w, u){return w[cst_location$0] = u;}
   var
    auto$0 = cst_auto,
    manual = "manual",
    Scroll_restoration = [0, auto$0, manual];
   function length$1(h){return caml_call2(Jv[20][2], h, cst_length$3);}
   function scroll_restoration(h){
    return caml_call2(Jv[23][2], h, cst_scrollRestoration);
   }
   function set_scroll_restoration(h, r){
    return caml_call3(Jv[23][3], h, cst_scrollRestoration$0, r);
   }
   function back(h){h.back(); return 0;}
   function forward(h){h.forward(); return 0;}
   function go(h, d){h.go(d); return 0;}
   function state(h){return h[cst_state];}
   function push_state(opt, _Y_, _X_, h){
    if(opt) var sth = opt[1], state = sth; else var state = Jv[4];
    if(_Y_) var sth$0 = _Y_[1], title = sth$0; else var title = Jstr[4];
    if(_X_) var sth$1 = _X_[1], uri = sth$1; else var uri = Jv[4];
    h.pushState(state, title, uri);
    return 0;
   }
   function replace_state(opt, _W_, _V_, h){
    if(opt) var sth = opt[1], state = sth; else var state = Jv[4];
    if(_W_) var sth$0 = _W_[1], title = sth$0; else var title = Jstr[4];
    if(_V_) var sth$1 = _V_[1], uri = sth$1; else var uri = Jv[4];
    h.replaceState(state, title, uri);
    return 0;
   }
   function state$0(e){return e[cst_state];}
   var
    Popstate = [0, state$0],
    popstate = "popstate",
    Ev = [0, Popstate, popstate],
    History =
      [0,
       Scroll_restoration,
       length$1,
       scroll_restoration,
       set_scroll_restoration,
       back,
       forward,
       go,
       state,
       push_state,
       replace_state,
       Ev];
   function history(w){return w["history"];}
   var
    Window =
      [0,
       as_target$0,
       closed,
       scroll_x$0,
       scroll_y$0,
       device_pixel_ratio,
       matches_media,
       prefers_dark_color_scheme,
       open$0,
       close$0,
       print,
       reload,
       location$0,
       set_location,
       History,
       history];
   function languages(n){
    var match = caml_call2(Jv[13], n, cst_languages);
    if(match){var a = match[1]; return caml_list_of_js_array(a);}
    var match$0 = caml_call2(Jv[23][1], n, cst_language);
    if(! match$0) return 0;
    var v = match$0[1];
    return [0, v, 0];
   }
   function max_touch_points(n){
    var t = n["maxTouchPoints"];
    return caml_call1(Jv[8], t) ? 0 : t;
   }
   function online(n){return caml_call2(Jv[19][2], n, cst_onLine);}
   var
    Navigator = [0, languages, max_touch_points, online],
    frame = "frame",
    navigation = "navigation",
    resource = "resource",
    mark$1 = cst_mark,
    measure = cst_measure,
    paint = "paint",
    longtask = "longtask",
    Type$0 =
      [0, frame, navigation, resource, mark$1, measure, paint, longtask];
   function name$97(e){return caml_call2(Jv[23][2], e, cst_name$1);}
   function type$6(e){return caml_call2(Jv[23][2], e, cst_entryType);}
   function start_time(e){return caml_call2(Jv[21][2], e, cst_startTime);}
   function end_time(e){return caml_call2(Jv[21][2], e, cst_endTime);}
   function duration(e){return caml_call2(Jv[21][2], e, cst_duration);}
   function to_json(e){return e.toJSON();}
   function as_entry(_U_){return _U_;}
   function initiator_type(e){
    return caml_call2(Jv[23][2], e, cst_initiatorType);
   }
   function next_hop_protocol(e){
    return caml_call2(Jv[23][2], e, cst_nextHopProtocol);
   }
   function worker_start(e){return caml_call2(Jv[21][2], e, cst_workerStart);}
   function redirect_start(e){
    return caml_call2(Jv[21][2], e, cst_redirectStart);
   }
   function redirect_end(e){return caml_call2(Jv[21][2], e, cst_redirectEnd);}
   function fetch_start(e){return caml_call2(Jv[21][2], e, cst_fetchStart);}
   function domain_lookup_start(e){
    return caml_call2(Jv[21][2], e, cst_domainLookupStart);
   }
   function domain_lookup_end(e){
    return caml_call2(Jv[21][2], e, cst_domainLookupEnd);
   }
   function connect_start(e){
    return caml_call2(Jv[21][2], e, cst_connectStart);
   }
   function connect_end(e){return caml_call2(Jv[21][2], e, cst_connectEnd);}
   function secure_connection_start(e){
    return caml_call2(Jv[21][2], e, cst_secureConnectionStart);
   }
   function request_start(e){
    return caml_call2(Jv[21][2], e, cst_requestStart);
   }
   function response_start(e){
    return caml_call2(Jv[21][2], e, cst_responseStart);
   }
   function response_end(e){return caml_call2(Jv[21][2], e, cst_responseEnd);}
   function transfer_size(e){
    return caml_call2(Jv[20][2], e, cst_transferSize);
   }
   function encoded_body_size(e){
    return caml_call2(Jv[20][2], e, cst_encodedBodySize);
   }
   function decoded_body_size(e){
    return caml_call2(Jv[20][2], e, cst_decodedBodySize);
   }
   var
    Resource_timing =
      [0,
       as_entry,
       initiator_type,
       next_hop_protocol,
       worker_start,
       redirect_start,
       redirect_end,
       fetch_start,
       domain_lookup_start,
       domain_lookup_end,
       connect_start,
       connect_end,
       secure_connection_start,
       request_start,
       response_start,
       response_end,
       transfer_size,
       encoded_body_size,
       decoded_body_size],
    navigate = "navigate",
    reload$0 = cst_reload,
    back_forward = "back_forward",
    prerender = "prerender",
    Type$1 = [0, navigate, reload$0, back_forward, prerender];
   function as_resource_timing(_T_){return _T_;}
   function as_entry$0(_S_){return _S_;}
   function unload_event_start(e){
    return caml_call2(Jv[21][2], e, cst_unloadEventStart);
   }
   function unload_event_end(e){
    return caml_call2(Jv[21][2], e, cst_unloadEventEnd);
   }
   function dom_interactive(e){
    return caml_call2(Jv[21][2], e, cst_domInteractive);
   }
   function dom_content_loaded_event_start(e){
    return caml_call2(Jv[21][2], e, cst_domContentLoadedEventStart);
   }
   function dom_content_loaded_event_end(e){
    return caml_call2(Jv[21][2], e, cst_domContentLoadedEventEnd);
   }
   function dom_complete(e){return caml_call2(Jv[21][2], e, cst_domComplete);}
   function load_event_start(e){
    return caml_call2(Jv[21][2], e, cst_loadEventStart);
   }
   function load_event_end(e){
    return caml_call2(Jv[21][2], e, cst_loadEventEnd);
   }
   function type$7(e){return caml_call2(Jv[23][2], e, cst_type$3);}
   function redirect_count(e){
    return caml_call2(Jv[20][2], e, cst_redirectCount);
   }
   function as_resource_timing$0(_R_){return _R_;}
   function as_navigation_timing(_Q_){return _Q_;}
   function time_origin_ms(p){
    return caml_call2(Jv[21][2], p, cst_timeOrigin);
   }
   function clear_marks(p, n){
    if(n) var n$0 = n[1], args = [0, n$0]; else var args = [0];
    caml_js_meth_call(p, "clearMarks", args);
    return 0;
   }
   function clear_measures(p, n){
    if(n) var n$0 = n[1], args = [0, n$0]; else var args = [0];
    caml_js_meth_call(p, "clearMeasures", args);
    return 0;
   }
   function clear_resource_timings(p){p.clearResourceTimings(); return 0;}
   function get_entries(type, name, p){
    if(name){
     var n = name[1];
     if(type){
      var t = type[1], _I_ = p.getEntriesByName(n, t);
      return caml_call1(caml_call1(Jv[29], function(_P_){return _P_;}), _I_);
     }
     var _J_ = p.getEntriesByName(n);
     return caml_call1(caml_call1(Jv[29], function(_O_){return _O_;}), _J_);
    }
    if(type){
     var t$0 = type[1], _K_ = p.getEntriesByType(t$0);
     return caml_call1(caml_call1(Jv[29], function(_N_){return _N_;}), _K_);
    }
    var _L_ = p.getEntries();
    return caml_call1(caml_call1(Jv[29], function(_M_){return _M_;}), _L_);
   }
   function mark$2(p, n){p.mark(n); return 0;}
   function measure$0(start, stop, p, n){
    if(start){
     var s = start[1];
     if(stop){var e = stop[1]; p.measure(s, e); return 0;}
     p.measure(s);
     return 0;
    }
    if(stop){var e$0 = stop[1]; p.measure(Jv[5], e$0); return 0;}
    p.measure();
    return 0;
   }
   function now_ms(p){return p.now();}
   function to_json$0(p){return p.toJSON();}
   var
    console = Jv[12][cst_console],
    navigator = Jv[12]["navigator"],
    performance = Jv[12]["performance"],
    window = Jv[12][cst_window],
    is_secure_context = caml_call2(Jv[19][2], Jv[12], cst_isSecureContext),
    target$0 = Jv[12];
   function set_timeout(ms, f){
    return Jv[12].setTimeout(caml_js_wrap_callback_strict(1, f), ms);
   }
   function set_interval(ms, f){
    return Jv[12].setInterval(caml_js_wrap_callback_strict(1, f), ms);
   }
   function stop_timer(tid){Jv[12].clearTimeout(tid); return 0;}
   function request_animation_frame(f){
    return Jv[12].requestAnimationFrame(caml_js_wrap_callback_strict(1, f));
   }
   function cancel_animation_frame(fid){
    Jv[12].cancelAnimationFrame(fid);
    return 0;
   }
   var
    Brr =
      [0,
       [0,
        [0, create$0, byte_length, slice],
        [0,
         of_buffer,
         buffer,
         byte_offset,
         byte_length$0,
         get_int8,
         get_int16_be,
         get_int16_le,
         get_int32_be,
         get_int32_le,
         get_uint8,
         get_uint16_be,
         get_uint16_le,
         get_uint32_be,
         get_uint32_le,
         get_float32_be,
         get_float32_le,
         get_float64_be,
         get_float64_le,
         set_int8,
         set_int16_be,
         set_int16_le,
         set_int32_be,
         set_int32_le,
         set_uint8,
         set_uint16_be,
         set_uint16_le,
         set_uint32_be,
         set_uint32_le,
         set_float32_be,
         set_float32_le,
         set_float64_be,
         set_float64_le],
        type_size_in_bytes,
        create$1,
        of_buffer$0,
        buffer,
        byte_offset,
        byte_length$0,
        length$0,
        type$2,
        get,
        set,
        set_tarray,
        fill,
        copy_within,
        slice$0,
        sub,
        find,
        find_index,
        for_all,
        exists,
        filter,
        iter,
        map,
        fold_left,
        fold_right,
        reverse,
        of_tarray,
        uint8_of_buffer,
        of_int_array,
        of_float_array,
        of_jstr,
        to_jstr,
        of_binary_jstr,
        to_binary_jstr,
        to_int_jstr,
        to_hex_jstr,
        type_to_bigarray_kind,
        type_of_bigarray_kind],
       [0,
        Ending_type,
        init$0,
        of_jstr$0,
        of_array_buffer,
        byte_length$1,
        type$3,
        slice$1,
        array_buffer$0,
        stream,
        text,
        data_uri],
       [0, init$1, of_blob, name, relative_path, last_modified_ms],
       Base64,
       [0, encode$0, decode$0],
       [0,
        v,
        scheme,
        host,
        port,
        path,
        query,
        fragment,
        with_uri,
        path_segments,
        with_path_segments,
        [0,
         is_empty,
         mem,
         find$0,
         find_all,
         fold,
         of_obj,
         of_jstr$1,
         to_jstr$0,
         of_assoc,
         to_assoc],
        query_params,
        with_query_params,
        fragment_params,
        with_fragment_params,
        of_jstr$2,
        to_jstr$1,
        encode$2,
        decode$2,
        encode_component$0,
        decode_component$0],
       [0,
        Type,
        init,
        create,
        type,
        target,
        current_target,
        composed_path,
        event_phase,
        bubbles,
        stop_propagation,
        stop_immediate_propagation,
        cancelable,
        prevent_default,
        default_prevented,
        composed,
        is_trusted,
        timestamp_ms,
        dispatch,
        listen_opts,
        listen,
        unlisten,
        next,
        [0,
         Effect,
         Item,
         [0, length, add_jstr, add_file, remove, clear, caml_js_get, items],
         drop_effect,
         set_drop_effect,
         effect_allowed,
         set_effect_allowed,
         items$0],
        Clipboard,
        Composition,
        Error,
        Extendable,
        Focus,
        Hash_change,
        Input,
        Keyboard,
        Mouse,
        Drag,
        Pointer,
        Wheel,
        abort,
        activate,
        auxclick,
        beforeinput,
        beforeunload,
        blur,
        canplay,
        canplaythrough,
        change,
        click,
        clipboardchange,
        close,
        compositionend,
        compositionstart,
        compositionudpate,
        controllerchange,
        copy$0,
        cut,
        dblclick,
        dom_content_loaded,
        drag,
        dragend,
        dragenter,
        dragexit,
        dragleave,
        dragover,
        dragstart,
        drop,
        durationchange,
        emptied,
        ended,
        error$0,
        focus,
        focusin,
        focusout,
        fullscreenchange,
        fullscreenerror,
        gotpointercapture,
        hashchange,
        input,
        install,
        keydown,
        keyup,
        languagechange,
        load,
        loadeddata,
        loadedmetadata,
        loadstart,
        lostpointercapture,
        mousedown,
        mouseenter,
        mouseleave,
        mousemove,
        mouseout,
        mouseover,
        mouseup,
        open,
        paste,
        pause,
        play,
        playing,
        pointercancel,
        pointerdown,
        pointerenter,
        pointerleave,
        pointerlockchange,
        pointerlockerror,
        pointermove,
        pointerout,
        pointerover,
        pointerrawupdate,
        pointerup,
        progress,
        ratechange,
        reset,
        resize,
        scroll,
        seeked,
        seeking,
        select,
        statechange,
        stalled,
        suspend,
        timeupdate,
        unload,
        updatefound,
        visibilitychange,
        volumechange,
        waiting,
        wheel],
       [0,
        v$0,
        void$0,
        is_void,
        true$0,
        int$0,
        float$0,
        if$0,
        if_some,
        to_pair,
        add_if,
        add_if_some,
        Name,
        accesskey$0,
        action$0,
        autocomplete$0,
        autofocus$0,
        charset$0,
        checked$0,
        class$1,
        cols$0,
        content$0,
        contenteditable$0,
        defer$0,
        dir$0,
        disabled$0,
        download$0,
        draggable$0,
        for$1,
        height$1,
        hidden$0,
        href$0,
        id$1,
        lang$0,
        list$0,
        media$0,
        method$0,
        name$1,
        placeholder$0,
        rel$0,
        required$0,
        rows$0,
        selected$0,
        spellcheck$0,
        src$0,
        style$0,
        tabindex$0,
        title$0,
        type$5,
        value$0,
        wrap$0,
        width$1],
       [0,
        v$1,
        txt,
        txt$0,
        sp,
        nbsp,
        is_txt,
        is_el,
        tag_name,
        has_tag_name,
        txt_text,
        document,
        find_by_class,
        find_by_tag_name,
        find_first_by_selector,
        fold_find_by_selector,
        parent,
        children,
        set_children,
        prepend_children,
        append_children,
        previous_sibling,
        next_sibling,
        insert_siblings,
        remove$0,
        at,
        set_at,
        [0,
         bool,
         int$1,
         float$1,
         jstr,
         checked$1,
         height$2,
         id$2,
         name$2,
         title$1,
         value$1,
         width$2],
        prop,
        set_prop,
        class$2,
        set_class,
        Style,
        computed_style,
        inline_style,
        set_inline_style,
        remove_inline_style,
        inner_x,
        inner_y,
        inner_w,
        inner_h,
        bound_x,
        bound_y,
        bound_w,
        bound_h,
        scroll_x,
        scroll_y,
        scroll_w,
        scroll_h,
        scroll_into_view,
        has_focus,
        set_has_focus,
        is_locking_pointer,
        request_pointer_lock,
        Navigation_ui,
        fullscreen_opts,
        request_fullscreen,
        click$0,
        select_text,
        Input$0,
        Name$0,
        a$0,
        abbr$0,
        address$0,
        area$0,
        article$0,
        aside$0,
        audio$0,
        b$0,
        base$0,
        bdi$0,
        bdo$0,
        blockquote$0,
        body$0,
        br$0,
        button$1,
        canvas$0,
        caption$0,
        cite$0,
        code$2,
        col$0,
        colgroup$0,
        command$0,
        datalist$0,
        dd$0,
        del$0,
        details$0,
        dfn$0,
        div$0,
        dl$0,
        dt$0,
        em$0,
        embed$0,
        fieldset$0,
        figcaption$0,
        figure$0,
        footer$0,
        form$0,
        h1$0,
        h2$0,
        h3$0,
        h4$0,
        h5$0,
        h6$0,
        head$0,
        header$0,
        hgroup$0,
        hr$0,
        html$0,
        i$0,
        iframe$0,
        img$0,
        input$1,
        ins$0,
        kbd$0,
        keygen$0,
        label$0,
        legend$0,
        li$0,
        link$1,
        map$1,
        mark$0,
        menu$0,
        meta$0,
        meter$0,
        nav$0,
        noscript$0,
        object$0,
        ol$0,
        optgroup$0,
        option$0,
        output$0,
        p$0,
        function(_F_, _G_, _H_){return void_cons(_B_, _F_, _G_, _H_);},
        pre$0,
        progress$1,
        q$0,
        rp$0,
        rt$0,
        ruby$0,
        s$0,
        samp$0,
        script$0,
        section$0,
        select$1,
        small$0,
        source$0,
        span$0,
        strong$0,
        style$2,
        sub$1,
        summary$0,
        sup$0,
        table$0,
        tbody$0,
        td$0,
        textarea$0,
        tfoot$0,
        th$0,
        thead$0,
        time$0,
        title$3,
        tr$0,
        track$0,
        u$0,
        ul$0,
        var$1,
        video$0,
        wbr$0],
       [0,
        as_target,
        find_el_by_id,
        find_els_by_name,
        root,
        body$1,
        head$1,
        active_el,
        referrer,
        title$4,
        set_title,
        Visibility_state,
        visibility_state,
        pointer_lock_element,
        exit_pointer_lock,
        fullscreen_available,
        fullscreen_element,
        exit_fullscreen],
       Abort,
       [0,
        get$0,
        set$0,
        clear$0,
        msg,
        str,
        log_result,
        log_if_error,
        log_if_error$0,
        log,
        trace,
        error$1,
        warn,
        info,
        debug,
        assert,
        dir$1,
        table$1,
        group,
        group_end,
        count,
        count_reset,
        time$1,
        time_log,
        time_end,
        profile,
        profile_end,
        time_stamp],
       Window,
       Navigator,
       [0,
        [0,
         Type$0,
         name$97,
         type$6,
         start_time,
         end_time,
         duration,
         to_json,
         Resource_timing,
         [0,
          Type$1,
          as_entry$0,
          as_resource_timing,
          unload_event_start,
          unload_event_end,
          dom_interactive,
          dom_content_loaded_event_start,
          dom_content_loaded_event_end,
          dom_complete,
          load_event_start,
          load_event_end,
          type$7,
          redirect_count],
         as_resource_timing$0,
         as_navigation_timing],
        time_origin_ms,
        clear_marks,
        clear_measures,
        clear_resource_timings,
        get_entries,
        mark$2,
        measure$0,
        now_ms,
        to_json$0],
       [0,
        console,
        global_document,
        navigator,
        performance,
        window,
        target$0,
        is_secure_context,
        set_timeout,
        set_interval,
        stop_timer,
        request_animation_frame,
        cancel_animation_frame]];
   runtime.caml_register_global(774, Brr, "Brr");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Brr_io
//# unitInfo: Requires: Brr, Fut, Jstr, Jv, Stdlib__Fun, Stdlib__List, Stdlib__Option
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_File = "File",
    cst_action$3 = "action",
    cst_actions = "actions",
    cst_audio$0 = "audio",
    cst_audioBitrateMode$1 = "audioBitrateMode",
    cst_audioBitsPerSecond$1 = "audioBitsPerSecond",
    cst_autoplay$1 = "autoplay",
    cst_badge$1 = "badge",
    cst_binaryType$1 = "binaryType",
    cst_blob = "blob",
    cst_body$1 = "body",
    cst_cache$1 = "cache",
    cst_close = "close",
    cst_code$2 = "code",
    cst_controls$1 = "controls",
    cst_coords = "coords",
    cst_cors = "cors",
    cst_credentials$1 = "credentials",
    cst_crossOrigin$1 = "crossOrigin",
    cst_currentTime$1 = "currentTime",
    cst_data$0 = "data",
    cst_default = "default",
    cst_defaultMuted$1 = "defaultMuted",
    cst_defaultPlaybackRate$1 = "defaultPlaybackRate",
    cst_deviceId$0 = "deviceId",
    cst_dir$1 = "dir",
    cst_enabled$1 = "enabled",
    cst_ended$0 = "ended",
    cst_error = "error",
    cst_exact$3 = "exact",
    cst_fetch = "fetch",
    cst_formData = "formData",
    cst_groupId$0 = "groupId",
    cst_headers$1 = "headers",
    cst_icon$3 = "icon",
    cst_id$1 = "id",
    cst_ideal$3 = "ideal",
    cst_image$1 = "image",
    cst_integrity$1 = "integrity",
    cst_keepalive$1 = "keepalive",
    cst_key$0 = "key",
    cst_kind$1 = "kind",
    cst_label$1 = "label",
    cst_lang$1 = "lang",
    cst_length$1 = "length",
    cst_loop$1 = "loop",
    cst_max$5 = "max",
    cst_message$1 = "message",
    cst_method$2 = "method",
    cst_mimeType$1 = "mimeType",
    cst_min$5 = "min",
    cst_mode$1 = "mode",
    cst_muted$2 = "muted",
    cst_name$1 = "name",
    cst_pause = "pause",
    cst_paused$0 = "paused",
    cst_playbackRate$1 = "playbackRate",
    cst_preload$1 = "preload",
    cst_presentationStyle$1 = "presentationStyle",
    cst_readyState$2 = "readyState",
    cst_redirect$1 = "redirect",
    cst_referrer$1 = "referrer",
    cst_referrerPolicy$1 = "referrerPolicy",
    cst_renotify$1 = "renotify",
    cst_requireInteraction$1 = "requireInteraction",
    cst_resume = "resume",
    cst_same_origin = "same-origin",
    cst_signal = "signal",
    cst_silent$1 = "silent",
    cst_src$1 = "src",
    cst_srcObject = "srcObject",
    cst_start = "start",
    cst_status$1 = "status",
    cst_statusText$1 = "statusText",
    cst_stop = "stop",
    cst_submit = "submit",
    cst_timestamp$2 = "timestamp",
    cst_title$2 = "title",
    cst_track = "track",
    cst_url$3 = "url",
    cst_video$0 = "video",
    cst_videoBitsPerSecond$1 = "videoBitsPerSecond",
    cst_volume$1 = "volume",
    caml_js_from_bool = runtime.caml_js_from_bool,
    caml_js_meth_call = runtime.caml_js_meth_call,
    caml_js_to_bool = runtime.caml_js_to_bool,
    caml_list_of_js_array = runtime.caml_list_of_js_array,
    caml_list_to_js_array = runtime.caml_list_to_js_array,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) === 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Jv = global_data.Jv,
    Stdlib_Option = global_data.Stdlib__Option,
    Fut = global_data.Fut,
    Brr = global_data.Brr,
    Jstr = global_data.Jstr,
    Stdlib_Fun = global_data.Stdlib__Fun,
    Stdlib_List = global_data.Stdlib__List,
    unspecified = "unspecified",
    inline = "inline",
    attachment = "attachement",
    Presentation_style = [0, unspecified, inline, attachment],
    cst_presentationStyle = cst_presentationStyle$1;
   function opts(presentation_style, param){
    var o = {};
    caml_call3(Jv[23][4], o, cst_presentationStyle, presentation_style);
    return o;
   }
   var
    item = Jv[12]["ClipboardItem"],
    cst_presentationStyle$0 = cst_presentationStyle$1,
    cst_lastModified = "lastModified",
    cst_delayed = "delayed",
    cst_name = cst_name$1,
    cst_method = cst_method$2,
    cst_target = "target",
    cst_action = cst_action$3,
    cst_enctype = "enctype",
    cst_acceptCharset = "acceptCharset",
    cst_autocomplete = "autocomplete",
    cst_noValidate = "noValidate";
   function create(opts, vs){
    var o = {};
    function add_v(param){var b = param[2], t = param[1]; return o[t] = b;}
    caml_call2(Stdlib_List[17], add_v, vs);
    return new item(o);
   }
   function presentation_style(i){
    return caml_call2(Jv[23][2], i, cst_presentationStyle$0);
   }
   function last_modified_ms(i){
    return caml_call2(Jv[20][2], i, cst_lastModified);
   }
   function delayed(i){return caml_call2(Jv[19][2], i, cst_delayed);}
   function types(i){return caml_list_of_js_array(i["types"]);}
   function get_type(i, t){
    var _ca_ = i.getType(i, t);
    return caml_call1(caml_call1(Fut[11], function(_cb_){return _cb_;}), _ca_);
   }
   function of_navigator(n){return n["clipboard"];}
   function as_target(_b$_){return _b$_;}
   function read(c){
    var
     ok = caml_call1(Jv[29], function(_b__){return _b__;}),
     _b9_ = c.read();
    return caml_call1(caml_call1(Fut[11], ok), _b9_);
   }
   function read_text(c){
    var _b7_ = c.readText();
    return caml_call1(caml_call1(Fut[11], function(_b8_){return _b8_;}), _b7_);
   }
   function write(c, data){
    var
     _b4_ = c.write(caml_call2(Jv[30], function(_b6_){return _b6_;}, data));
    return caml_call1(caml_call1(Fut[11], function(_b5_){return 0;}), _b4_);
   }
   function write_text(c, data){
    var _b2_ = c.writeText(data);
    return caml_call1(caml_call1(Fut[11], function(_b3_){return 0;}), _b2_);
   }
   function of_el(e){
    if(caml_call2(Brr[9][9], Brr[9][60][37], e)) return e;
    var
     exp = "Expected form element but found: ",
     _b0_ = caml_call1(Brr[9][8], e),
     _b1_ = caml_call2(Jstr[7], exp, _b0_);
    return caml_call2(Jv[34], 0, _b1_);
   }
   function to_el(e){return e;}
   function name(f){return caml_call2(Jv[23][2], f, cst_name);}
   function method(f){return caml_call2(Jv[23][2], f, cst_method);}
   function target(f){return caml_call2(Jv[23][2], f, cst_target);}
   function action(f){return caml_call2(Jv[23][2], f, cst_action);}
   function enctype(f){return caml_call2(Jv[23][2], f, cst_enctype);}
   function accept_charset(f){
    return caml_call2(Jv[23][2], f, cst_acceptCharset);
   }
   function autocomplete(f){
    return caml_call2(Jv[23][2], f, cst_autocomplete);
   }
   function no_validate(f){return caml_call2(Jv[19][2], f, cst_noValidate);}
   function check_validity(f){return f.checkValidity() | 0;}
   function report_validity(f){return f.reportValidity() | 0;}
   function request_submit(f, el){
    if(el) var e = el[1], args = [0, e]; else var args = [0];
    caml_js_meth_call(f, "requestSubmit", args);
    return 0;
   }
   function reset(f){f.reset(); return 0;}
   function submit(f){f.submit(); return 0;}
   var formdata = Jv[12]["FormData"];
   function create$0(param){return new formdata;}
   function of_form(f){return new formdata(f);}
   function is_empty(d){
    var _bY_ = d.entries(), _bZ_ = caml_call1(Jv[35][6], _bY_);
    return caml_call1(Jv[35][1], _bZ_);
   }
   function mem(d, k){return d.has(k) | 0;}
   function has_file_entry(d){
    var it = d.entries();
    for(;;){
     var r = caml_call1(Jv[35][6], it);
     if(caml_call1(Jv[35][1], r)) return 0;
     var v = caml_call1(Jv[35][3], r)[1], _bX_ = Jv[12][cst_File];
     if(caml_call2(Jv[3], v, _bX_)) return 1;
    }
   }
   function entry_value(v){
    var _bW_ = Jv[12][cst_File];
    return caml_call2(Jv[3], v, _bW_) ? [0, 781515420, v] : [0, -976970511, v];
   }
   function find(d, k){
    var _bV_ = d.get(k);
    return caml_call1(caml_call1(Jv[10], entry_value), _bV_);
   }
   function find_all(d, k){
    var _bU_ = d.getAll(k);
    return caml_call1(caml_call1(Jv[29], entry_value), _bU_);
   }
   function fold(f, d, acc){
    function key(_bT_){return _bT_;}
    var _bS_ = d.entries();
    return caml_call5(Jv[35][8], key, entry_value, f, _bS_, acc);
   }
   function set(d, k, v){d.set(k, v); return 0;}
   function set_blob(fn, d, k, b){
    if(fn) var f = fn[1], fn$0 = f; else var fn$0 = Jv[5];
    d.set(k, b, fn$0);
    return 0;
   }
   function append(d, k, v){d.append(k, v); return 0;}
   function append_blob(fn, d, k, b){
    if(fn) var f = fn[1], fn$0 = f; else var fn$0 = Jv[5];
    d.append(k, b, fn$0);
    return 0;
   }
   function delete$0(d, k){d.delete(k); return 0;}
   function of_assoc(l){
    var d = new formdata;
    caml_call2
     (Stdlib_List[17],
      function(param){
       var v = param[2], k = param[1];
       if(781515420 <= v[1])
        var f = v[2], fn = caml_call1(Brr[3][3], f), v$0 = f;
       else
        var v$1 = v[2], fn$0 = Jv[5], fn = fn$0, v$0 = v$1;
       d.append(k, v$0, fn);
       return 0;
      },
      l);
    return d;
   }
   function to_assoc(p){
    var _bR_ = fold(function(k, v, acc){return [0, [0, k, v], acc];}, p, 0);
    return caml_call1(Stdlib_List[9], _bR_);
   }
   function of_uri_params(p){
    function add(k, v, d){append(d, k, v); return d;}
    var _bQ_ = new formdata;
    return caml_call3(Brr[6][11][5], add, p, _bQ_);
   }
   function to_uri_params(p){
    var usp = Jv[12]["URLSearchParams"];
    return new usp(p);
   }
   function form_data(e){return e[cst_formData];}
   var Data = [0, form_data], formdata$0 = "formdata";
   function submitter(e){
    var _bO_ = e["submitter"];
    return caml_call1(caml_call1(Jv[10], function(_bP_){return _bP_;}), _bO_);
   }
   var
    Submit = [0, submitter],
    submit$0 = cst_submit,
    Ev = [0, Data, formdata$0, Submit, submit$0],
    cst_bodyUsed = "bodyUsed";
   function of_jstr(_bN_){return _bN_;}
   function of_uri_params$0(_bM_){return _bM_;}
   function of_form_data(_bL_){return _bL_;}
   function of_blob(_bK_){return _bK_;}
   function of_array_buffer(_bJ_){return _bJ_;}
   function body_used(r){return caml_call2(Jv[19][2], r, cst_bodyUsed);}
   function body(r){
    var _bH_ = r[cst_body$1];
    return caml_call2(Jv[10], function(_bI_){return _bI_;}, _bH_);
   }
   function array_buffer(r){
    var _bF_ = r.arrayBuffer();
    return caml_call2(Fut[11], function(_bG_){return _bG_;}, _bF_);
   }
   function blob(r){
    var _bD_ = r.blob();
    return caml_call2(Fut[11], function(_bE_){return _bE_;}, _bD_);
   }
   function form_data$0(r){
    var _bB_ = r.formData();
    return caml_call2(Fut[11], function(_bC_){return _bC_;}, _bB_);
   }
   function json(r){
    var _bz_ = r.json();
    return caml_call2(Fut[11], function(_bA_){return _bA_;}, _bz_);
   }
   function text(r){
    var _bx_ = r.text();
    return caml_call2(Fut[11], function(_by_){return _by_;}, _bx_);
   }
   var
    Body =
      [0,
       of_jstr,
       of_uri_params$0,
       of_form_data,
       of_blob,
       of_array_buffer,
       body_used,
       body,
       array_buffer,
       blob,
       form_data$0,
       json,
       text],
    headers = Jv[12]["Headers"];
   function mem$0(h, hs){return hs.has(h) | 0;}
   function find$0(h, hs){
    var _bv_ = hs.get(h);
    return caml_call2(Jv[10], function(_bw_){return _bw_;}, _bv_);
   }
   function fold$0(f, p, acc){
    function key(_bu_){return _bu_;}
    function value(_bt_){return _bt_;}
    var _bs_ = p.entries();
    return caml_call5(Jv[35][8], key, value, f, _bs_, acc);
   }
   function of_obj(o){return new headers(o);}
   function of_assoc$0(init, l){
    if(init) var h = init[1], args = [0, h]; else var args = [0];
    var hs = runtime.caml_js_new(headers, args);
    caml_call2
     (Stdlib_List[17],
      function(param){
       var v = param[2], k = param[1];
       hs.append(k, v);
       return 0;
      },
      l);
    return hs;
   }
   function to_assoc$0(p){
    var _br_ = fold$0(function(k, v, acc){return [0, [0, k, v], acc];}, p, 0);
    return caml_call1(Stdlib_List[9], _br_);
   }
   var
    default$0 = cst_default,
    force_cache = "force-cache",
    no_cache = "no-cache",
    no_store = "no-store",
    only_if_cached = "only-if-cached",
    reload = "reload",
    Cache =
      [0, default$0, force_cache, no_cache, no_store, only_if_cached, reload],
    include = "include",
    omit = "omit",
    same_origin = cst_same_origin,
    Credentials = [0, include, omit, same_origin],
    audio = cst_audio$0,
    audioworklet = "audioworklet",
    document = "document",
    embed = "embed",
    font = "font",
    frame = "frame",
    iframe = "iframe",
    image = cst_image$1,
    manifest = "manifest",
    object = "object'",
    paintworklet = "paintworklet",
    report = "report",
    script = "script",
    sharedworker = "sharedworker",
    style = "style",
    track = cst_track,
    video = cst_video$0,
    worker = "worker",
    xslt = "xslt",
    Destination =
      [0,
       audio,
       audioworklet,
       document,
       embed,
       font,
       frame,
       iframe,
       image,
       manifest,
       object,
       paintworklet,
       report,
       script,
       sharedworker,
       style,
       track,
       video,
       worker,
       xslt],
    cors = cst_cors,
    navigate = "navigate",
    no_cors = "no-cors",
    same_origin$0 = cst_same_origin,
    Mode = [0, cors, navigate, no_cors, same_origin$0],
    error = cst_error,
    follow = "follow",
    manual = "manual",
    Redirect = [0, error, follow, manual],
    cst_cache = cst_cache$1,
    cst_credentials = cst_credentials$1,
    cst_headers = cst_headers$1,
    cst_integrity = cst_integrity$1,
    cst_keepalive = cst_keepalive$1,
    cst_method$0 = cst_method$2,
    cst_mode = cst_mode$1,
    cst_redirect = cst_redirect$1,
    cst_referrer = cst_referrer$1,
    cst_referrerPolicy = cst_referrerPolicy$1;
   function init
   (body,
    cache,
    credentials,
    headers,
    integrity,
    keepalive,
    method,
    mode,
    redirect,
    referrer,
    referrer_policy,
    signal,
    param){
    var o = {};
    o[cst_body$1] =
     caml_call3(Jv[11], Jv[5], function(_bq_){return _bq_;}, body);
    caml_call3(Jv[23][4], o, cst_cache, cache);
    caml_call3(Jv[23][4], o, cst_credentials, credentials);
    var
     _bn_ =
       caml_call2(Stdlib_Option[7], function(_bp_){return _bp_;}, headers);
    caml_call3(Jv[16], o, cst_headers, _bn_);
    caml_call3(Jv[23][4], o, cst_integrity, integrity);
    caml_call3(Jv[19][4], o, cst_keepalive, keepalive);
    caml_call3(Jv[23][4], o, cst_method$0, method);
    caml_call3(Jv[23][4], o, cst_mode, mode);
    caml_call3(Jv[23][4], o, cst_redirect, redirect);
    caml_call3(Jv[23][4], o, cst_referrer, referrer);
    caml_call3(Jv[23][4], o, cst_referrerPolicy, referrer_policy);
    o[cst_signal] =
     caml_call3(Jv[11], Jv[5], function(_bo_){return _bo_;}, signal);
    return o;
   }
   var
    request = Jv[12]["Request"],
    cst_cache$0 = cst_cache$1,
    cst_credentials$0 = cst_credentials$1,
    cst_destination = "destination",
    cst_integrity$0 = cst_integrity$1,
    cst_isHistoryNavigation = "isHistoryNavigation",
    cst_isReloadNavigation = "isReloadNavigation",
    cst_keepalive$0 = cst_keepalive$1,
    cst_method$1 = "method'",
    cst_mode$0 = cst_mode$1,
    cst_redirect$0 = cst_redirect$1,
    cst_referrer$0 = cst_referrer$1,
    cst_referrerPolicy$0 = cst_referrerPolicy$1,
    cst_url = cst_url$3;
   function v(opt, url){
    if(opt) var sth = opt[1], init = sth; else var init = {};
    return new request(url, init);
   }
   function of_request(init, r){
    if(! init) return r.clone();
    var init$0 = init[1];
    return new request(r, init$0);
   }
   function cache(r){return caml_call2(Jv[23][2], r, cst_cache$0);}
   function credentials(r){
    return caml_call2(Jv[23][2], r, cst_credentials$0);
   }
   function destination(r){return caml_call2(Jv[23][2], r, cst_destination);}
   function headers$0(r){return r[cst_headers$1];}
   function integrity(r){return caml_call2(Jv[23][2], r, cst_integrity$0);}
   function is_history_navigation(r){
    return caml_call2(Jv[19][2], r, cst_isHistoryNavigation);
   }
   function is_reload_navigation(r){
    return caml_call2(Jv[19][2], r, cst_isReloadNavigation);
   }
   function keepalive(r){return caml_call2(Jv[19][2], r, cst_keepalive$0);}
   function method$0(r){return caml_call2(Jv[23][2], r, cst_method$1);}
   function mode(r){return caml_call2(Jv[23][2], r, cst_mode$0);}
   function redirect(r){return caml_call2(Jv[23][2], r, cst_redirect$0);}
   function referrer(r){return caml_call2(Jv[23][2], r, cst_referrer$0);}
   function referrer_policy(r){
    return caml_call2(Jv[23][2], r, cst_referrerPolicy$0);
   }
   function signal(r){
    var _bl_ = r[cst_signal];
    return caml_call2(Jv[10], function(_bm_){return _bm_;}, _bl_);
   }
   function url(r){return caml_call2(Jv[23][2], r, cst_url);}
   var
    basic = "basic",
    cors$0 = cst_cors,
    default$1 = cst_default,
    error$0 = cst_error,
    opaque = "opaque",
    opaqueredirect = "opaqueredirect",
    Type = [0, basic, cors$0, default$1, error$0, opaque, opaqueredirect],
    cst_headers$0 = cst_headers$1,
    cst_status = cst_status$1,
    cst_statusText = cst_statusText$1;
   function init$0(headers, status, status_text, param){
    var
     o = {},
     _bj_ =
       caml_call2(Stdlib_Option[7], function(_bk_){return _bk_;}, headers);
    caml_call3(Jv[16], o, cst_headers$0, _bj_);
    caml_call3(Jv[20][4], o, cst_status, status);
    caml_call3(Jv[23][4], o, cst_statusText, status_text);
    return o;
   }
   var
    response = Jv[12]["Response"],
    cst_ok = "ok",
    cst_redirected = "redirected",
    cst_status$0 = cst_status$1,
    cst_statusText$0 = cst_statusText$1,
    cst_url$0 = cst_url$3,
    cst_ignoreSearch = "ignoreSearch",
    cst_ignoreMethod = "ignoreMethod",
    cst_ignoreVary = "ignoreVary",
    cst_cacheName = "cacheName";
   function v$0(opt, body, param){
    if(opt) var sth = opt[1], init = sth; else var init = {};
    var
     body$0 = caml_call3(Jv[11], Jv[4], function(_bi_){return _bi_;}, body);
    return new response(body$0, init);
   }
   function of_response(r){return r.clone();}
   function error$1(param){return response.error();}
   function redirect$0(status, url){
    if(status)
     var status$0 = status[1], args = [0, url, status$0];
    else
     var args = [0, url];
    return caml_js_meth_call(response, cst_redirect$1, args);
   }
   function headers$1(r){return r[cst_headers$1];}
   function ok(r){return caml_call2(Jv[19][2], r, cst_ok);}
   function redirected(r){return caml_call2(Jv[19][2], r, cst_redirected);}
   function status(r){return caml_call2(Jv[20][2], r, cst_status$0);}
   function status_text(r){return caml_call2(Jv[23][2], r, cst_statusText$0);}
   function url$0(r){return caml_call2(Jv[23][2], r, cst_url$0);}
   function query_opts
   (ignore_search, ignore_method, ignore_vary, cache_name, param){
    var o = {};
    caml_call3(Jv[19][4], o, cst_ignoreSearch, ignore_search);
    caml_call3(Jv[19][4], o, cst_ignoreMethod, ignore_method);
    caml_call3(Jv[19][4], o, cst_ignoreVary, ignore_vary);
    caml_call3(Jv[23][4], o, cst_cacheName, cache_name);
    return o;
   }
   function match_all(opt, c, req){
    if(opt) var sth = opt[1], query_opts = sth; else var query_opts = Jv[5];
    var
     ok = caml_call1(Jv[29], function(_bh_){return _bh_;}),
     _bg_ = c.matchAll(req, query_opts);
    return caml_call1(caml_call1(Fut[11], ok), _bg_);
   }
   function add(c, req){
    var _be_ = c.add(req);
    return caml_call1(caml_call1(Fut[11], function(_bf_){return 0;}), _be_);
   }
   function add_all(c, reqs){
    var
     _bb_ = c.addAll(caml_call2(Jv[30], function(_bd_){return _bd_;}, reqs));
    return caml_call1(caml_call1(Fut[11], function(_bc_){return 0;}), _bb_);
   }
   function put(c, req, resp){
    var _a$_ = c.put(req, resp);
    return caml_call1(caml_call1(Fut[11], function(_ba_){return 0;}), _a$_);
   }
   function delete$1(opt, c, req){
    if(opt) var sth = opt[1], query_opts = sth; else var query_opts = Jv[5];
    var _a__ = c.delete(req, query_opts);
    return caml_call1(caml_call1(Fut[11], caml_js_to_bool), _a__);
   }
   function keys(opt, _a6_, c){
    if(opt) var sth = opt[1], query_opts = sth; else var query_opts = Jv[5];
    if(_a6_) var sth$0 = _a6_[1], req = sth$0; else var req = Jv[5];
    var
     _a7_ = c.keys(req, query_opts),
     _a8_ = caml_call1(Jv[29], function(_a9_){return _a9_;});
    return caml_call1(caml_call1(Fut[11], _a8_), _a7_);
   }
   function has(s, n){
    var _a5_ = s.has(n);
    return caml_call1(caml_call1(Fut[11], caml_js_to_bool), _a5_);
   }
   function open(s, n){
    var _a3_ = s.open(n);
    return caml_call1(caml_call1(Fut[11], function(_a4_){return _a4_;}), _a3_);
   }
   function delete$2(s, n){
    var _a2_ = s.delete(n);
    return caml_call1(caml_call1(Fut[11], caml_js_to_bool), _a2_);
   }
   function keys$0(s){
    var _a1_ = s.keys();
    return caml_call1(caml_call1(Fut[11], caml_list_of_js_array), _a1_);
   }
   var
    Storage =
      [0,
       function(opt, s, req){
        if(opt)
         var sth = opt[1], query_opts = sth;
        else
         var query_opts = Jv[5];
        var
         ok = caml_call1(Jv[10], function(_a0_){return _a0_;}),
         _aZ_ = s.match(req, query_opts);
        return caml_call1(caml_call1(Fut[11], ok), _aZ_);
       },
       has,
       open,
       delete$2,
       keys$0],
    Cache$0 =
      [0,
       query_opts,
       function(opt, c, req){
        if(opt)
         var sth = opt[1], query_opts = sth;
        else
         var query_opts = Jv[5];
        var
         ok = caml_call1(Jv[10], function(_aY_){return _aY_;}),
         _aX_ = c.match(req, query_opts);
        return caml_call1(caml_call1(Fut[11], ok), _aX_);
       },
       match_all,
       add,
       add_all,
       put,
       delete$1,
       keys,
       Storage],
    fetch = cst_fetch,
    cst_clientId = "clientId",
    cst_resultingClientId = "resultingClientId",
    cst_replacesClientId = "replacesClientId";
   function as_extendable(_aW_){return _aW_;}
   function request$0(e){return e["request"];}
   function preload_response(e){
    var
     ok = caml_call1(Jv[10], function(_aV_){return _aV_;}),
     _aU_ = e["preloadReponse"];
    return caml_call1(caml_call1(Fut[11], ok), _aU_);
   }
   function client_id(e){return caml_call2(Jv[23][2], e, cst_clientId);}
   function resulting_client_id(e){
    return caml_call2(Jv[23][2], e, cst_resultingClientId);
   }
   function replaces_client_id(e){
    return caml_call2(Jv[23][2], e, cst_replacesClientId);
   }
   function handled(e){
    var _aS_ = e["handled"];
    return caml_call1(caml_call1(Fut[11], function(_aT_){return 0;}), _aS_);
   }
   function respond_with(e, fut){
    e.respondWith(caml_call2(Fut[12], function(_aR_){return _aR_;}, fut));
    return 0;
   }
   var
    Ev$0 =
      [0,
       fetch,
       as_extendable,
       request$0,
       preload_response,
       client_id,
       resulting_client_id,
       replaces_client_id,
       handled,
       respond_with],
    fetch$0 = Jv[12][cst_fetch];
   function url$1(opt, url){
    if(opt) var sth = opt[1], init = sth; else var init = {};
    var _aP_ = fetch$0(url, init);
    return caml_call1(caml_call1(Fut[11], function(_aQ_){return _aQ_;}), _aP_);
   }
   function request$1(r){
    var _aN_ = fetch$0(r);
    return caml_call1(caml_call1(Fut[11], function(_aO_){return _aO_;}), _aN_);
   }
   function caches(param){return Jv[12]["caches"];}
   var cst_code = cst_code$2, cst_message = cst_message$1;
   function code(e){return caml_call2(Jv[20][2], e, cst_code);}
   function message(e){return caml_call2(Jv[23][2], e, cst_message);}
   var
    Error = [0, 1, 2, 3, code, message],
    cst_latitude = "latitude",
    cst_longitude = "longitude",
    cst_altitude = "altitude",
    cst_accuracy = "accuracy",
    cst_altitudeAccuracy = "altitudeAccuracy",
    cst_heading = "heading",
    cst_speed = "speed",
    cst_timestamp = cst_timestamp$2,
    cst_enableHighAccuracy = "enableHighAccuracy",
    cst_timeout = "timeout",
    cst_maximumAge = "maximumAge",
    cst_exact = cst_exact$3,
    cst_ideal = cst_ideal$3;
   function latitude(p){
    var _aM_ = p[cst_coords];
    return caml_call2(Jv[21][2], _aM_, cst_latitude);
   }
   function longitude(p){
    var _aL_ = p[cst_coords];
    return caml_call2(Jv[21][2], _aL_, cst_longitude);
   }
   function altitude(p){
    var _aK_ = p[cst_coords];
    return caml_call2(Jv[21][1], _aK_, cst_altitude);
   }
   function accuracy(p){
    var _aJ_ = p[cst_coords];
    return caml_call2(Jv[21][2], _aJ_, cst_accuracy);
   }
   function altitude_accuracy(p){
    var _aI_ = p[cst_coords];
    return caml_call2(Jv[21][1], _aI_, cst_altitudeAccuracy);
   }
   function heading(p){
    var _aH_ = p[cst_coords];
    return caml_call2(Jv[21][1], _aH_, cst_heading);
   }
   function speed(p){
    var _aG_ = p[cst_coords];
    return caml_call2(Jv[21][1], _aG_, cst_speed);
   }
   function timestamp_ms(p){return caml_call2(Jv[21][2], p, cst_timestamp);}
   function of_navigator$0(n){return n["geolocation"];}
   function opts$0(high_accuracy, timeout_ms, maximum_age_ms, param){
    var o = {};
    caml_call3(Jv[19][4], o, cst_enableHighAccuracy, high_accuracy);
    caml_call3(Jv[20][4], o, cst_timeout, timeout_ms);
    caml_call3(Jv[20][4], o, cst_maximumAge, maximum_age_ms);
    return o;
   }
   function get(opts, l){
    var match = caml_call1(Fut[1], 0), set_fut = match[2], fut = match[1];
    function pos(p){return caml_call1(set_fut, [0, p]);}
    function error(e){return caml_call1(set_fut, [1, e]);}
    var
     opts$0 = caml_call3(Jv[11], Jv[5], function(_aF_){return _aF_;}, opts);
    l.getCurrentPosition(pos, error, opts$0);
    return fut;
   }
   function watch(opts, l, f){
    function pos(p){return caml_call1(f, [0, p]);}
    function error(e){return caml_call1(f, [1, e]);}
    var
     opts$0 = caml_call3(Jv[11], Jv[5], function(_aE_){return _aE_;}, opts);
    return l.watchPosition(pos, error, opts$0);
   }
   function unwatch(l, id){l.clearWatch(id); return 0;}
   function v$1(exact, ideal, param){
    var o = {};
    caml_call3(Jv[19][4], o, cst_exact, exact);
    caml_call3(Jv[19][4], o, cst_ideal, ideal);
    return o;
   }
   var
    Constraint = [0, v$1],
    Bool = [0, Constraint],
    cst_min = cst_min$5,
    cst_max = cst_max$5,
    cst_min$0 = cst_min$5,
    cst_max$0 = cst_max$5;
   function v$2(min, max, param){
    var o = {};
    caml_call3(Jv[20][4], o, cst_min, min);
    caml_call3(Jv[20][4], o, cst_max, max);
    return o;
   }
   function min(r){return caml_call2(Jv[20][1], r, cst_min$0);}
   function max(r){return caml_call2(Jv[20][1], r, cst_max$0);}
   var
    Range = [0, v$2, min, max],
    cst_min$1 = cst_min$5,
    cst_max$1 = cst_max$5,
    cst_exact$0 = cst_exact$3,
    cst_ideal$0 = cst_ideal$3;
   function v$3(min, max, exact, ideal, param){
    var o = {};
    caml_call3(Jv[20][4], o, cst_min$1, min);
    caml_call3(Jv[20][4], o, cst_max$1, max);
    caml_call3(Jv[20][4], o, cst_exact$0, exact);
    caml_call3(Jv[20][4], o, cst_ideal$0, ideal);
    return o;
   }
   var
    Constraint$0 = [0, v$3],
    Int = [0, Range, Constraint$0],
    cst_min$2 = cst_min$5,
    cst_max$2 = cst_max$5,
    cst_min$3 = cst_min$5,
    cst_max$3 = cst_max$5;
   function v$4(min, max, param){
    var o = {};
    caml_call3(Jv[21][4], o, cst_min$2, min);
    caml_call3(Jv[21][4], o, cst_max$2, max);
    return o;
   }
   function min$0(r){return caml_call2(Jv[21][1], r, cst_min$3);}
   function max$0(r){return caml_call2(Jv[21][1], r, cst_max$3);}
   var
    Range$0 = [0, v$4, min$0, max$0],
    cst_min$4 = cst_min$5,
    cst_max$4 = cst_max$5,
    cst_exact$1 = cst_exact$3,
    cst_ideal$1 = cst_ideal$3;
   function v$5(min, max, exact, ideal, param){
    var o = {};
    caml_call3(Jv[21][4], o, cst_min$4, min);
    caml_call3(Jv[21][4], o, cst_max$4, max);
    caml_call3(Jv[21][4], o, cst_exact$1, exact);
    caml_call3(Jv[21][4], o, cst_ideal$1, ideal);
    return o;
   }
   var
    Constraint$1 = [0, v$5],
    Float = [0, Range$0, Constraint$1],
    cst_exact$2 = cst_exact$3,
    cst_ideal$2 = cst_ideal$3;
   function v$6(exact, ideal, param){
    var
     o = {},
     _aC_ = caml_call2(Stdlib_Option[7], caml_list_to_js_array, exact);
    caml_call3(Jv[16], o, cst_exact$2, _aC_);
    var _aD_ = caml_call2(Stdlib_Option[7], caml_list_to_js_array, ideal);
    caml_call3(Jv[16], o, cst_ideal$2, _aD_);
    return o;
   }
   var Constraint$2 = [0, v$6], Jstr$0 = [0, Constraint$2];
   function v$7(name, param, _aB_, _aA_){
    var
     constr_of_jv = _aA_[2],
     constr_to_jv = _aA_[1],
     cap_of_jv = _aB_[2],
     cap_to_jv = _aB_[1],
     value_of_jv = param[2],
     value_to_jv = param[1];
    return [0,
            name,
            value_to_jv,
            value_of_jv,
            cap_to_jv,
            cap_of_jv,
            constr_to_jv,
            constr_of_jv];
   }
   function name$0(p){return p[1];}
   function value_to_jv(p){return p[2];}
   function value_of_jv(p){return p[3];}
   function cap_to_jv(p){return p[4];}
   function cap_of_jv(p){return p[5];}
   function constr_to_jv(p){return p[6];}
   function constr_of_jv(p){return p[7];}
   function bool(name){
    var
     value_conv = [0, caml_js_from_bool, caml_js_to_bool],
     _ax_ = caml_call1(Jv[29], caml_js_to_bool),
     cap_conv = [0, caml_call1(Jv[30], caml_js_from_bool), _ax_],
     constr_conv =
       [0, function(_az_){return _az_;}, function(_ay_){return _ay_;}];
    return v$7(name, value_conv, cap_conv, constr_conv);
   }
   function int$0(name){
    var
     value_conv =
       [0, function(_aw_){return _aw_;}, function(_av_){return _av_;}],
     cap_conv =
       [0, function(_au_){return _au_;}, function(_at_){return _at_;}],
     constr_conv =
       [0, function(_as_){return _as_;}, function(_ar_){return _ar_;}];
    return v$7(name, value_conv, cap_conv, constr_conv);
   }
   function float$0(name){
    var
     value_conv =
       [0, function(_aq_){return _aq_;}, function(_ap_){return _ap_;}],
     cap_conv =
       [0, function(_ao_){return _ao_;}, function(_an_){return _an_;}],
     constr_conv =
       [0, function(_am_){return _am_;}, function(_al_){return _al_;}];
    return v$7(name, value_conv, cap_conv, constr_conv);
   }
   function jstr(name){
    var
     value_conv =
       [0, function(_ak_){return _ak_;}, function(_aj_){return _aj_;}],
     constr_conv =
       [0, function(_ai_){return _ai_;}, function(_ah_){return _ah_;}];
    return v$7(name, value_conv, value_conv, constr_conv);
   }
   function jstr_enum(name){
    var
     value_conv =
       [0, function(_ag_){return _ag_;}, function(_af_){return _af_;}],
     cap_conv = [0, caml_list_to_js_array, caml_list_of_js_array],
     constr_conv =
       [0, function(_ae_){return _ae_;}, function(_ad_){return _ad_;}];
    return v$7(name, value_conv, cap_conv, constr_conv);
   }
   function mem$1(p, cs){
    var mem = cs[p[1]];
    return caml_call1(Jv[8], mem) ? 0 : mem | 0;
   }
   function names(cs){
    return caml_list_of_js_array(Jv[12]["Object"].keys(cs));
   }
   var Supported_constraints = [0, mem$1, names];
   function empty(param){return {};}
   function find$1(p, c){return caml_call3(Jv[38], p[7], c, p[1]);}
   function set$0(p, v, c){
    var _ac_ = caml_call1(p[6], v);
    return c[p[1]] = _ac_;
   }
   function delete$3(p, c){return delete c[p[1]];}
   var Constraints = [0, empty, find$1, set$0, delete$3];
   function find$2(p, s){return caml_call3(Jv[38], p[5], s, p[1]);}
   function set$1(p, v, s){
    var _ab_ = caml_call1(p[4], v);
    return s[p[1]] = _ab_;
   }
   function delete$4(p, s){return delete s[p[1]];}
   var Capabilities = [0, find$2, set$1, delete$4];
   function get$0(p, s){var _aa_ = s[p[1]]; return caml_call1(p[3], _aa_);}
   function find$3(p, s){return caml_call3(Jv[38], p[3], s, p[1]);}
   var
    Settings = [0, get$0, find$3],
    aspect_ratio = float$0("aspectRatio"),
    auto_gain_control = bool("autoGainControl"),
    channel_count = int$0("channelCount"),
    cursor = jstr_enum("cursor"),
    device_id = jstr(cst_deviceId$0),
    display_surface = jstr_enum("displaySurface"),
    echo_cancellation = bool("echoCancellation"),
    facing_mode = jstr_enum("facingMode"),
    frame_rate = float$0("frameRate"),
    group_id = jstr(cst_groupId$0),
    height = int$0("height"),
    latency = float$0("latency"),
    logical_surface = bool("logicalSurface"),
    noise_suppresion = bool("noiseSuppresion"),
    resize_mode = jstr_enum("resizeMode"),
    sample_rate = int$0("sampleRate"),
    sample_size = int$0("sampleSize"),
    width = int$0("width"),
    Prop =
      [0,
       aspect_ratio,
       auto_gain_control,
       channel_count,
       cursor,
       device_id,
       display_surface,
       echo_cancellation,
       facing_mode,
       frame_rate,
       group_id,
       height,
       latency,
       logical_surface,
       noise_suppresion,
       resize_mode,
       sample_rate,
       sample_size,
       width],
    live = "live",
    ended = cst_ended$0,
    State = [0, live, ended],
    audio$0 = cst_audio$0,
    video$0 = cst_video$0,
    Kind = [0, audio$0, video$0],
    cst_id = cst_id$1,
    cst_isolated = "isolated",
    cst_kind = cst_kind$1,
    cst_label = cst_label$1,
    cst_muted = cst_muted$2,
    cst_readyState = cst_readyState$2,
    cst_enabled = cst_enabled$1,
    cst_enabled$0 = cst_enabled$1;
   function id(t){return caml_call2(Jv[23][2], t, cst_id);}
   function isolated(t){return caml_call2(Jv[19][2], t, cst_isolated);}
   function kind(t){return caml_call2(Jv[23][2], t, cst_kind);}
   function label(t){return caml_call2(Jv[23][2], t, cst_label);}
   function muted(t){return caml_call2(Jv[19][2], t, cst_muted);}
   function ready_state(t){return caml_call2(Jv[23][2], t, cst_readyState);}
   function enabled(t){return caml_call2(Jv[19][2], t, cst_enabled);}
   function set_enabled(t, b){
    return caml_call3(Jv[19][3], t, cst_enabled$0, b);
   }
   function get_capabilities(t){return t.getCapabilities();}
   function get_constraints(t){return t.getConstraints();}
   function apply_constraints(t, c){
    if(c) var c$0 = c[1], a = [0, c$0]; else var a = [0];
    var
     ___ = caml_js_meth_call(t, "applyConstraints", a),
     _$_ = caml_call1(Stdlib_Fun[1], 0);
    return caml_call1(caml_call1(Fut[11], _$_), ___);
   }
   function get_settings(t){return t.getSettings();}
   function stop(t){t.stop(); return 0;}
   function clone(t){return t.clone();}
   var
    ended$0 = cst_ended$0,
    isolationchange = "isolationchange",
    mute = "mute",
    unmute = "unmute",
    cst_audio = cst_audio$0,
    cst_video = cst_video$0,
    _a_ = [0, [0, 4448519, 0]],
    _b_ = [0, [0, 4448519, 0]],
    dummy = 0;
   function track$0(p){return p[cst_track];}
   function v$8(opt, _Z_, param){
    if(opt) var sth = opt[1], audio = sth; else var audio = 17505;
    if(_Z_) var sth$0 = _Z_[1], video = sth$0; else var video = 17505;
    var o = {};
    function set_track(o, n, param){
     if(typeof param === "number") return caml_call3(Jv[19][3], o, n, 0);
     var match = param[2];
     if(! match) return caml_call3(Jv[19][3], o, n, 1);
     var c = match[1];
     o[n] = c;
    }
    set_track(o, cst_audio, audio);
    set_track(o, cst_video, video);
    return o;
   }
   function av(param){return v$8(_b_, _a_, 0);}
   var
    Constraints$0 = [0, v$8, av],
    stream = Jv[12]["MediaStream"],
    cst_id$0 = cst_id$1,
    cst_active = "active";
   function create$1(param){return new stream;}
   function of_stream(s){return new stream(s);}
   function of_tracks(ts){
    return new stream(caml_call2(Jv[30], function(_Y_){return _Y_;}, ts));
   }
   function id$0(s){return caml_call2(Jv[23][2], s, cst_id$0);}
   function active(s){return caml_call2(Jv[19][2], s, cst_active);}
   function get_audio_tracks(s){
    var _W_ = s.getAudioTracks();
    return caml_call1(caml_call1(Jv[29], function(_X_){return _X_;}), _W_);
   }
   function get_video_tracks(s){
    var _U_ = s.getVideoTracks();
    return caml_call1(caml_call1(Jv[29], function(_V_){return _V_;}), _U_);
   }
   function get_tracks(s){
    var _S_ = s.getTracks();
    return caml_call1(caml_call1(Jv[29], function(_T_){return _T_;}), _S_);
   }
   function get_track_by_id(s, id){
    var _Q_ = s.getTrackById(id);
    return caml_call1(caml_call1(Jv[10], function(_R_){return _R_;}), _Q_);
   }
   function add_track(s, t){s.addTrack(t); return 0;}
   function remove_track(s, t){s.removeTrack(t); return 0;}
   function clone$0(s){return s.clone();}
   var
    addtrack = "addtrack",
    removetrack = "removetrack",
    Ev$1 = [0, addtrack, removetrack],
    cbr = "cbr",
    vbr = "vbr",
    Bitrate_mode = [0, cbr, vbr],
    inactive = "inactive",
    recording = "recording",
    paused = cst_paused$0,
    Recording_state = [0, inactive, recording, paused],
    cst_mimeType = cst_mimeType$1,
    cst_audioBitsPerSecond = cst_audioBitsPerSecond$1,
    cst_videoBitsPerSecond = cst_videoBitsPerSecond$1,
    cst_bitsPerSecond = "bitsPerSecond",
    cst_audioBitrateMode = cst_audioBitrateMode$1;
   function init$1(type, audio_bps, video_bps, bps, audio_bitrate_mode, param){
    var o = {};
    caml_call3(Jv[23][4], o, cst_mimeType, type);
    caml_call3(Jv[20][4], o, cst_audioBitsPerSecond, audio_bps);
    caml_call3(Jv[20][4], o, cst_videoBitsPerSecond, video_bps);
    caml_call3(Jv[20][4], o, cst_bitsPerSecond, bps);
    caml_call3(Jv[23][4], o, cst_audioBitrateMode, audio_bitrate_mode);
    return o;
   }
   var
    recorder = Jv[12]["MediaRecorder"],
    cst_mimeType$0 = cst_mimeType$1,
    cst_state = "state",
    cst_videoBitsPerSecond$0 = cst_videoBitsPerSecond$1,
    cst_audioBitsPerSecond$0 = cst_audioBitsPerSecond$1,
    cst_audioBitrateMode$0 = cst_audioBitrateMode$1,
    _c_ = [0, 0],
    cst_timecode = "timecode";
   function is_type_supported(t){return recorder.isTypeSupported(t) | 0;}
   function create$2(opt, s){
    if(opt) var sth = opt[1], init = sth; else var init = {};
    return new recorder(s, init);
   }
   function stream$0(r){return r["stream"];}
   function type(r){return caml_call2(Jv[23][2], r, cst_mimeType$0);}
   function state(r){return caml_call2(Jv[23][2], r, cst_state);}
   function video_bps(r){
    return caml_call2(Jv[20][2], r, cst_videoBitsPerSecond$0);
   }
   function audio_bps(r){
    return caml_call2(Jv[20][2], r, cst_audioBitsPerSecond$0);
   }
   function audio_bitrate_mode(r){
    return caml_call2(Jv[23][2], r, cst_audioBitrateMode$0);
   }
   function start(r, ts){
    if(ts) var ms = ts[1], args = [0, ms]; else var args = [0];
    try{caml_js_meth_call(r, cst_start, args); return _c_;}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn[1] !== Jv[33]) throw caml_maybe_attach_backtrace(exn, 0);
     var e = exn[2];
     return [1, e];
    }
   }
   function stop$0(r){r.stop(); return 0;}
   function pause(r){r.pause(); return 0;}
   function resume(r){r.resume(); return 0;}
   function request_data(r){r.requestData(); return 0;}
   function data(e){return e[cst_data$0];}
   function timecode(e){return caml_call2(Jv[21][2], e, cst_timecode);}
   var Blob = [0, data, timecode];
   function error$2(e){return e[cst_error];}
   var
    Error$0 = [0, error$2],
    start$0 = cst_start,
    stop$1 = cst_stop,
    dataavailable = "dataavailable",
    pause$0 = cst_pause,
    resume$0 = cst_resume,
    error$3 = cst_error,
    Ev$2 =
      [0,
       Blob,
       Error$0,
       start$0,
       stop$1,
       dataavailable,
       pause$0,
       resume$0,
       error$3],
    audioinput = "audioinput",
    audiooutput = "audiooutput",
    videoinput = "videoinput",
    Kind$0 = [0, audioinput, audiooutput, videoinput],
    cst_deviceId = cst_deviceId$0,
    cst_kind$0 = cst_kind$1,
    cst_label$0 = cst_label$1,
    cst_groupId = cst_groupId$0;
   function device_id$0(d){return caml_call2(Jv[23][2], d, cst_deviceId);}
   function kind$0(d){return caml_call2(Jv[23][2], d, cst_kind$0);}
   function label$0(d){return caml_call2(Jv[23][2], d, cst_label$0);}
   function group_id$0(d){return caml_call2(Jv[23][2], d, cst_groupId);}
   function to_json(d){return d.toJSON();}
   var
    Info = [0, device_id$0, kind$0, label$0, group_id$0, to_json],
    Device = [0, Kind$0, Info];
   function of_navigator$1(n){return n["mediaDevices"];}
   function enumerate(m){
    var
     ok = caml_call1(Jv[29], function(_P_){return _P_;}),
     _O_ = m.enumerateDevices();
    return caml_call1(caml_call1(Fut[11], ok), _O_);
   }
   function get_supported_constraints(m){return m.getSupportedConstraints();}
   function get_user_media(m, c){
    function ok(_N_){return _N_;}
    var _M_ = m.getUserMedia(c);
    return caml_call1(caml_call1(Fut[11], ok), _M_);
   }
   function get_display_media(m, c){
    function ok(_L_){return _L_;}
    var _K_ = m.getDisplayMedia(c);
    return caml_call1(caml_call1(Fut[11], ok), _K_);
   }
   var
    devicechange = "devicechange",
    Ev$3 = [0, devicechange],
    Devices =
      [0,
       of_navigator$1,
       enumerate,
       get_supported_constraints,
       get_user_media,
       get_display_media,
       Ev$3],
    cst_code$0 = cst_code$2,
    cst_message$0 = cst_message$1;
   function code$0(e){return caml_call2(Jv[20][2], e, cst_code$0);}
   function message$0(e){return caml_call2(Jv[23][2], e, cst_message$0);}
   var
    Error$1 = [0, 1, 2, 3, 4, code$0, message$0],
    maybe = "maybe",
    probably = "probably",
    Can_play = [0, maybe, probably],
    Have = [0, 0, 1, 2, 3, 4],
    Network = [0, 0, 1, 2, 3],
    anonymous = "anonymous",
    use_credentials = "use-credentials",
    Cors = [0, anonymous, use_credentials];
   function of_media_stream(_J_){return _J_;}
   function of_blob$0(_I_){return _I_;}
   function of_media_source(_H_){return _H_;}
   var
    Provider = [0, of_media_stream, of_blob$0, of_media_source],
    List = [0],
    Audio_track = [0, List],
    List$0 = [0],
    Video_track = [0, List$0],
    Kind$1 = [0],
    List$1 = [0],
    Text_track = [0, Kind$1, List$1],
    cst_length = cst_length$1;
   function length(r){return caml_call2(Jv[20][2], r, cst_length);}
   function start$1(r, i){return r.start(i);}
   function end(r, i){return r.end(i);}
   var
    Time_ranges = [0, length, start$1, end],
    cst_src = cst_src$1,
    cst_src$0 = cst_src$1,
    cst_currentSrc = "currentSrc",
    cst_crossOrigin = cst_crossOrigin$1,
    cst_crossOrigin$0 = cst_crossOrigin$1,
    cst_networkState = "networkState",
    cst_preload = cst_preload$1,
    cst_preload$0 = cst_preload$1,
    cst_readyState$0 = cst_readyState$2,
    cst_seeking = "seeking",
    cst_currentTime = cst_currentTime$1,
    cst_currentTime$0 = cst_currentTime$1,
    cst_duration = "duration",
    cst_paused = cst_paused$0,
    cst_defaultPlaybackRate = cst_defaultPlaybackRate$1,
    cst_defaultPlaybackRate$0 = cst_defaultPlaybackRate$1,
    cst_playbackRate = cst_playbackRate$1,
    cst_playbackRate$0 = cst_playbackRate$1,
    cst_ended = cst_ended$0,
    cst_autoplay = cst_autoplay$1,
    cst_autoplay$0 = cst_autoplay$1,
    cst_loop = cst_loop$1,
    cst_loop$0 = cst_loop$1,
    cst_controls = cst_controls$1,
    cst_controls$0 = cst_controls$1,
    cst_volume = cst_volume$1,
    cst_volume$0 = cst_volume$1,
    cst_muted$0 = cst_muted$2,
    cst_muted$1 = cst_muted$2,
    cst_defaultMuted = cst_defaultMuted$1,
    cst_defaultMuted$0 = cst_defaultMuted$1;
   function of_el$0(e){
    if(caml_call2(Brr[9][9], Brr[9][60][107], e)) return e;
    if(caml_call2(Brr[9][9], Brr[9][60][7], e)) return e;
    var
     exp = "Expected audio or video element but found: ",
     _F_ = caml_call1(Brr[9][8], e),
     _G_ = caml_call2(Jstr[7], exp, _F_);
    return caml_call2(Jv[34], 0, _G_);
   }
   function to_el$0(_E_){return _E_;}
   function error$4(m){
    var _C_ = m[cst_error];
    return caml_call2(Jv[10], function(_D_){return _D_;}, _C_);
   }
   function src(m){return caml_call2(Jv[23][2], m, cst_src);}
   function set_src(m, s){return caml_call3(Jv[23][3], m, cst_src$0, s);}
   function src_object(m){
    var _A_ = m[cst_srcObject];
    return caml_call2(Jv[10], function(_B_){return _B_;}, _A_);
   }
   function set_src_object(m, o){
    return m[cst_srcObject] =
            caml_call3(Jv[11], Jv[4], function(_z_){return _z_;}, o);
   }
   function current_src(m){return caml_call2(Jv[23][2], m, cst_currentSrc);}
   function cross_origin(m){return caml_call2(Jv[23][2], m, cst_crossOrigin);}
   function set_cross_origin(m, c){
    return caml_call3(Jv[23][3], m, cst_crossOrigin$0, c);
   }
   function network_state(m){
    return caml_call2(Jv[20][2], m, cst_networkState);
   }
   function preload(m){return caml_call2(Jv[23][2], m, cst_preload);}
   function set_preload(m, p){
    return caml_call3(Jv[23][3], m, cst_preload$0, p);
   }
   function buffered(m){return m["buffered"];}
   function load(m){m.load(); return 0;}
   function can_play_type(m, t){return m.canPlayType(t);}
   function ready_state$0(m){
    return caml_call2(Jv[20][2], m, cst_readyState$0);
   }
   function seeking(m){return caml_call2(Jv[19][2], m, cst_seeking);}
   function current_time_s(m){
    return caml_call2(Jv[21][2], m, cst_currentTime);
   }
   function set_current_time_s(m, t){
    return caml_call3(Jv[21][3], m, cst_currentTime$0, t);
   }
   function fast_seek_s(m, t){m.fastSeek(t); return 0;}
   function duration_s(m){return caml_call2(Jv[21][2], m, cst_duration);}
   function paused$0(m){return caml_call2(Jv[19][2], m, cst_paused);}
   function default_playback_rate(m){
    return caml_call2(Jv[21][2], m, cst_defaultPlaybackRate);
   }
   function set_default_playback_rate(m, r){
    return caml_call3(Jv[21][3], m, cst_defaultPlaybackRate$0, r);
   }
   function playback_rate(m){
    return caml_call2(Jv[21][2], m, cst_playbackRate);
   }
   function set_playback_rate(m, r){
    return caml_call3(Jv[21][3], m, cst_playbackRate$0, r);
   }
   function played(m){return m["played"];}
   function seekable(m){return m["seekable"];}
   function ended$1(m){return caml_call2(Jv[19][2], m, cst_ended);}
   function autoplay(m){return caml_call2(Jv[19][2], m, cst_autoplay);}
   function set_auto_play(m, b){
    return caml_call3(Jv[19][3], m, cst_autoplay$0, b);
   }
   function loop(m){return caml_call2(Jv[19][2], m, cst_loop);}
   function set_loop(m, b){return caml_call3(Jv[19][3], m, cst_loop$0, b);}
   function play(m){
    var _x_ = m.play();
    return caml_call2(Fut[11], function(_y_){return 0;}, _x_);
   }
   function pause$1(m){m.pause(); return 0;}
   function controls(m){return caml_call2(Jv[19][2], m, cst_controls);}
   function set_controls(m, b){
    return caml_call3(Jv[19][3], m, cst_controls$0, b);
   }
   function volume(m){return caml_call2(Jv[21][2], m, cst_volume);}
   function set_volume(m, f){
    return caml_call3(Jv[21][3], m, cst_volume$0, f);
   }
   function muted$0(m){return caml_call2(Jv[19][2], m, cst_muted$0);}
   function set_muted(m, b){return caml_call3(Jv[19][3], m, cst_muted$1, b);}
   function default_muted(m){
    return caml_call2(Jv[19][2], m, cst_defaultMuted);
   }
   function set_default_muted(m, b){
    return caml_call3(Jv[19][3], m, cst_defaultMuted$0, b);
   }
   function audio_track_list(m){return m["audioTracks"];}
   function video_track_list(m){return m["videoTracks"];}
   function text_track_list(m){return m["textTracks"];}
   function capture_stream(m){return m.captureStream();}
   var
    El =
      [0,
       Error$1,
       Can_play,
       Have,
       Network,
       Cors,
       Provider,
       Audio_track,
       Video_track,
       Text_track,
       Time_ranges,
       of_el$0,
       to_el$0,
       error$4,
       src,
       set_src,
       src_object,
       set_src_object,
       current_src,
       cross_origin,
       set_cross_origin,
       network_state,
       preload,
       set_preload,
       buffered,
       load,
       can_play_type,
       ready_state$0,
       seeking,
       current_time_s,
       set_current_time_s,
       fast_seek_s,
       duration_s,
       paused$0,
       default_playback_rate,
       set_default_playback_rate,
       playback_rate,
       set_playback_rate,
       played,
       seekable,
       ended$1,
       autoplay,
       set_auto_play,
       loop,
       set_loop,
       play,
       pause$1,
       controls,
       set_controls,
       volume,
       set_volume,
       muted$0,
       set_muted,
       default_muted,
       set_default_muted,
       audio_track_list,
       video_track_list,
       text_track_list,
       capture_stream],
    cst_targetOrigin = "targetOrigin",
    cst_transfer = "transfer";
   function transfer(_w_){return _w_;}
   function opts$1(target_origin, transfer, param){
    var o = {};
    caml_call3(Jv[23][4], o, cst_targetOrigin, target_origin);
    var _v_ = caml_call2(Stdlib_Option[7], caml_list_to_js_array, transfer);
    caml_call3(Jv[16], o, cst_transfer, _v_);
    return o;
   }
   function start$2(p){p.start(); return 0;}
   function close(p){p.close(); return 0;}
   function post(opt, p, v){
    if(opt) var sth = opt[1], opts = sth; else var opts = Jv[5];
    p.postMessage(v, opts);
    return 0;
   }
   var Port = [0, start$2, close, post], channel = Jv[12]["MessageChannel"];
   function create$3(param){return new channel;}
   function port1(c){return c["port1"];}
   function port2(c){return c["port2"];}
   var broadcast = Jv[12]["BroadcastChannel"], cst_name$0 = cst_name$1;
   function create$4(n){return new broadcast(n);}
   function name$1(b){return caml_call2(Jv[23][2], b, cst_name$0);}
   function close$0(b){b.close(); return 0;}
   function post$0(b, v){b.postMessage(v); return 0;}
   function window_post(opt, w, v){
    if(opt) var sth = opt[1], opts = sth; else var opts = Jv[5];
    w.postMessage(v, opts);
    return 0;
   }
   var
    message$1 = cst_message$1,
    messageerror = "messageerror",
    cst_origin = "origin",
    cst_lastEventId = "lastEventId";
   function as_extendable$0(_u_){return _u_;}
   function data$0(e){return e[cst_data$0];}
   function origin(e){return caml_call2(Jv[23][2], e, cst_origin);}
   function last_event_id(e){
    return caml_call2(Jv[23][2], e, cst_lastEventId);
   }
   function source(e){
    var _s_ = e["source"];
    return caml_call2(Jv[10], function(_t_){return _t_;}, _s_);
   }
   function ports(e){
    var _q_ = e["ports"];
    return caml_call2(Jv[29], function(_r_){return _r_;}, _q_);
   }
   var
    default$2 = cst_default,
    denied = "denied",
    granted = "granted",
    Permission = [0, default$2, denied, granted],
    notification = Jv[12]["Notification"],
    cst_permission = "permission";
   function permission(param){
    return caml_call2(Jv[23][2], notification, cst_permission);
   }
   function request_permission(param){
    var _o_ = notification.requestPermission();
    return caml_call1(caml_call1(Fut[11], function(_p_){return _p_;}), _o_);
   }
   var
    auto = "auto",
    ltr = "ltr",
    rtl = "rtl",
    Direction = [0, auto, ltr, rtl],
    cst_maxActions = "maxActions",
    cst_action$0 = cst_action$3,
    cst_title = cst_title$2,
    cst_icon = cst_icon$3,
    cst_action$1 = cst_action$3,
    cst_title$0 = cst_title$2,
    cst_icon$0 = cst_icon$3;
   function max$1(param){
    return caml_call2(Jv[20][2], notification, cst_maxActions);
   }
   function v$9(icon, action, title, param){
    var o = {};
    caml_call3(Jv[23][3], o, cst_action$0, action);
    caml_call3(Jv[23][3], o, cst_title, title);
    caml_call3(Jv[23][4], o, cst_icon, icon);
    return o;
   }
   function action$0(a){return caml_call2(Jv[23][2], a, cst_action$1);}
   function title(a){return caml_call2(Jv[23][2], a, cst_title$0);}
   function icon(a){return caml_call2(Jv[23][1], a, cst_icon$0);}
   var
    Action = [0, max$1, v$9, action$0, title, icon],
    cst_dir = cst_dir$1,
    cst_lang = cst_lang$1,
    cst_body = cst_body$1,
    cst_image = cst_image$1,
    cst_icon$1 = cst_icon$3,
    cst_badge = cst_badge$1,
    cst_timestamp$0 = cst_timestamp$2,
    cst_renotify = cst_renotify$1,
    cst_silent = cst_silent$1,
    cst_requireInteraction = cst_requireInteraction$1,
    cst_data = cst_data$0,
    cst_badge$0 = cst_badge$1,
    cst_body$0 = cst_body$1,
    cst_dir$0 = cst_dir$1,
    cst_lang$0 = cst_lang$1,
    cst_tag = "tag",
    cst_icon$2 = cst_icon$3,
    cst_image$0 = cst_image$1,
    cst_renotify$0 = cst_renotify$1,
    cst_requireInteraction$0 = cst_requireInteraction$1,
    cst_silent$0 = cst_silent$1,
    cst_timestamp$1 = cst_timestamp$2,
    cst_title$1 = cst_title$2;
   function opts$2
   (dir,
    lang,
    body,
    tag,
    image,
    icon,
    badge,
    timestamp_ms,
    renotify,
    silent,
    require_interaction,
    data,
    opt,
    param){
    if(opt) var sth = opt[1], actions = sth; else var actions = 0;
    var o = {};
    caml_call3(Jv[23][4], o, cst_dir, dir);
    caml_call3(Jv[23][4], o, cst_lang, lang);
    caml_call3(Jv[23][4], o, cst_body, body);
    caml_call3(Jv[23][4], o, cst_image, image);
    caml_call3(Jv[23][4], o, cst_icon$1, icon);
    caml_call3(Jv[23][4], o, cst_badge, badge);
    caml_call3(Jv[20][4], o, cst_timestamp$0, timestamp_ms);
    caml_call3(Jv[19][4], o, cst_renotify, renotify);
    caml_call3(Jv[19][4], o, cst_silent, silent);
    caml_call3(Jv[19][4], o, cst_requireInteraction, require_interaction);
    var _l_ = caml_call2(Stdlib_Option[7], function(_n_){return _n_;}, data);
    caml_call3(Jv[16], o, cst_data, _l_);
    o[cst_actions] = caml_call2(Jv[30], function(_m_){return _m_;}, actions);
    return o;
   }
   function create$5(opt, title){
    if(opt) var sth = opt[1], opts = sth; else var opts = Jv[5];
    return new notification(title, opts);
   }
   function close$1(n){n.close(); return 0;}
   function actions(n){
    var _j_ = n[cst_actions];
    return caml_call2(Jv[29], function(_k_){return _k_;}, _j_);
   }
   function badge(n){return caml_call2(Jv[23][2], n, cst_badge$0);}
   function body$0(n){return caml_call2(Jv[23][2], n, cst_body$0);}
   function data$1(n){return n[cst_data$0];}
   function dir(n){return caml_call2(Jv[23][2], n, cst_dir$0);}
   function lang(n){return caml_call2(Jv[23][2], n, cst_lang$0);}
   function tag(n){return caml_call2(Jv[23][2], n, cst_tag);}
   function icon$0(n){return caml_call2(Jv[23][2], n, cst_icon$2);}
   function image$0(n){return caml_call2(Jv[23][2], n, cst_image$0);}
   function renotify(n){return caml_call2(Jv[19][2], n, cst_renotify$0);}
   function require_interaction(n){
    return caml_call2(Jv[19][2], n, cst_requireInteraction$0);
   }
   function silent(n){return caml_call2(Jv[19][2], n, cst_silent$0);}
   function timestamp_ms$0(n){
    return caml_call2(Jv[20][2], n, cst_timestamp$1);
   }
   function title$0(n){return caml_call2(Jv[23][2], n, cst_title$1);}
   var
    notificationclick = "notificationclick",
    notificationclose = "notificationclose",
    cst_action$2 = cst_action$3,
    cst_length$0 = cst_length$1,
    _d_ = [0, 0];
   function as_extendable$1(_i_){return _i_;}
   function notification$0(e){return e["notification"];}
   function action$1(e){return caml_call2(Jv[23][2], e, cst_action$2);}
   function local(w){return w["localStorage"];}
   function session(w){return w["sessionStorage"];}
   function length$0(s){return caml_call2(Jv[20][2], s, cst_length$0);}
   function key(s, i){
    var _g_ = s.key(i);
    return caml_call1(caml_call1(Jv[10], function(_h_){return _h_;}), _g_);
   }
   function get_item(s, k){
    var _e_ = s.getItem(k);
    return caml_call1(caml_call1(Jv[10], function(_f_){return _f_;}), _e_);
   }
   function set_item(s, k, v){
    try{s.setItem(k, v); return _d_;}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn[1] !== Jv[33]) throw caml_maybe_attach_backtrace(exn, 0);
     var e = exn[2];
     return [1, e];
    }
   }
   function remove_item(s, k){s.removeItem(k); return 0;}
   function clear(s){s.clear(); return 0;}
   var
    storage = "storage",
    cst_key = cst_key$0,
    cst_oldValue = "oldValue",
    cst_newValue = "newValue",
    cst_url$1 = cst_url$3,
    cst_storageArea = "storageArea";
   function key$0(e){return caml_call2(Jv[23][1], e, cst_key);}
   function old_value(e){return caml_call2(Jv[23][1], e, cst_oldValue);}
   function new_value(e){return caml_call2(Jv[23][1], e, cst_newValue);}
   function url$2(e){return caml_call2(Jv[23][2], e, cst_url$1);}
   function storage_area(e){return caml_call2(Jv[13], e, cst_storageArea);}
   var
    blob$0 = cst_blob,
    arraybuffer = "arraybuffer",
    Binary_type = [0, blob$0, arraybuffer],
    Ready_state = [0, 0, 1, 2, 3],
    websocket = Jv[12]["WebSocket"],
    cst_binaryType = cst_binaryType$1,
    cst_binaryType$0 = cst_binaryType$1,
    cst_url$2 = cst_url$3,
    cst_readyState$1 = cst_readyState$2,
    cst_bufferedAmount = "bufferedAmount",
    cst_extensions = "extensions",
    cst_protocol = "protocol",
    cst_wasClean = "wasClean",
    cst_code$1 = cst_code$2,
    cst_reason = "reason";
   function create$6(protocols, url){
    if(protocols)
     var ps = protocols[1], protocols$0 = caml_list_to_js_array(ps);
    else
     var protocols$0 = Jv[5];
    return new websocket(url, protocols$0);
   }
   function binary_type(s){return caml_call2(Jv[23][2], s, cst_binaryType);}
   function set_binary_type(s, t){
    return caml_call3(Jv[23][3], s, cst_binaryType$0, t);
   }
   function close$2(code, r, s){
    if(code) var c = code[1], code$0 = c; else var code$0 = Jv[5];
    if(r) var s$0 = r[1], reason = s$0; else var reason = Jv[5];
    s.close(code$0, reason);
    return 0;
   }
   function url$3(s){return caml_call2(Jv[23][2], s, cst_url$2);}
   function ready_state$1(s){
    return caml_call2(Jv[20][2], s, cst_readyState$1);
   }
   function buffered_amount(s){
    return caml_call2(Jv[20][2], s, cst_bufferedAmount);
   }
   function extensions(s){return caml_call2(Jv[23][2], s, cst_extensions);}
   function protocol(s){return caml_call2(Jv[23][2], s, cst_protocol);}
   function send_string(s, d){s.send(d); return 0;}
   function send_blob(s, d){s.send(d); return 0;}
   function send_tarray(s, d){s.send(d); return 0;}
   function send_array_buffer(s, d){s.send(d); return 0;}
   function was_clean(e){return caml_call2(Jv[19][2], e, cst_wasClean);}
   function code$1(e){return caml_call2(Jv[20][2], e, cst_code$1);}
   function reason(e){return caml_call2(Jv[23][2], e, cst_reason);}
   var
    Close = [0, was_clean, code$1, reason],
    close$3 = cst_close,
    Ev$4 = [0, Close, close$3],
    Brr_io =
      [0,
       [0,
        [0,
         Presentation_style,
         opts,
         create,
         presentation_style,
         last_modified_ms,
         delayed,
         types,
         get_type],
        of_navigator,
        as_target,
        read,
        read_text,
        write,
        write_text],
       [0,
        of_el,
        to_el,
        name,
        method,
        target,
        action,
        enctype,
        accept_charset,
        autocomplete,
        no_validate,
        check_validity,
        report_validity,
        request_submit,
        reset,
        submit,
        [0,
         create$0,
         of_form,
         is_empty,
         has_file_entry,
         mem,
         find,
         find_all,
         fold,
         set,
         set_blob,
         append,
         append_blob,
         delete$0,
         of_assoc,
         to_assoc,
         of_uri_params,
         to_uri_params],
        Ev],
       [0,
        Body,
        [0, mem$0, find$0, fold$0, of_obj, of_assoc$0, to_assoc$0],
        [0,
         Cache,
         Credentials,
         Destination,
         Mode,
         Redirect,
         init,
         v,
         of_request,
         cache,
         credentials,
         destination,
         headers$0,
         integrity,
         is_history_navigation,
         is_reload_navigation,
         keepalive,
         method$0,
         mode,
         redirect,
         referrer,
         referrer_policy,
         signal,
         url],
        [0,
         Type,
         init$0,
         v$0,
         of_response,
         error$1,
         redirect$0,
         headers$1,
         ok,
         redirected,
         status,
         status_text,
         url$0],
        Cache$0,
        Ev$0,
        url$1,
        request$1,
        caches],
       [0,
        Error,
        [0,
         latitude,
         longitude,
         accuracy,
         altitude,
         altitude_accuracy,
         heading,
         speed,
         timestamp_ms],
        opts$0,
        of_navigator$0,
        get,
        watch,
        unwatch],
       [0,
        [0,
         Bool,
         Int,
         Float,
         Jstr$0,
         bool,
         int$0,
         float$0,
         jstr,
         jstr_enum,
         v$7,
         name$0,
         value_of_jv,
         value_to_jv,
         cap_of_jv,
         cap_to_jv,
         constr_of_jv,
         constr_to_jv],
        Supported_constraints,
        Constraints,
        Capabilities,
        Settings,
        [0,
         State,
         Kind,
         Prop,
         id,
         isolated,
         kind,
         label,
         muted,
         ready_state,
         enabled,
         set_enabled,
         get_capabilities,
         get_constraints,
         apply_constraints,
         get_settings,
         stop,
         clone,
         [0, track$0, ended$0, isolationchange, mute, unmute]],
        [0,
         Constraints$0,
         create$1,
         of_stream,
         of_tracks,
         id$0,
         active,
         get_audio_tracks,
         get_video_tracks,
         get_tracks,
         get_track_by_id,
         add_track,
         remove_track,
         clone$0,
         Ev$1],
        [0,
         Bitrate_mode,
         Recording_state,
         is_type_supported,
         init$1,
         create$2,
         stream$0,
         type,
         state,
         video_bps,
         audio_bps,
         audio_bitrate_mode,
         start,
         stop$0,
         pause,
         resume,
         request_data,
         Ev$2],
        Device,
        Devices,
        El],
       [0,
        transfer,
        opts$1,
        Port,
        [0, create$3, port1, port2],
        [0, create$4, name$1, close$0, post$0],
        window_post,
        [0,
         as_extendable$0,
         data$0,
         origin,
         last_event_id,
         source,
         ports,
         message$1,
         messageerror]],
       [0,
        Permission,
        permission,
        request_permission,
        Direction,
        Action,
        opts$2,
        create$5,
        close$1,
        actions,
        badge,
        body$0,
        data$1,
        dir,
        lang,
        tag,
        icon$0,
        image$0,
        renotify,
        require_interaction,
        silent,
        timestamp_ms$0,
        title$0,
        [0,
         as_extendable$1,
         notification$0,
         action$1,
         notificationclick,
         notificationclose]],
       [0,
        local,
        session,
        length$0,
        key,
        get_item,
        set_item,
        remove_item,
        clear,
        [0, key$0, old_value, new_value, url$2, storage_area, storage]],
       [0,
        Binary_type,
        Ready_state,
        create$6,
        binary_type,
        set_binary_type,
        close$2,
        url$3,
        ready_state$1,
        buffered_amount,
        extensions,
        protocol,
        send_string,
        send_blob,
        send_array_buffer,
        send_tarray,
        Ev$4]];
   runtime.caml_register_global(479, Brr_io, "Brr_io");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Brr_canvas
//# unitInfo: Requires: Brr, Fut, Jstr, Jv, Stdlib, Stdlib__Float, Stdlib__List, Stdlib__Option
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_alpha$2 = "alpha",
    cst_antialias$1 = "antialias",
    cst_canvas$1 = "canvas",
    cst_clear = "clear",
    cst_colorSpace$2 = "colorSpace",
    cst_depth$1 = "depth",
    cst_desynchronized$2 = "desynchronized",
    cst_direction$1 = "direction",
    cst_filter$1 = "filter",
    cst_font$1 = "font",
    cst_globalAlpha$1 = "globalAlpha",
    cst_globalCompositeOperation$1 = "globalCompositeOperation",
    cst_height$3 = "height",
    cst_imageSmoothingEnabled$1 = "imageSmoothingEnabled",
    cst_imageSmoothingQuality$1 = "imageSmoothingQuality",
    cst_lineCap$1 = "lineCap",
    cst_lineDashOffset$1 = "lineDashOffset",
    cst_lineJoin$1 = "lineJoin",
    cst_lineWidth$1 = "lineWidth",
    cst_miterLimit$1 = "miterLimit",
    cst_multiply = "multiply",
    cst_powerPreference$1 = "powerPreference",
    cst_premultipliedApha$1 = "premultipliedApha",
    cst_preserveDrawingBuffer$1 = "preserveDrawingBuffer",
    cst_quality$1 = "quality",
    cst_round = "round",
    cst_shadowBlur$1 = "shadowBlur",
    cst_shadowColor$1 = "shadowColor",
    cst_shadowOffsetX$1 = "shadowOffsetX",
    cst_shadowOffsetY$1 = "shadowOffsetY",
    cst_stencil$1 = "stencil",
    cst_textAlign$1 = "textAlign",
    cst_textBaseline$1 = "textBaseline",
    cst_type$1 = "type",
    cst_width$4 = "width",
    caml_js_meth_call = runtime.caml_js_meth_call,
    caml_list_of_js_array = runtime.caml_list_of_js_array,
    caml_list_to_js_array = runtime.caml_list_to_js_array,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Jv = global_data.Jv,
    Jstr = global_data.Jstr,
    Stdlib_Option = global_data.Stdlib__Option,
    Stdlib_List = global_data.Stdlib__List,
    Fut = global_data.Fut,
    Brr = global_data.Brr,
    cst_is2D = "is2D",
    cst_isIdentity = "isIdentity",
    cst_m11 = "m11",
    cst_m12 = "m12",
    cst_m13 = "m13",
    cst_m14 = "m14",
    cst_m21 = "m21",
    cst_m22 = "m22",
    cst_m23 = "m23",
    cst_m24 = "m24",
    cst_m31 = "m31",
    cst_m32 = "m32",
    cst_m33 = "m33",
    cst_m34 = "m34",
    cst_m41 = "m41",
    cst_m42 = "m42",
    cst_m43 = "m43",
    cst_m44 = "m44",
    cst_a = "a",
    cst_b = "b",
    cst_c = "c",
    cst_d = "d",
    cst_e = "e",
    cst_f = "f";
   function is_2d(m){return caml_call2(Jv[19][2], m, cst_is2D);}
   function is_identity(m){return caml_call2(Jv[19][2], m, cst_isIdentity);}
   function inverse(m){return m.inverse();}
   function multiply(m$0, m){return m$0.multiply(m);}
   function m11(m){return caml_call2(Jv[21][2], m, cst_m11);}
   function m12(m){return caml_call2(Jv[21][2], m, cst_m12);}
   function m13(m){return caml_call2(Jv[21][2], m, cst_m13);}
   function m14(m){return caml_call2(Jv[21][2], m, cst_m14);}
   function m21(m){return caml_call2(Jv[21][2], m, cst_m21);}
   function m22(m){return caml_call2(Jv[21][2], m, cst_m22);}
   function m23(m){return caml_call2(Jv[21][2], m, cst_m23);}
   function m24(m){return caml_call2(Jv[21][2], m, cst_m24);}
   function m31(m){return caml_call2(Jv[21][2], m, cst_m31);}
   function m32(m){return caml_call2(Jv[21][2], m, cst_m32);}
   function m33(m){return caml_call2(Jv[21][2], m, cst_m33);}
   function m34(m){return caml_call2(Jv[21][2], m, cst_m34);}
   function m41(m){return caml_call2(Jv[21][2], m, cst_m41);}
   function m42(m){return caml_call2(Jv[21][2], m, cst_m42);}
   function m43(m){return caml_call2(Jv[21][2], m, cst_m43);}
   function m44(m){return caml_call2(Jv[21][2], m, cst_m44);}
   function a(m){return caml_call2(Jv[21][2], m, cst_a);}
   function b(m){return caml_call2(Jv[21][2], m, cst_b);}
   function c(m){return caml_call2(Jv[21][2], m, cst_c);}
   function d(m){return caml_call2(Jv[21][2], m, cst_d);}
   function e(m){return caml_call2(Jv[21][2], m, cst_e);}
   function f(m){return caml_call2(Jv[21][2], m, cst_f);}
   var dommatrixro = Jv[12]["DOMMatrixReadOnly"];
   function to_float32_array(m){return m.toFloat32Array();}
   function of_float32_array(a){return dommatrixro.fromFloat32Array(a);}
   function to_float64_array(m){return m.toFloat64Array();}
   function of_float64_array(a){return dommatrixro.fromFloat64Array(a);}
   var
    v4 = Jv[12]["DOMPointReadOnly"],
    cst_x = "x",
    cst_y = "y",
    cst_z = "z",
    cst_w = "w",
    cst_width = cst_width$4,
    cst_height = cst_height$3,
    cst_width$0 = cst_width$4,
    cst_height$0 = cst_height$3,
    cst_width$1 = cst_width$4,
    cst_height$1 = cst_height$3,
    cst_type = cst_type$1,
    cst_quality = cst_quality$1,
    cst_quality$0 = cst_quality$1,
    cst_toDataURL = "toDataURL",
    cst_toBlob = "toBlob";
   function v(x, y, z, w){return new v4(x, y, z, w);}
   function tr(m, v){return v.matrixTransform(m);}
   function to_json(v){return v.toJSON();}
   function x(v){return caml_call2(Jv[21][2], v, cst_x);}
   function y(v){return caml_call2(Jv[21][2], v, cst_y);}
   function z(v){return caml_call2(Jv[21][2], v, cst_z);}
   function w(v){return caml_call2(Jv[21][2], v, cst_w);}
   function create(d, at, opt, _X_, cs){
    if(opt) var sth = opt[1], w = sth; else var w = 0;
    if(_X_) var sth$0 = _X_[1], h = sth$0; else var h = 0;
    var c = caml_call3(Brr[9][76], d, at, cs);
    caml_call3(Jv[20][3], c, cst_width, w);
    caml_call3(Jv[20][3], c, cst_height, h);
    return c;
   }
   function of_el(e){
    if(caml_call2(Brr[9][9], Brr[9][60][16], e)) return e;
    var
     exp = "Expected canvas element but found: ",
     _V_ = caml_call1(Brr[9][8], e),
     _W_ = caml_call2(Jstr[7], exp, _V_);
    return caml_call2(Jv[34], 0, _W_);
   }
   function to_el(_U_){return _U_;}
   function w$0(c){return caml_call2(Jv[20][2], c, cst_width$0);}
   function h(c){return caml_call2(Jv[20][2], c, cst_height$0);}
   function set_w(c, w){return caml_call3(Jv[20][3], c, cst_width$1, w);}
   function set_h(c, h){return caml_call3(Jv[20][3], c, cst_height$1, h);}
   function set_size_to_layout_size(opt, c){
    if(opt) var sth = opt[1], hidpi = sth; else var hidpi = 1;
    var
     dpr = hidpi ? caml_call1(Brr[13][5], Brr[16][5]) : 1.,
     cw = Math.ceil(dpr * caml_call1(Brr[9][39], c)) | 0,
     ch = Math.ceil(dpr * caml_call1(Brr[9][40], c)) | 0,
     _S_ = w$0(c) !== cw ? 1 : 0,
     _T_ = _S_ || (h(c) !== ch ? 1 : 0);
    return _T_ ? (set_w(c, cw), set_h(c, ch)) : _T_;
   }
   function image_encode(opt, quality, param){
    if(opt) var sth = opt[1], type = sth; else var type = "image/png";
    var o = {};
    caml_call3(Jv[23][3], o, cst_type, type);
    caml_call3(Jv[21][4], o, cst_quality, quality);
    return o;
   }
   function enc(encode, c, meth, arg){
    if(encode)
     var e = encode[1], encode$0 = e;
    else
     var encode$0 = image_encode(0, 0, 0);
    var
     t = encode$0[cst_type$1],
     q = caml_call2(Jv[13], encode$0, cst_quality$0);
    if(arg){
     var a = arg[1];
     if(q) var q$0 = q[1], _R_ = [0, a, t, q$0]; else var _R_ = [0, a, t];
     var args = _R_;
    }
    else if(q) var q$1 = q[1], args = [0, t, q$1]; else var args = [0, t];
    return caml_js_meth_call(c, meth, args);
   }
   function to_data_url(encode, c){
    try{var v = enc(0, c, cst_toDataURL, 0);}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn[1] !== Jv[33]) throw caml_maybe_attach_backtrace(exn, 0);
     var e = exn[2];
     return [1, e];
    }
    return [0, v];
   }
   function to_blob(encode, c){
    var match = caml_call1(Fut[1], 0), set = match[2], fut = match[1];
    function cb(blob){
     return caml_call1
             (set, [0, caml_call2(Jv[10], function(_Q_){return _Q_;}, blob)]);
    }
    try{
     enc(0, c, cst_toBlob, [0, runtime.caml_js_wrap_callback_strict(1, cb)]);
     return fut;
    }
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn[1] !== Jv[33]) throw caml_maybe_attach_backtrace(exn, 0);
     var e = exn[2];
     caml_call1(set, [1, e]);
     return fut;
    }
   }
   function capture_stream(hz, c){
    if(hz) var hz$0 = hz[1], args = [0, hz$0]; else var args = [0];
    return caml_js_meth_call(c, "captureStrseam", args);
   }
   var
    nonzero = "nonzero",
    evenodd = "evenodd",
    Fill_rule = [0, nonzero, evenodd],
    low = "low",
    medium = "medium",
    high = "high",
    Image_smoothing_quality = [0, low, medium, high],
    butt = "butt",
    round = cst_round,
    square = "square",
    Line_cap = [0, butt, round, square],
    round$0 = cst_round,
    bevel = "bevel",
    miter = "miter",
    Line_join = [0, round$0, bevel, miter],
    start = "start",
    end = "end",
    left = "left",
    right = "right",
    center = "center",
    Text_align = [0, start, end, left, right, center],
    top = "top",
    hanging = "hanging",
    middle = "middle",
    alphabetic = "alphabetic",
    ideographic = "ideographic",
    bottom = "bottom",
    Text_baseline = [0, top, hanging, middle, alphabetic, ideographic, bottom],
    ltr = "ltr",
    rtl = "rtl",
    inherit = "inherit",
    Text_direction = [0, ltr, rtl, inherit],
    normal = "normal",
    multiply$0 = cst_multiply,
    screen = "screen",
    overlay = "overlay",
    darken = "darken",
    lighten = "lighten",
    color_dodge = "color-dodge",
    color_burn = "color-burn",
    hard_light = "hard-light",
    soft_light = "soft-light",
    difference = "difference",
    exclusion = "exclusion",
    hue = "hue",
    saturation = "saturation",
    color = "color",
    luminosity = "luminosity",
    clear = cst_clear,
    copy = "copy",
    source_over = "source-over",
    destination_over = "destination-over",
    source_in = "source-in",
    destination_in = "destination-in",
    source_out = "source-out",
    destination_out = "destination-out",
    source_atop = "source-atop",
    destination_atop = "destination-atop",
    xor = "xor",
    lighter = "lighter",
    plus_darker = "plus-darker",
    plus_lighter = "plus-lighter",
    Composite_op =
      [0,
       normal,
       multiply$0,
       screen,
       overlay,
       darken,
       lighten,
       color_dodge,
       color_burn,
       hard_light,
       soft_light,
       difference,
       exclusion,
       hue,
       saturation,
       color,
       luminosity,
       clear,
       copy,
       source_over,
       destination_over,
       source_in,
       destination_in,
       source_out,
       destination_out,
       source_atop,
       destination_atop,
       xor,
       lighter,
       plus_darker,
       plus_lighter],
    xy = "repeat",
    x$0 = "repeat-x",
    y$0 = "repeat-y",
    no = "no-repeat",
    Repeat = [0, xy, x$0, y$0, no],
    path = Jv[12]["Path2D"],
    cst_alpha = cst_alpha$2,
    cst_colorSpace = cst_colorSpace$2,
    cst_desynchronized = cst_desynchronized$2,
    cst_willReadFrequently = "willReadFrequently",
    cst_2d = "2d",
    cst_canvas = cst_canvas$1,
    cst_imageSmoothingEnabled = cst_imageSmoothingEnabled$1,
    cst_imageSmoothingEnabled$0 = cst_imageSmoothingEnabled$1,
    cst_imageSmoothingQuality = cst_imageSmoothingQuality$1,
    cst_imageSmoothingQuality$0 = cst_imageSmoothingQuality$1,
    cst_globalAlpha = cst_globalAlpha$1,
    cst_globalAlpha$0 = cst_globalAlpha$1,
    cst_globalCompositeOperation = cst_globalCompositeOperation$1,
    cst_globalCompositeOperation$0 = cst_globalCompositeOperation$1,
    cst_filter = cst_filter$1,
    cst_filter$0 = cst_filter$1,
    cst_lineWidth = cst_lineWidth$1,
    cst_lineWidth$0 = cst_lineWidth$1,
    cst_lineCap = cst_lineCap$1,
    cst_lineCap$0 = cst_lineCap$1,
    cst_lineJoin = cst_lineJoin$1,
    cst_lineJoin$0 = cst_lineJoin$1,
    cst_miterLimit = cst_miterLimit$1,
    cst_miterLimit$0 = cst_miterLimit$1,
    cst_lineDashOffset = cst_lineDashOffset$1,
    cst_lineDashOffset$0 = cst_lineDashOffset$1,
    cst_shadowBlur = cst_shadowBlur$1,
    cst_shadowBlur$0 = cst_shadowBlur$1,
    cst_shadowOffsetX = cst_shadowOffsetX$1,
    cst_shadowOffsetX$0 = cst_shadowOffsetX$1,
    cst_shadowOffsetY = cst_shadowOffsetY$1,
    cst_shadowOffsetY$0 = cst_shadowOffsetY$1,
    cst_shadowColor = cst_shadowColor$1,
    cst_shadowColor$0 = cst_shadowColor$1,
    cst_font = cst_font$1,
    cst_font$0 = cst_font$1,
    cst_textAlign = cst_textAlign$1,
    cst_textAlign$0 = cst_textAlign$1,
    cst_textBaseline = cst_textBaseline$1,
    cst_textBaseline$0 = cst_textBaseline$1,
    cst_direction = cst_direction$1,
    cst_direction$0 = cst_direction$1,
    cst_fillText = "fillText",
    cst_strokeText = "strokeText",
    cst_width$2 = cst_width$4,
    cst_actualBoundingBoxLeft = "actualBoundingBoxLeft",
    cst_actualBoundingBoxRight = "actualBoundingBoxRight",
    cst_fontBoundingBoxAscent = "fontBoundingBoxAscent",
    cst_fontBoundingBoxDescent = "fontBoundingBoxDescent",
    cst_actualBoundingBoxAscent = "actualBoundingBoxAscent",
    cst_actualBoundingBoxDescent = "actualBoundingBoxDescent",
    cst_emHeightAscent = "emHeightAscent",
    cst_emHeightDescent = "emHeightDescent",
    cst_hangingBaseline = "hangingBaseline",
    cst_alphabeticBaseline = "alphabeticBaseline",
    cst_ideographicBaseline = "ideographicBaseline";
   function create$0(param){return new path;}
   function of_svg(svg){return new path(svg);}
   function of_path(p){return new path(p);}
   function add(tr, p$0, p){
    if(tr) var t = tr[1], _P_ = [0, p, t]; else var _P_ = [0, p];
    caml_js_meth_call(p$0, "addPath", _P_);
    return 0;
   }
   function close(p){p.closePath(); return 0;}
   function move_to(p, x, y){p.moveTo(x, y); return 0;}
   function line_to(p, x, y){p.lineTo(x, y); return 0;}
   function qcurve_to(p, cx, cy, x, y){
    p.quadraticCurveTo(cx, cy, x, y);
    return 0;
   }
   function ccurve_to(p, cx$0, cy$0, cx, cy, x, y){
    p.bezierCurveTo(cx$0, cy$0, cx, cy, x, y);
    return 0;
   }
   function arc_to(p, cx$0, cy$0, cx, cy, r){
    p.arcTo(cx$0, cy$0, cx, cy, r);
    return 0;
   }
   function arc(opt, p, cx, cy, r, start, stop){
    if(opt) var sth = opt[1], anticlockwise = sth; else var anticlockwise = 0;
    p.arc(cx, cy, r, start, stop, ! ! anticlockwise);
    return 0;
   }
   function rect(p, x, y, w, h){p.rect(x, y, w, h); return 0;}
   function ellipse(opt, p, cx, cy, rx, ry, rot, start, stop){
    if(opt) var sth = opt[1], anticlockwise = sth; else var anticlockwise = 0;
    p.ellipse(cx, cy, rx, ry, rot, start, stop, ! ! anticlockwise);
    return 0;
   }
   function image_src_of_el(_O_){return _O_;}
   function image_src_of_jv(_N_){return _N_;}
   function attrs_alpha(o){return caml_call2(Jv[19][2], o, cst_alpha);}
   function attrs_color_space(o){
    var _L_ = Jstr[4], _M_ = caml_call2(Jv[23][1], o, cst_colorSpace);
    return caml_call2(Stdlib_Option[3], _M_, _L_);
   }
   function attrs_desynchronized(o){
    return caml_call2(Jv[19][2], o, cst_desynchronized);
   }
   function attrs_will_read_frequently(o){
    return caml_call2(Jv[19][2], o, cst_willReadFrequently);
   }
   function get_context(opt, cnv){
    if(opt) var sth = opt[1], attrs = sth; else var attrs = Jv[5];
    return cnv.getContext(caml_call1(Jv[24], cst_2d), attrs);
   }
   function canvas(c){
    return caml_call3(Jv[14], function(_K_){return _K_;}, c, cst_canvas);
   }
   function attrs(c){return c.getContextAttributes();}
   function save(c){c.save(); return 0;}
   function restore(c){c.restore(); return 0;}
   function image_smoothing_enabled(c){
    return caml_call2(Jv[19][2], c, cst_imageSmoothingEnabled);
   }
   function set_image_smoothing_enabled(c, b){
    return caml_call3(Jv[19][3], c, cst_imageSmoothingEnabled$0, b);
   }
   function image_smoothing_quality(c){
    return caml_call2(Jv[23][2], c, cst_imageSmoothingQuality);
   }
   function set_image_smoothing_quality(c, v){
    return caml_call3(Jv[23][3], c, cst_imageSmoothingQuality$0, v);
   }
   function global_alpha(c){return caml_call2(Jv[21][2], c, cst_globalAlpha);}
   function set_global_alpha(c, a){
    return caml_call3(Jv[21][3], c, cst_globalAlpha$0, a);
   }
   function global_composite_op(c){
    return caml_call2(Jv[23][2], c, cst_globalCompositeOperation);
   }
   function set_global_composite_op(c, o){
    return caml_call3(Jv[23][3], c, cst_globalCompositeOperation$0, o);
   }
   function filter(c){return caml_call2(Jv[23][2], c, cst_filter);}
   function set_filter(c, f){
    return caml_call3(Jv[23][3], c, cst_filter$0, f);
   }
   function get_transform(c){return c.getTransform();}
   function set_transform(c, m){c.setTransform(m); return 0;}
   function set_transform$0(ctx, a, b, c, d, e, f){ctx.setTransform(a, b, c, d, e, f); return 0;
   }
   function reset_transform(c){c.resetTransform(); return 0;}
   function transform(c$0, m){
    var _F_ = f(m), _G_ = e(m), _H_ = d(m), _I_ = c(m), _J_ = b(m);
    c$0.transform(a(m), _J_, _I_, _H_, _G_, _F_);
    return 0;
   }
   function transform$0(ctx, a, b, c, d, e, f){ctx.transform(a, b, c, d, e, f); return 0;
   }
   function translate(c, x, y){c.translate(x, y); return 0;}
   function rotate(c, r){c.rotate(r); return 0;}
   function scale(c, sx, sy){c.scale(sx, sy); return 0;}
   function set_stroke_style(c, s){return c["strokeStyle"] = s;}
   function set_fill_style(c, s){return c["fillStyle"] = s;}
   function color$0(_E_){return _E_;}
   function gradient_style(_D_){return _D_;}
   function make_stops(g, stops){
    return caml_call2
            (Stdlib_List[17],
             function(param){
              var c = param[2], off = param[1];
              g.addColorStop(off, c);
              return 0;
             },
             stops);
   }
   function linear_gradient(c, x0, y0, x1, y1, stops){
    var g = c.createLinearGradient(x0, y0, x1, y1);
    make_stops(g, stops);
    return g;
   }
   function radial_gradient(c, x0, y0, r0, x1, y1, r1, stops){
    var g = c.createRadialGradient(x0, y0, r0, x1, y1, r1);
    make_stops(g, stops);
    return g;
   }
   function pattern(c, img, r, tr){
    var p = c.createPattern(img, r);
    if(! tr) return p;
    var t = tr[1];
    p.setTransform(t);
    return p;
   }
   function pattern_style(_C_){return _C_;}
   function line_width(c){return caml_call2(Jv[21][2], c, cst_lineWidth);}
   function set_line_width(c, w){
    return caml_call3(Jv[21][3], c, cst_lineWidth$0, w);
   }
   function line_cap(c){return caml_call2(Jv[23][2], c, cst_lineCap);}
   function set_line_cap(c, cap){
    return caml_call3(Jv[23][3], c, cst_lineCap$0, cap);
   }
   function line_join(c){return caml_call2(Jv[23][2], c, cst_lineJoin);}
   function set_line_join(c, join){
    return caml_call3(Jv[23][3], c, cst_lineJoin$0, join);
   }
   function miter_limit(c){return caml_call2(Jv[21][2], c, cst_miterLimit);}
   function set_miter_limit(c, l){
    return caml_call3(Jv[21][3], c, cst_miterLimit$0, l);
   }
   function line_dash(c){
    var _A_ = c.getLineDash();
    return caml_call1(caml_call1(Jv[29], function(_B_){return _B_;}), _A_);
   }
   function set_line_dash(c, ds){
    c.setLineDash(caml_call2(Jv[30], function(_z_){return _z_;}, ds));
    return 0;
   }
   function line_dash_offset(c){
    return caml_call2(Jv[21][2], c, cst_lineDashOffset);
   }
   function set_line_dash_offset(c, o){
    return caml_call3(Jv[21][3], c, cst_lineDashOffset$0, o);
   }
   function shadow_blur(c){return caml_call2(Jv[21][2], c, cst_shadowBlur);}
   function set_shadow_blur(c, b){
    return caml_call3(Jv[21][3], c, cst_shadowBlur$0, b);
   }
   function shadow_offset_x(c){
    return caml_call2(Jv[21][2], c, cst_shadowOffsetX);
   }
   function set_shadow_offset_x(c, o){
    return caml_call3(Jv[21][3], c, cst_shadowOffsetX$0, o);
   }
   function shadow_offset_y(c){
    return caml_call2(Jv[21][2], c, cst_shadowOffsetY);
   }
   function set_shadow_offset_y(c, o){
    return caml_call3(Jv[21][3], c, cst_shadowOffsetY$0, o);
   }
   function shadow_color(c){return caml_call2(Jv[23][2], c, cst_shadowColor);}
   function set_shadow_color(c, col){
    return caml_call3(Jv[23][3], c, cst_shadowColor$0, col);
   }
   function font(c){return caml_call2(Jv[23][2], c, cst_font);}
   function set_font(c, f){return caml_call3(Jv[23][3], c, cst_font$0, f);}
   function text_align(c){return caml_call2(Jv[23][2], c, cst_textAlign);}
   function set_text_align(c, a){
    return caml_call3(Jv[23][3], c, cst_textAlign$0, a);
   }
   function text_baseline(c){
    return caml_call2(Jv[23][2], c, cst_textBaseline);
   }
   function set_text_baseline(c, b){
    return caml_call3(Jv[23][3], c, cst_textBaseline$0, b);
   }
   function text_direction(c){return caml_call2(Jv[23][2], c, cst_direction);}
   function set_text_direction(c, d){
    return caml_call3(Jv[23][3], c, cst_direction$0, d);
   }
   function clear_rect(c, x, y, w, h){c.clearRect(x, y, w, h); return 0;}
   function fill_rect(c, x, y, w, h){c.fillRect(x, y, w, h); return 0;}
   function stroke_rect(c, x, y, w, h){c.strokeRect(x, y, w, h); return 0;}
   function fill(opt, c, p){
    if(opt)
     var sth = opt[1], fill_rule = sth;
    else
     var fill_rule = Fill_rule[1];
    c.fill(p, fill_rule);
    return 0;
   }
   function stroke(c, p){c.stroke(p); return 0;}
   function clip(opt, c, p){
    if(opt)
     var sth = opt[1], fill_rule = sth;
    else
     var fill_rule = Fill_rule[1];
    c.clip(p, fill_rule);
    return 0;
   }
   function draw_focus_if_needed(c, p, e){c.drawFocusIfNeeded(p, e); return 0;
   }
   function scroll_path_into_view(c, p){c.scrollPathIntoView(p); return 0;}
   function is_point_in_fill(opt, c, p, x, y){
    if(opt)
     var sth = opt[1], fill_rule = sth;
    else
     var fill_rule = Fill_rule[1];
    return c.isPointInPath(p, x, y, fill_rule) | 0;
   }
   function is_point_in_stroke(c, p, x, y){return c.isPointInStroke(p, x, y) | 0;
   }
   function call_text(c, meth, max_width, txt, x, y){
    if(max_width)
     var m = max_width[1], args = [0, txt, x, y, m];
    else
     var args = [0, txt, x, y];
    caml_js_meth_call(c, meth, args);
    return 0;
   }
   function fill_text(max_width, c, txt, x, y){
    return call_text(c, cst_fillText, max_width, txt, x, y);
   }
   function stroke_text(max_width, c, txt, x, y){
    return call_text(c, cst_strokeText, max_width, txt, x, y);
   }
   function width(m){return caml_call2(Jv[21][2], m, cst_width$2);}
   function actual_bounding_box_left(m){
    return caml_call2(Jv[21][2], m, cst_actualBoundingBoxLeft);
   }
   function actual_bounding_box_right(m){
    return caml_call2(Jv[21][2], m, cst_actualBoundingBoxRight);
   }
   function font_bounding_box_ascent(m){
    return caml_call2(Jv[21][2], m, cst_fontBoundingBoxAscent);
   }
   function font_bounding_box_descent(m){
    return caml_call2(Jv[21][2], m, cst_fontBoundingBoxDescent);
   }
   function actual_bounding_box_ascent(m){
    return caml_call2(Jv[21][2], m, cst_actualBoundingBoxAscent);
   }
   function actual_bounding_box_descent(m){
    return caml_call2(Jv[21][2], m, cst_actualBoundingBoxDescent);
   }
   function em_height_ascent(m){
    return caml_call2(Jv[21][2], m, cst_emHeightAscent);
   }
   function em_height_descent(m){
    return caml_call2(Jv[21][2], m, cst_emHeightDescent);
   }
   function hanging_baseline(m){
    return caml_call2(Jv[21][2], m, cst_hangingBaseline);
   }
   function alphabetic_baseline(m){
    return caml_call2(Jv[21][2], m, cst_alphabeticBaseline);
   }
   function ideographic_baseline(m){
    return caml_call2(Jv[21][2], m, cst_ideographicBaseline);
   }
   var
    Text_metrics =
      [0,
       width,
       actual_bounding_box_left,
       actual_bounding_box_right,
       font_bounding_box_ascent,
       font_bounding_box_descent,
       actual_bounding_box_ascent,
       actual_bounding_box_descent,
       em_height_ascent,
       em_height_descent,
       hanging_baseline,
       alphabetic_baseline,
       ideographic_baseline],
    cst_colorSpace$0 = cst_colorSpace$2;
   function measure_text(c, txt){return c.measureText(txt);}
   function draw_image(c, i, x, y){c.drawImage(i, x, y); return 0;}
   function draw_image_in_rect(c, i, x, y, w, h){c.drawImage(i, x, y, w, h); return 0;
   }
   function draw_sub_image_in_rect(c, i, sx, sy, sw, sh, x, y, w, h){c.drawImage(i, sx, sy, sw, sh, x, y, w, h); return 0;
   }
   function settings(color_space, param){
    if(! color_space) return Jv[5];
    var cs = color_space[1], o = {};
    caml_call3(Jv[23][3], o, cst_colorSpace$0, cs);
    return o;
   }
   var
    image_data = Jv[12]["ImageData"],
    cst_width$3 = cst_width$4,
    cst_height$2 = cst_height$3,
    cst_colorSpace$1 = cst_colorSpace$2;
   function create$1(color_space, data, w, h, param){
    var settings$0 = settings(color_space, 0);
    if(data)
     var data$0 = data[1], args = [0, data$0, w, h, settings$0];
    else
     var args = [0, w, h, settings$0];
    return runtime.caml_js_new(image_data, args);
   }
   function w$1(d){return caml_call2(Jv[20][2], d, cst_width$3);}
   function h$0(d){return caml_call2(Jv[20][2], d, cst_height$2);}
   function color_space(d){
    var _x_ = Jstr[4], _y_ = caml_call2(Jv[23][1], d, cst_colorSpace$1);
    return caml_call2(Stdlib_Option[3], _y_, _x_);
   }
   function data(d){return d["data"];}
   function create_image_data(color_space, c, w, h){
    var settings$0 = settings(color_space, 0);
    return c.createImageData(w, h, settings$0);
   }
   function get_image_data(color_space, c, x, y, w, h){
    var settings$0 = settings(color_space, 0);
    return c.getImageData(x, y, w, h, settings$0);
   }
   function put_image_data(c, d, x, y){c.putImageData(d, x, y); return 0;}
   function put_sub_image_data(c, d, sx, sy, sw, sh, x, y){c.putImageData(d, x, y, sx, sy, sw, sh); return 0;
   }
   var
    default$0 = "default",
    high_performance = "high-performance",
    low_power = "low-power",
    Power_preference = [0, default$0, high_performance, low_power],
    cst_alpha$0 = cst_alpha$2,
    cst_depth = cst_depth$1,
    cst_stencil = cst_stencil$1,
    cst_antialias = cst_antialias$1,
    cst_premultipliedApha = cst_premultipliedApha$1,
    cst_preserveDrawingBuffer = cst_preserveDrawingBuffer$1,
    cst_powerPreference = cst_powerPreference$1,
    cst_failIfMajorPerformanceCave = "failIfMajorPerformanceCaveat",
    cst_desynchronized$0 = cst_desynchronized$2,
    cst_alpha$1 = cst_alpha$2,
    cst_depth$0 = cst_depth$1,
    cst_stencil$0 = cst_stencil$1,
    cst_antialias$0 = cst_antialias$1,
    cst_premultipliedApha$0 = cst_premultipliedApha$1,
    cst_preserveDrawingBuffer$0 = cst_preserveDrawingBuffer$1,
    cst_powerPreference$0 = cst_powerPreference$1,
    cst_desynchronized$1 = cst_desynchronized$2,
    cst_webgl = "webgl",
    cst_webgl2 = "webgl2",
    cst_canvas$0 = cst_canvas$1,
    cst_drawingBufferWidth = "drawingBufferWidth",
    cst_drawingBufferHeight = "drawingBufferHeight",
    cst_isContextLost = "isContextLost",
    cst_size = "size",
    cst_type$0 = cst_type$1,
    cst_name = "name";
   function v$0
   (alpha,
    depth,
    stencil,
    antialias,
    premultiplied_alpha,
    preserve_drawing_buffer,
    power_preference,
    fail_if_major_performance_cave,
    desynchronized,
    param){
    var o = {};
    caml_call3(Jv[19][4], o, cst_alpha$0, alpha);
    caml_call3(Jv[19][4], o, cst_depth, depth);
    caml_call3(Jv[19][4], o, cst_stencil, stencil);
    caml_call3(Jv[19][4], o, cst_antialias, antialias);
    caml_call3(Jv[19][4], o, cst_premultipliedApha, premultiplied_alpha);
    caml_call3
     (Jv[19][4], o, cst_preserveDrawingBuffer, preserve_drawing_buffer);
    caml_call3(Jv[23][4], o, cst_powerPreference, power_preference);
    caml_call3
     (Jv[19][4],
      o,
      cst_failIfMajorPerformanceCave,
      fail_if_major_performance_cave);
    caml_call3(Jv[19][4], o, cst_desynchronized$0, desynchronized);
    return o;
   }
   function alpha(a){return caml_call2(Jv[19][2], a, cst_alpha$1);}
   function depth(a){return caml_call2(Jv[19][2], a, cst_depth$0);}
   function stencil(a){return caml_call2(Jv[19][2], a, cst_stencil$0);}
   function antialias(a){return caml_call2(Jv[19][2], a, cst_antialias$0);}
   function premultiplied_alpha(a){
    return caml_call2(Jv[19][2], a, cst_premultipliedApha$0);
   }
   function preserve_drawing_buffer(a){
    return caml_call2(Jv[19][2], a, cst_preserveDrawingBuffer$0);
   }
   function power_preference(a){
    return caml_call2(Jv[23][2], a, cst_powerPreference$0);
   }
   function desynchronized(a){
    return caml_call2(Jv[19][2], a, cst_desynchronized$1);
   }
   function get_context$0(opt, _t_, cnv){
    if(opt) var sth = opt[1], attrs = sth; else var attrs = Jv[5];
    if(_t_) var sth$0 = _t_[1], v1 = sth$0; else var v1 = 0;
    var
     _u_ = v1 ? cst_webgl : cst_webgl2,
     webgl = caml_call1(Jv[24], _u_),
     _v_ = cnv.getContext(webgl, attrs);
    return caml_call1(caml_call1(Jv[10], function(_w_){return _w_;}), _v_);
   }
   function canvas$0(c){
    return caml_call3(Jv[14], function(_s_){return _s_;}, c, cst_canvas$0);
   }
   function attrs$0(c){return c.getContextAttributes();}
   function drawing_buffer_width(c){
    return caml_call2(Jv[20][2], c, cst_drawingBufferWidth);
   }
   function drawing_buffer_height(c){
    return caml_call2(Jv[20][2], c, cst_drawingBufferHeight);
   }
   function is_context_lost(c){
    return caml_call2(Jv[19][2], c, cst_isContextLost);
   }
   function get_supported_extensions(c){
    return caml_list_of_js_array(c.getSupportedExtensions());
   }
   function get_extension(c, ext){return c.getExtension(ext);}
   function size(i){return caml_call2(Jv[20][2], i, cst_size);}
   function type(i){return caml_call2(Jv[20][2], i, cst_type$0);}
   function name(i){return caml_call2(Jv[23][2], i, cst_name);}
   var
    Active_info = [0, size, type, name],
    cst_rangeMin = "rangeMin",
    cst_rangeMax = "rangeMax",
    cst_precision = "precision";
   function range_min(f){return caml_call2(Jv[20][2], f, cst_rangeMin);}
   function range_max(f){return caml_call2(Jv[20][2], f, cst_rangeMax);}
   function precision(f){return caml_call2(Jv[20][2], f, cst_precision);}
   var Shader_precision_format = [0, range_min, range_max, precision];
   function of_image_data(_r_){return _r_;}
   function of_img_el(_q_){return _q_;}
   function of_canvas_el(_p_){return _p_;}
   function of_video_el(_o_){return _o_;}
   function of_offscreen_canvas(_n_){return _n_;}
   var
    Tex_image_source =
      [0,
       of_image_data,
       of_img_el,
       of_canvas_el,
       of_video_el,
       of_offscreen_canvas];
   function active_texture(c, texture){c.activeTexture(texture); return 0;}
   function attach_shader(c, program, shader){
    c.attachShader(program, shader);
    return 0;
   }
   function begin_query(c, target, query){
    c.beginQuery(target, query);
    return 0;
   }
   function begin_transform_feedback(c, primitiveMode){c.beginTransformFeedback(primitiveMode); return 0;
   }
   function bind_attrib_location(c, program, index, name){c.bindAttribLocation(program, index, name); return 0;
   }
   function bind_buffer(c, target, buffer){
    c.bindBuffer
     (target, caml_call3(Jv[11], Jv[4], function(_m_){return _m_;}, buffer));
    return 0;
   }
   function bind_buffer_base(c, target, index, buffer){c.bindBufferBase(target, index, buffer); return 0;
   }
   function bind_buffer_range(c, target, index, buffer, offset, size){c.bindBufferRange(target, index, buffer, offset, size); return 0;
   }
   function bind_framebuffer(c, target, framebuffer){
    c.bindFramebuffer
     (target,
      caml_call3(Jv[11], Jv[4], function(_l_){return _l_;}, framebuffer));
    return 0;
   }
   function bind_renderbuffer(c, target, renderbuffer){
    c.bindRenderbuffer
     (target,
      caml_call3(Jv[11], Jv[4], function(_k_){return _k_;}, renderbuffer));
    return 0;
   }
   function bind_sampler(c, unit, sampler){
    c.bindSampler
     (unit, caml_call3(Jv[11], Jv[4], function(_j_){return _j_;}, sampler));
    return 0;
   }
   function bind_texture(c, target, texture){
    c.bindTexture
     (target, caml_call3(Jv[11], Jv[4], function(_i_){return _i_;}, texture));
    return 0;
   }
   function bind_transform_feedback(c, target, tf){
    c.bindTransformFeedback
     (target, caml_call3(Jv[11], Jv[4], function(_h_){return _h_;}, tf));
    return 0;
   }
   function bind_vertex_array(c, array){
    c.bindVertexArray
     (caml_call3(Jv[11], Jv[4], function(_g_){return _g_;}, array));
    return 0;
   }
   function blend_color(c, red, green, blue, alpha){
    c.blendColor(red, green, blue, alpha);
    return 0;
   }
   function blend_equation(c, mode){c.blendEquation(mode); return 0;}
   function blend_equation_separate(c, modeRGB, modeAlpha){c.blendEquationSeparate(modeRGB, modeAlpha); return 0;
   }
   function blend_func(c, sfactor, dfactor){
    c.blendFunc(sfactor, dfactor);
    return 0;
   }
   function blend_func_separate(c, srcRGB, dstRGB, srcAlpha, dstAlpha){c.blendFuncSeparate(srcRGB, dstRGB, srcAlpha, dstAlpha); return 0;
   }
   function blit_framebuffer
   (c, srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter){
    c.blitFramebuffer
     (srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
    return 0;
   }
   function buffer_data(c, target, srcData, usage){
    c.bufferData(target, srcData, usage);
    return 0;
   }
   function buffer_data_size(c, target, size, usage){c.bufferData(target, size, usage); return 0;
   }
   function buffer_sub_data(c, target, dstByteOffset, srcData){c.bufferSubData(target, dstByteOffset, srcData); return 0;
   }
   function check_framebuffer_status(c, target){return c.checkFramebufferStatus(target);
   }
   function clear$0(c, mask){c.clear(mask); return 0;}
   function clear_bufferfi(c, buffer, drawbuffer, depth, stencil){
    c.clearBufferfi(buffer, drawbuffer, depth, stencil);
    return 0;
   }
   function clear_bufferfv(c, buffer, drawbuffer, values){
    c.clearBufferfv(buffer, drawbuffer, values);
    return 0;
   }
   function clear_bufferiv(c, buffer, drawbuffer, values){
    c.clearBufferiv(buffer, drawbuffer, values);
    return 0;
   }
   function clear_bufferuiv(c, buffer, drawbuffer, values){
    c.clearBufferuiv(buffer, drawbuffer, values);
    return 0;
   }
   function clear_color(c, red, green, blue, alpha){
    c.clearColor(red, green, blue, alpha);
    return 0;
   }
   function clear_depth(c, depth){c.clearDepth(depth); return 0;}
   function clear_stencil(c, s){c.clearStencil(s); return 0;}
   function client_wait_sync(c, sync, flags, timeout){return c.clientWaitSync(sync, flags, timeout);
   }
   function color_mask(c, red, green, blue, alpha){
    c.colorMask(! ! red, ! ! green, ! ! blue, ! ! alpha);
    return 0;
   }
   function compile_shader(c, shader){c.compileShader(shader); return 0;}
   function compressed_tex_image2d
   (c, target, level, internalformat, width, height, border, srcData){
    c.compressedTexImage2D
     (target, level, internalformat, width, height, border, srcData);
    return 0;
   }
   function compressed_tex_image2d_size
   (c,
    target,
    level,
    internalformat,
    width,
    height,
    border,
    imageSize,
    offset){
    c.compressedTexImage2D
     (target, level, internalformat, width, height, border, imageSize, offset);
    return 0;
   }
   function compressed_tex_image3d
   (c, target, level, internalformat, width, height, depth, border, srcData){
    c.compressedTexImage3D
     (target, level, internalformat, width, height, depth, border, srcData);
    return 0;
   }
   function compressed_tex_image3d_size
   (c,
    target,
    level,
    internalformat,
    width,
    height,
    depth,
    border,
    imageSize,
    offset){
    c.compressedTexImage3D
     (target,
      level,
      internalformat,
      width,
      height,
      depth,
      border,
      imageSize,
      offset);
    return 0;
   }
   function compressed_tex_sub_image2d
   (c, target, level, xoffset, yoffset, width, height, format, srcData){
    c.compressedTexSubImage2D
     (target, level, xoffset, yoffset, width, height, format, srcData);
    return 0;
   }
   function compressed_tex_sub_image2d_siz
   (c,
    target,
    level,
    xoffset,
    yoffset,
    width,
    height,
    format,
    imageSize,
    offset){
    c.compressedTexSubImage2D
     (target,
      level,
      xoffset,
      yoffset,
      width,
      height,
      format,
      imageSize,
      offset);
    return 0;
   }
   function compressed_tex_sub_image3d
   (c,
    target,
    level,
    xoffset,
    yoffset,
    zoffset,
    width,
    height,
    depth,
    format,
    srcData){
    c.compressedTexSubImage3D
     (target,
      level,
      xoffset,
      yoffset,
      zoffset,
      width,
      height,
      depth,
      format,
      srcData);
    return 0;
   }
   function compressed_tex_sub_image3d_siz
   (c,
    target,
    level,
    xoffset,
    yoffset,
    zoffset,
    width,
    height,
    depth,
    format,
    imageSize,
    offset){
    c.compressedTexSubImage3D
     (target,
      level,
      xoffset,
      yoffset,
      zoffset,
      width,
      height,
      depth,
      format,
      imageSize,
      offset);
    return 0;
   }
   function copy_buffer_sub_data
   (c, readTarget, writeTarget, readOffset, writeOffset, size){
    c.copyBufferSubData
     (readTarget, writeTarget, readOffset, writeOffset, size);
    return 0;
   }
   function copy_tex_image2d
   (c, target, level, internalformat, x, y, width, height, border){
    c.copyTexImage2D
     (target, level, internalformat, x, y, width, height, border);
    return 0;
   }
   function copy_tex_sub_image2d
   (c, target, level, xoffset, yoffset, x, y, width, height){
    c.copyTexSubImage2D(target, level, xoffset, yoffset, x, y, width, height);
    return 0;
   }
   function copy_tex_sub_image3d
   (c, target, level, xoffset, yoffset, zoffset, x, y, width, height){
    c.copyTexSubImage3D
     (target, level, xoffset, yoffset, zoffset, x, y, width, height);
    return 0;
   }
   function create_buffer(c){return c.createBuffer();}
   function create_framebuffer(c){return c.createFramebuffer();}
   function create_program(c){return c.createProgram();}
   function create_query(c){return c.createQuery();}
   function create_renderbuffer(c){return c.createRenderbuffer();}
   function create_sampler(c){return c.createSampler();}
   function create_shader(c, type){return c.createShader(type);}
   function create_texture(c){return c.createTexture();}
   function create_transform_feedback(c){return c.createTransformFeedback();}
   function create_vertex_array(c){return c.createVertexArray();}
   function cull_face(c, mode){c.cullFace(mode); return 0;}
   function delete_buffer(c, buffer){c.deleteBuffer(buffer); return 0;}
   function delete_framebuffer(c, framebuffer){
    c.deleteFramebuffer(framebuffer);
    return 0;
   }
   function delete_program(c, program){c.deleteProgram(program); return 0;}
   function delete_query(c, query){c.deleteQuery(query); return 0;}
   function delete_renderbuffer(c, renderbuffer){
    c.deleteRenderbuffer(renderbuffer);
    return 0;
   }
   function delete_sampler(c, sampler){c.deleteSampler(sampler); return 0;}
   function delete_shader(c, shader){c.deleteShader(shader); return 0;}
   function delete_sync(c, sync){c.deleteSync(sync); return 0;}
   function delete_texture(c, texture){c.deleteTexture(texture); return 0;}
   function delete_transform_feedback(c, tf){c.deleteTransformFeedback(tf); return 0;
   }
   function delete_vertex_array(c, vertexArray){c.deleteVertexArray(vertexArray); return 0;
   }
   function depth_func(c, func){c.depthFunc(func); return 0;}
   function depth_mask(c, flag){c.depthMask(! ! flag); return 0;}
   function detach_shader(c, program, shader){
    c.detachShader(program, shader);
    return 0;
   }
   function disable(c, cap){c.disable(cap); return 0;}
   function disable_vertex_attrib_array(c, index){c.disableVertexAttribArray(index); return 0;
   }
   function draw_arrays(c, mode, first, count){
    c.drawArrays(mode, first, count);
    return 0;
   }
   function draw_arrays_instanced(c, mode, first, count, instanceCount){c.drawArraysInstanced(mode, first, count, instanceCount); return 0;
   }
   function draw_buffers(c, buffers){
    c.drawBuffers(caml_call2(Jv[30], function(_f_){return _f_;}, buffers));
    return 0;
   }
   function draw_elements(c, mode, count, type, offset){
    c.drawElements(mode, count, type, offset);
    return 0;
   }
   function draw_elements_instanced
   (c, mode, count, type, offset, instanceCount){
    c.drawElementsInstanced(mode, count, type, offset, instanceCount);
    return 0;
   }
   function draw_range_elements(c, mode, start, end, count, type, offset){c.drawRangeElements(mode, start, end, count, type, offset); return 0;
   }
   function enable(c, cap){c.enable(cap); return 0;}
   function enable_vertex_attrib_array(c, index){c.enableVertexAttribArray(index); return 0;
   }
   function end_query(c, target){c.endQuery(target); return 0;}
   function end_transform_feedback(c){c.endTransformFeedback(); return 0;}
   function fence_sync(c, condition, flags){return c.fenceSync(condition, flags);
   }
   function finish(c){c.finish(); return 0;}
   function flush(c){c.flush(); return 0;}
   function framebuffer_renderbuffer
   (c, target, attachment, renderbuffertarget, renderbuffer){
    c.framebufferRenderbuffer
     (target, attachment, renderbuffertarget, renderbuffer);
    return 0;
   }
   function framebuffer_texture2d
   (c, target, attachment, textarget, texture, level){
    c.framebufferTexture2D(target, attachment, textarget, texture, level);
    return 0;
   }
   function framebuffer_texture_layer
   (c, target, attachment, texture, level, layer){
    c.framebufferTextureLayer(target, attachment, texture, level, layer);
    return 0;
   }
   function front_face(c, mode){c.frontFace(mode); return 0;}
   function generate_mipmap(c, target){c.generateMipmap(target); return 0;}
   function get_active_attrib(c, program, index){return c.getActiveAttrib(program, index);
   }
   function get_active_uniform(c, program, index){return c.getActiveUniform(program, index);
   }
   function get_active_uniform_block_name(c, program, uniformBlockIndex){return c.getActiveUniformBlockName(program, uniformBlockIndex);
   }
   function get_active_uniform_block_param
   (c, program, uniformBlockIndex, pname){
    return c.getActiveUniformBlockParameter(program, uniformBlockIndex, pname);
   }
   function get_active_uniforms(c, program, uniformIndices, pname){
    return c.getActiveUniforms
            (program,
             caml_call2(Jv[30], function(_e_){return _e_;}, uniformIndices),
             pname);
   }
   function get_attached_shaders(c, program){
    return caml_list_of_js_array(c.getAttachedShaders(program));
   }
   function get_attrib_location(c, program, name){return c.getAttribLocation(program, name);
   }
   function get_buffer_parameter(c, target, pname){return c.getBufferParameter(target, pname);
   }
   function get_buffer_sub_data(c, target, srcByteOffset, dstBuffer){c.getBufferSubData(target, srcByteOffset, dstBuffer); return 0;
   }
   function get_error(c){return c.getError();}
   function get_frag_data_location(c, program, name){return c.getFragDataLocation(program, name);
   }
   function get_framebuffer_attachment_par(c, target, attachment, pname){
    return c.getFramebufferAttachmentParameter(target, attachment, pname);
   }
   function get_indexed_parameter(c, target, index){return c.getIndexedParameter(target, index);
   }
   function get_internalformat_parameter(c, target, internalformat, pname){return c.getInternalformatParameter(target, internalformat, pname);
   }
   function get_parameter(c, pname){return c.getParameter(pname);}
   function get_program_info_log(c, program){return c.getProgramInfoLog(program);
   }
   function get_program_parameter(c, program, pname){return c.getProgramParameter(program, pname);
   }
   function get_query(c, target, pname){return c.getQuery(target, pname);}
   function get_query_parameter(c, query, pname){return c.getQueryParameter(query, pname);
   }
   function get_renderbuffer_parameter(c, target, pname){return c.getRenderbufferParameter(target, pname);
   }
   function get_sampler_parameter(c, sampler, pname){return c.getSamplerParameter(sampler, pname);
   }
   function get_shader_info_log(c, shader){return c.getShaderInfoLog(shader);}
   function get_shader_parameter(c, shader, pname){return c.getShaderParameter(shader, pname);
   }
   function get_shader_precision_format(c, shadertype, precisiontype){return c.getShaderPrecisionFormat(shadertype, precisiontype);
   }
   function get_shader_source(c, shader){return c.getShaderSource(shader);}
   function get_sync_parameter(c, sync, pname){return c.getSyncParameter(sync, pname);
   }
   function get_tex_parameter(c, target, pname){return c.getTexParameter(target, pname);
   }
   function get_transform_feedback_varying(c, program, index){return c.getTransformFeedbackVarying(program, index);
   }
   function get_uniform(c, program, location){return c.getUniform(program, location);
   }
   function get_uniform_block_index(c, program, uniformBlockName){return c.getUniformBlockIndex(program, uniformBlockName);
   }
   function get_uniform_indices(c, program, uniformNames){
    var
     _c_ = c.getUniformIndices(program, caml_list_to_js_array(uniformNames));
    return caml_call1(caml_call1(Jv[29], function(_d_){return _d_;}), _c_);
   }
   function get_uniform_location(c, program, name){return c.getUniformLocation(program, name);
   }
   function get_vertex_attrib(c, index, pname){return c.getVertexAttrib(index, pname);
   }
   function get_vertex_attrib_offset(c, index, pname){return c.getVertexAttribOffset(index, pname);
   }
   function hint(c, target, mode){c.hint(target, mode); return 0;}
   function invalidate_framebuffer(c, target, attachments){
    c.invalidateFramebuffer
     (target, caml_call2(Jv[30], function(_b_){return _b_;}, attachments));
    return 0;
   }
   function invalidate_sub_framebuffer
   (c, target, attachments, x, y, width, height){
    c.invalidateSubFramebuffer
     (target,
      caml_call2(Jv[30], function(_a_){return _a_;}, attachments),
      x,
      y,
      width,
      height);
    return 0;
   }
   function is_buffer(c, buffer){return c.isBuffer(buffer) | 0;}
   function is_enabled(c, cap){return c.isEnabled(cap) | 0;}
   function is_framebuffer(c, framebuffer){
    return c.isFramebuffer(framebuffer) | 0;
   }
   function is_program(c, program){return c.isProgram(program) | 0;}
   function is_query(c, query){return c.isQuery(query) | 0;}
   function is_renderbuffer(c, renderbuffer){
    return c.isRenderbuffer(renderbuffer) | 0;
   }
   function is_sampler(c, sampler){return c.isSampler(sampler) | 0;}
   function is_shader(c, shader){return c.isShader(shader) | 0;}
   function is_texture(c, texture){return c.isTexture(texture) | 0;}
   function is_transform_feedback(c, tf){
    return c.isTransformFeedback(tf) | 0;
   }
   function is_vertex_array(c, vertexArray){
    return c.isVertexArray(vertexArray) | 0;
   }
   function line_width$0(c, width){c.lineWidth(width); return 0;}
   function link_program(c, program){c.linkProgram(program); return 0;}
   function pause_transform_feedback(c){c.pauseTransformFeedback(); return 0;}
   function pixel_storei(c, pname, param){
    c.pixelStorei(pname, param);
    return 0;
   }
   function polygon_offset(c, factor, units){
    c.polygonOffset(factor, units);
    return 0;
   }
   function read_buffer(c, src){c.readBuffer(src); return 0;}
   function read_pixels_to_pixel_pack
   (c, x, y, width, height, format, type, offset){
    c.readPixels(x, y, width, height, format, type, offset);
    return 0;
   }
   function read_pixels(c, x, y, width, height, format, type, dstData){
    c.readPixels(x, y, width, height, format, type, dstData);
    return 0;
   }
   function renderbuffer_storage(c, target, internalformat, width, height){
    c.renderbufferStorage(target, internalformat, width, height);
    return 0;
   }
   function renderbuffer_storage_multisamp
   (c, target, samples, internalformat, width, height){
    c.renderbufferStorageMultisample
     (target, samples, internalformat, width, height);
    return 0;
   }
   function resume_transform_feedback(c){
    c.resumeTransformFeedback();
    return 0;
   }
   function sample_coverage(c, value, invert){
    c.sampleCoverage(value, ! ! invert);
    return 0;
   }
   function sampler_parameterf(c, sampler, pname, param){
    c.samplerParameterf(sampler, pname, param);
    return 0;
   }
   function sampler_parameteri(c, sampler, pname, param){
    c.samplerParameteri(sampler, pname, param);
    return 0;
   }
   function scissor(c, x, y, width, height){
    c.scissor(x, y, width, height);
    return 0;
   }
   function shader_source(c, shader, source){
    c.shaderSource(shader, source);
    return 0;
   }
   function stencil_func(c, func, ref, mask){
    c.stencilFunc(func, ref, mask);
    return 0;
   }
   function stencil_func_separate(c, face, func, ref, mask){c.stencilFuncSeparate(face, func, ref, mask); return 0;
   }
   function stencil_mask(c, mask){c.stencilMask(mask); return 0;}
   function stencil_mask_separate(c, face, mask){c.stencilMaskSeparate(face, mask); return 0;
   }
   function stencil_op(c, fail, zfail, zpass){
    c.stencilOp(fail, zfail, zpass);
    return 0;
   }
   function stencil_op_separate(c, face, fail, zfail, zpass){c.stencilOpSeparate(face, fail, zfail, zpass); return 0;
   }
   function tex_image2d
   (c,
    target,
    level,
    internalformat,
    width,
    height,
    border,
    format,
    type,
    srcData,
    srcOffset){
    c.texImage2D
     (target,
      level,
      internalformat,
      width,
      height,
      border,
      format,
      type,
      srcData,
      srcOffset);
    return 0;
   }
   function tex_image2d_of_source
   (c,
    target,
    level,
    internalformat,
    width,
    height,
    border,
    format,
    type,
    source){
    c.texImage2D
     (target,
      level,
      internalformat,
      width,
      height,
      border,
      format,
      type,
      source);
    return 0;
   }
   function tex_image2d_of_pixel_unpack
   (c,
    target,
    level,
    internalformat,
    width,
    height,
    border,
    format,
    type,
    pboOffset){
    c.texImage2D
     (target,
      level,
      internalformat,
      width,
      height,
      border,
      format,
      type,
      pboOffset);
    return 0;
   }
   function tex_image3d
   (c,
    target,
    level,
    internalformat,
    width,
    height,
    depth,
    border,
    format,
    type,
    srcData,
    srcOffset){
    c.texImage3D
     (target,
      level,
      internalformat,
      width,
      height,
      depth,
      border,
      format,
      type,
      srcData,
      srcOffset);
    return 0;
   }
   function tex_image3d_of_source
   (c,
    target,
    level,
    internalformat,
    width,
    height,
    depth,
    border,
    format,
    type,
    source){
    c.texImage3D
     (target,
      level,
      internalformat,
      width,
      height,
      depth,
      border,
      format,
      type,
      source);
    return 0;
   }
   function tex_image3d_of_pixel_unpack
   (c,
    target,
    level,
    internalformat,
    width,
    height,
    depth,
    border,
    format,
    type,
    pboOffset){
    c.texImage3D
     (target,
      level,
      internalformat,
      width,
      height,
      depth,
      border,
      format,
      type,
      pboOffset);
    return 0;
   }
   function tex_parameterf(c, target, pname, param){
    c.texParameterf(target, pname, param);
    return 0;
   }
   function tex_parameteri(c, target, pname, param){
    c.texParameteri(target, pname, param);
    return 0;
   }
   function tex_storage2d(c, target, levels, internalformat, width, height){
    c.texStorage2D(target, levels, internalformat, width, height);
    return 0;
   }
   function tex_storage3d
   (c, target, levels, internalformat, width, height, depth){
    c.texStorage3D(target, levels, internalformat, width, height, depth);
    return 0;
   }
   function tex_sub_image2d
   (c,
    target,
    level,
    xoffset,
    yoffset,
    width,
    height,
    format,
    type,
    srcData,
    srcOffset){
    c.texSubImage2D
     (target,
      level,
      xoffset,
      yoffset,
      width,
      height,
      format,
      type,
      srcData,
      srcOffset);
    return 0;
   }
   function tex_sub_image2d_of_source
   (c, target, level, xoffset, yoffset, width, height, format, type, source){
    c.texSubImage2D
     (target, level, xoffset, yoffset, width, height, format, type, source);
    return 0;
   }
   function tex_sub_image2d_of_pixel_unpac
   (c,
    target,
    level,
    xoffset,
    yoffset,
    width,
    height,
    format,
    type,
    pboOffset){
    c.texSubImage2D
     (target, level, xoffset, yoffset, width, height, format, type, pboOffset);
    return 0;
   }
   function tex_sub_image3d
   (c,
    target,
    level,
    xoffset,
    yoffset,
    zoffset,
    width,
    height,
    depth,
    format,
    type,
    srcData){
    c.texSubImage3D
     (target,
      level,
      xoffset,
      yoffset,
      zoffset,
      width,
      height,
      depth,
      format,
      type,
      srcData);
    return 0;
   }
   function tex_sub_image3d_of_source
   (c,
    target,
    level,
    xoffset,
    yoffset,
    zoffset,
    width,
    height,
    depth,
    format,
    type,
    source){
    c.texSubImage3D
     (target,
      level,
      xoffset,
      yoffset,
      zoffset,
      width,
      height,
      depth,
      format,
      type,
      source);
    return 0;
   }
   function tex_sub_image3d_of_pixel_unpac
   (c,
    target,
    level,
    xoffset,
    yoffset,
    zoffset,
    width,
    height,
    depth,
    format,
    type,
    pboOffset){
    c.texSubImage3D
     (target,
      level,
      xoffset,
      yoffset,
      zoffset,
      width,
      height,
      depth,
      format,
      type,
      pboOffset);
    return 0;
   }
   function transform_feedback_varyings(c, program, varyings, bufferMode){
    c.transformFeedbackVaryings
     (program, caml_list_to_js_array(varyings), bufferMode);
    return 0;
   }
   function uniform1f(c, location, x){c.uniform1f(location, x); return 0;}
   function uniform1fv(c, location, data){
    c.uniform1fv(location, data);
    return 0;
   }
   function uniform1i(c, location, x){c.uniform1i(location, x); return 0;}
   function uniform1iv(c, location, data){
    c.uniform1iv(location, data);
    return 0;
   }
   function uniform1ui(c, location, v0){c.uniform1ui(location, v0); return 0;}
   function uniform1uiv(c, location, data){
    c.uniform1uiv(location, data);
    return 0;
   }
   function uniform2f(c, location, x, y){
    c.uniform2f(location, x, y);
    return 0;
   }
   function uniform2fv(c, location, data){
    c.uniform2fv(location, data);
    return 0;
   }
   function uniform2i(c, location, x, y){
    c.uniform2i(location, x, y);
    return 0;
   }
   function uniform2iv(c, location, data){
    c.uniform2iv(location, data);
    return 0;
   }
   function uniform2ui(c, location, v0, v1){
    c.uniform2ui(location, v0, v1);
    return 0;
   }
   function uniform2uiv(c, location, data){
    c.uniform2uiv(location, data);
    return 0;
   }
   function uniform3f(c, location, x, y, z){
    c.uniform3f(location, x, y, z);
    return 0;
   }
   function uniform3fv(c, location, data){
    c.uniform3fv(location, data);
    return 0;
   }
   function uniform3i(c, location, x, y, z){
    c.uniform3i(location, x, y, z);
    return 0;
   }
   function uniform3iv(c, location, data){
    c.uniform3iv(location, data);
    return 0;
   }
   function uniform3ui(c, location, v0, v1, v2){
    c.uniform3ui(location, v0, v1, v2);
    return 0;
   }
   function uniform3uiv(c, location, data){
    c.uniform3uiv(location, data);
    return 0;
   }
   function uniform4f(c, location, x, y, z, w){
    c.uniform4f(location, x, y, z, w);
    return 0;
   }
   function uniform4fv(c, location, data){
    c.uniform4fv(location, data);
    return 0;
   }
   function uniform4i(c, location, x, y, z, w){
    c.uniform4i(location, x, y, z, w);
    return 0;
   }
   function uniform4iv(c, location, data){
    c.uniform4iv(location, data);
    return 0;
   }
   function uniform4ui(c, location, v0, v1, v2, v3){
    c.uniform4ui(location, v0, v1, v2, v3);
    return 0;
   }
   function uniform4uiv(c, location, data){
    c.uniform4uiv(location, data);
    return 0;
   }
   function uniform_block_binding
   (c, program, uniformBlockIndex, uniformBlockBinding){
    c.uniformBlockBinding(program, uniformBlockIndex, uniformBlockBinding);
    return 0;
   }
   function uniform_matrix2fv(c, location, transpose, data){
    c.uniformMatrix2fv(location, ! ! transpose, data);
    return 0;
   }
   function uniform_matrix2x3fv(c, location, transpose, data){
    c.uniformMatrix2x3fv(location, ! ! transpose, data);
    return 0;
   }
   function uniform_matrix2x4fv(c, location, transpose, data){
    c.uniformMatrix2x4fv(location, ! ! transpose, data);
    return 0;
   }
   function uniform_matrix3fv(c, location, transpose, data){
    c.uniformMatrix3fv(location, ! ! transpose, data);
    return 0;
   }
   function uniform_matrix3x2fv(c, location, transpose, data){
    c.uniformMatrix3x2fv(location, ! ! transpose, data);
    return 0;
   }
   function uniform_matrix3x4fv(c, location, transpose, data){
    c.uniformMatrix3x4fv(location, ! ! transpose, data);
    return 0;
   }
   function uniform_matrix4fv(c, location, transpose, data){
    c.uniformMatrix4fv(location, ! ! transpose, data);
    return 0;
   }
   function uniform_matrix4x2fv(c, location, transpose, data){
    c.uniformMatrix4x2fv(location, ! ! transpose, data);
    return 0;
   }
   function uniform_matrix4x3fv(c, location, transpose, data){
    c.uniformMatrix4x3fv(location, ! ! transpose, data);
    return 0;
   }
   function use_program(c, program){c.useProgram(program); return 0;}
   function validate_program(c, program){
    c.validateProgram(program);
    return 0;
   }
   function vertex_attrib1f(c, index, x){
    c.vertexAttrib1f(index, x);
    return 0;
   }
   function vertex_attrib1fv(c, index, values){
    c.vertexAttrib1fv(index, values);
    return 0;
   }
   function vertex_attrib2f(c, index, x, y){
    c.vertexAttrib2f(index, x, y);
    return 0;
   }
   function vertex_attrib2fv(c, index, values){
    c.vertexAttrib2fv(index, values);
    return 0;
   }
   function vertex_attrib3f(c, index, x, y, z){
    c.vertexAttrib3f(index, x, y, z);
    return 0;
   }
   function vertex_attrib3fv(c, index, values){
    c.vertexAttrib3fv(index, values);
    return 0;
   }
   function vertex_attrib4f(c, index, x, y, z, w){
    c.vertexAttrib4f(index, x, y, z, w);
    return 0;
   }
   function vertex_attrib4fv(c, index, values){
    c.vertexAttrib4fv(index, values);
    return 0;
   }
   function vertex_attrib_divisor(c, index, divisor){c.vertexAttribDivisor(index, divisor); return 0;
   }
   function vertex_attrib_i4i(c, index, x, y, z, w){c.vertexAttribI4i(index, x, y, z, w); return 0;
   }
   function vertex_attrib_i4iv(c, index, values){c.vertexAttribI4iv(index, values); return 0;
   }
   function vertex_attrib_i4ui(c, index, x, y, z, w){c.vertexAttribI4ui(index, x, y, z, w); return 0;
   }
   function vertex_attrib_i4uiv(c, index, values){c.vertexAttribI4uiv(index, values); return 0;
   }
   function vertex_attrib_ipointer(c, index, size, type, stride, offset){c.vertexAttribIPointer(index, size, type, stride, offset); return 0;
   }
   function vertex_attrib_pointer
   (c, index, size, type, normalized, stride, offset){
    c.vertexAttribPointer(index, size, type, ! ! normalized, stride, offset);
    return 0;
   }
   function viewport(c, x, y, width, height){
    c.viewport(x, y, width, height);
    return 0;
   }
   function wait_sync(c, sync, flags, timeout){
    c.waitSync(sync, flags, timeout);
    return 0;
   }
   function get_int(ctx, f){
    return caml_call1(Jv[8], ctx) ? 0 : caml_call2(Jv[20][2], ctx, f);
   }
   var
    gl1ctx = Jv[12]["WebGLRenderingContext"],
    depth_buffer_bit = get_int(gl1ctx, "DEPTH_BUFFER_BIT"),
    stencil_buffer_bit = get_int(gl1ctx, "STENCIL_BUFFER_BIT"),
    color_buffer_bit = get_int(gl1ctx, "COLOR_BUFFER_BIT"),
    points = get_int(gl1ctx, "POINTS"),
    lines = get_int(gl1ctx, "LINES"),
    line_loop = get_int(gl1ctx, "LINE_LOOP"),
    line_strip = get_int(gl1ctx, "LINE_STRIP"),
    triangles = get_int(gl1ctx, "TRIANGLES"),
    triangle_strip = get_int(gl1ctx, "TRIANGLE_STRIP"),
    triangle_fan = get_int(gl1ctx, "TRIANGLE_FAN"),
    zero = get_int(gl1ctx, "ZERO"),
    one = get_int(gl1ctx, "ONE"),
    src_color = get_int(gl1ctx, "SRC_COLOR"),
    one_minus_src_color = get_int(gl1ctx, "ONE_MINUS_SRC_COLOR"),
    src_alpha = get_int(gl1ctx, "SRC_ALPHA"),
    one_minus_src_alpha = get_int(gl1ctx, "ONE_MINUS_SRC_ALPHA"),
    dst_alpha = get_int(gl1ctx, "DST_ALPHA"),
    one_minus_dst_alpha = get_int(gl1ctx, "ONE_MINUS_DST_ALPHA"),
    dst_color = get_int(gl1ctx, "DST_COLOR"),
    one_minus_dst_color = get_int(gl1ctx, "ONE_MINUS_DST_COLOR"),
    src_alpha_saturate = get_int(gl1ctx, "SRC_ALPHA_SATURATE"),
    func_add = get_int(gl1ctx, "FUNC_ADD"),
    blend_equation$0 = get_int(gl1ctx, "BLEND_EQUATION"),
    blend_equation_rgb = get_int(gl1ctx, "BLEND_EQUATION_RGB"),
    blend_equation_alpha = get_int(gl1ctx, "BLEND_EQUATION_ALPHA"),
    func_subtract = get_int(gl1ctx, "FUNC_SUBTRACT"),
    func_reverse_subtract = get_int(gl1ctx, "FUNC_REVERSE_SUBTRACT"),
    blend_dst_rgb = get_int(gl1ctx, "BLEND_DST_RGB"),
    blend_src_rgb = get_int(gl1ctx, "BLEND_SRC_RGB"),
    blend_dst_alpha = get_int(gl1ctx, "BLEND_DST_ALPHA"),
    blend_src_alpha = get_int(gl1ctx, "BLEND_SRC_ALPHA"),
    constant_color = get_int(gl1ctx, "CONSTANT_COLOR"),
    one_minus_constant_color = get_int(gl1ctx, "ONE_MINUS_CONSTANT_COLOR"),
    constant_alpha = get_int(gl1ctx, "CONSTANT_ALPHA"),
    one_minus_constant_alpha = get_int(gl1ctx, "ONE_MINUS_CONSTANT_ALPHA"),
    blend_color$0 = get_int(gl1ctx, "BLEND_COLOR"),
    array_buffer = get_int(gl1ctx, "ARRAY_BUFFER"),
    element_array_buffer = get_int(gl1ctx, "ELEMENT_ARRAY_BUFFER"),
    array_buffer_binding = get_int(gl1ctx, "ARRAY_BUFFER_BINDING"),
    element_array_buffer_binding =
      get_int(gl1ctx, "ELEMENT_ARRAY_BUFFER_BINDING"),
    stream_draw = get_int(gl1ctx, "STREAM_DRAW"),
    static_draw = get_int(gl1ctx, "STATIC_DRAW"),
    dynamic_draw = get_int(gl1ctx, "DYNAMIC_DRAW"),
    buffer_size = get_int(gl1ctx, "BUFFER_SIZE"),
    buffer_usage = get_int(gl1ctx, "BUFFER_USAGE"),
    current_vertex_attrib = get_int(gl1ctx, "CURRENT_VERTEX_ATTRIB"),
    front = get_int(gl1ctx, "FRONT"),
    back = get_int(gl1ctx, "BACK"),
    front_and_back = get_int(gl1ctx, "FRONT_AND_BACK"),
    cull_face$0 = get_int(gl1ctx, "CULL_FACE"),
    blend = get_int(gl1ctx, "BLEND"),
    dither = get_int(gl1ctx, "DITHER"),
    stencil_test = get_int(gl1ctx, "STENCIL_TEST"),
    depth_test = get_int(gl1ctx, "DEPTH_TEST"),
    scissor_test = get_int(gl1ctx, "SCISSOR_TEST"),
    polygon_offset_fill = get_int(gl1ctx, "POLYGON_OFFSET_FILL"),
    sample_alpha_to_coverage = get_int(gl1ctx, "SAMPLE_ALPHA_TO_COVERAGE"),
    sample_coverage$0 = get_int(gl1ctx, "SAMPLE_COVERAGE"),
    no_error = get_int(gl1ctx, "NO_ERROR"),
    invalid_enum = get_int(gl1ctx, "INVALID_ENUM"),
    invalid_value = get_int(gl1ctx, "INVALID_VALUE"),
    invalid_operation = get_int(gl1ctx, "INVALID_OPERATION"),
    out_of_memory = get_int(gl1ctx, "OUT_OF_MEMORY"),
    cw = get_int(gl1ctx, "CW"),
    ccw = get_int(gl1ctx, "CCW"),
    line_width$1 = get_int(gl1ctx, "LINE_WIDTH"),
    aliased_point_size_range = get_int(gl1ctx, "ALIASED_POINT_SIZE_RANGE"),
    aliased_line_width_range = get_int(gl1ctx, "ALIASED_LINE_WIDTH_RANGE"),
    cull_face_mode = get_int(gl1ctx, "CULL_FACE_MODE"),
    front_face$0 = get_int(gl1ctx, "FRONT_FACE"),
    depth_range = get_int(gl1ctx, "DEPTH_RANGE"),
    depth_writemask = get_int(gl1ctx, "DEPTH_WRITEMASK"),
    depth_clear_value = get_int(gl1ctx, "DEPTH_CLEAR_VALUE"),
    depth_func$0 = get_int(gl1ctx, "DEPTH_FUNC"),
    stencil_clear_value = get_int(gl1ctx, "STENCIL_CLEAR_VALUE"),
    stencil_func$0 = get_int(gl1ctx, "STENCIL_FUNC"),
    stencil_fail = get_int(gl1ctx, "STENCIL_FAIL"),
    stencil_pass_depth_fail = get_int(gl1ctx, "STENCIL_PASS_DEPTH_FAIL"),
    stencil_pass_depth_pass = get_int(gl1ctx, "STENCIL_PASS_DEPTH_PASS"),
    stencil_ref = get_int(gl1ctx, "STENCIL_REF"),
    stencil_value_mask = get_int(gl1ctx, "STENCIL_VALUE_MASK"),
    stencil_writemask = get_int(gl1ctx, "STENCIL_WRITEMASK"),
    stencil_back_func = get_int(gl1ctx, "STENCIL_BACK_FUNC"),
    stencil_back_fail = get_int(gl1ctx, "STENCIL_BACK_FAIL"),
    stencil_back_pass_depth_fail =
      get_int(gl1ctx, "STENCIL_BACK_PASS_DEPTH_FAIL"),
    stencil_back_pass_depth_pass =
      get_int(gl1ctx, "STENCIL_BACK_PASS_DEPTH_PASS"),
    stencil_back_ref = get_int(gl1ctx, "STENCIL_BACK_REF"),
    stencil_back_value_mask = get_int(gl1ctx, "STENCIL_BACK_VALUE_MASK"),
    stencil_back_writemask = get_int(gl1ctx, "STENCIL_BACK_WRITEMASK"),
    viewport$0 = get_int(gl1ctx, "VIEWPORT"),
    scissor_box = get_int(gl1ctx, "SCISSOR_BOX"),
    color_clear_value = get_int(gl1ctx, "COLOR_CLEAR_VALUE"),
    color_writemask = get_int(gl1ctx, "COLOR_WRITEMASK"),
    unpack_alignment = get_int(gl1ctx, "UNPACK_ALIGNMENT"),
    pack_alignment = get_int(gl1ctx, "PACK_ALIGNMENT"),
    max_texture_size = get_int(gl1ctx, "MAX_TEXTURE_SIZE"),
    max_viewport_dims = get_int(gl1ctx, "MAX_VIEWPORT_DIMS"),
    subpixel_bits = get_int(gl1ctx, "SUBPIXEL_BITS"),
    red_bits = get_int(gl1ctx, "RED_BITS"),
    green_bits = get_int(gl1ctx, "GREEN_BITS"),
    blue_bits = get_int(gl1ctx, "BLUE_BITS"),
    alpha_bits = get_int(gl1ctx, "ALPHA_BITS"),
    depth_bits = get_int(gl1ctx, "DEPTH_BITS"),
    stencil_bits = get_int(gl1ctx, "STENCIL_BITS"),
    polygon_offset_units = get_int(gl1ctx, "POLYGON_OFFSET_UNITS"),
    polygon_offset_factor = get_int(gl1ctx, "POLYGON_OFFSET_FACTOR"),
    texture_binding_2d = get_int(gl1ctx, "TEXTURE_BINDING_2D"),
    sample_buffers = get_int(gl1ctx, "SAMPLE_BUFFERS"),
    samples = get_int(gl1ctx, "SAMPLES"),
    sample_coverage_value = get_int(gl1ctx, "SAMPLE_COVERAGE_VALUE"),
    sample_coverage_invert = get_int(gl1ctx, "SAMPLE_COVERAGE_INVERT"),
    compressed_texture_formats = get_int(gl1ctx, "COMPRESSED_TEXTURE_FORMATS"),
    dont_care = get_int(gl1ctx, "DONT_CARE"),
    fastest = get_int(gl1ctx, "FASTEST"),
    nicest = get_int(gl1ctx, "NICEST"),
    generate_mipmap_hint = get_int(gl1ctx, "GENERATE_MIPMAP_HINT"),
    byte$0 = get_int(gl1ctx, "BYTE"),
    unsigned_byte = get_int(gl1ctx, "UNSIGNED_BYTE"),
    short$0 = get_int(gl1ctx, "SHORT"),
    unsigned_short = get_int(gl1ctx, "UNSIGNED_SHORT"),
    int$0 = get_int(gl1ctx, "INT"),
    unsigned_int = get_int(gl1ctx, "UNSIGNED_INT"),
    float$0 = get_int(gl1ctx, "FLOAT"),
    depth_component = get_int(gl1ctx, "DEPTH_COMPONENT"),
    alpha$0 = get_int(gl1ctx, "ALPHA"),
    rgb = get_int(gl1ctx, "RGB"),
    rgba = get_int(gl1ctx, "RGBA"),
    luminance = get_int(gl1ctx, "LUMINANCE"),
    luminance_alpha = get_int(gl1ctx, "LUMINANCE_ALPHA"),
    unsigned_short_4_4_4_4 = get_int(gl1ctx, "UNSIGNED_SHORT_4_4_4_4"),
    unsigned_short_5_5_5_1 = get_int(gl1ctx, "UNSIGNED_SHORT_5_5_5_1"),
    unsigned_short_5_6_5 = get_int(gl1ctx, "UNSIGNED_SHORT_5_6_5"),
    fragment_shader = get_int(gl1ctx, "FRAGMENT_SHADER"),
    vertex_shader = get_int(gl1ctx, "VERTEX_SHADER"),
    max_vertex_attribs = get_int(gl1ctx, "MAX_VERTEX_ATTRIBS"),
    max_vertex_uniform_vectors = get_int(gl1ctx, "MAX_VERTEX_UNIFORM_VECTORS"),
    max_varying_vectors = get_int(gl1ctx, "MAX_VARYING_VECTORS"),
    max_combined_texture_image_uni =
      get_int(gl1ctx, "MAX_COMBINED_TEXTURE_IMAGE_UNITS"),
    max_vertex_texture_image_units =
      get_int(gl1ctx, "MAX_VERTEX_TEXTURE_IMAGE_UNITS"),
    max_texture_image_units = get_int(gl1ctx, "MAX_TEXTURE_IMAGE_UNITS"),
    max_fragment_uniform_vectors =
      get_int(gl1ctx, "MAX_FRAGMENT_UNIFORM_VECTORS"),
    shader_type = get_int(gl1ctx, "SHADER_TYPE"),
    delete_status = get_int(gl1ctx, "DELETE_STATUS"),
    link_status = get_int(gl1ctx, "LINK_STATUS"),
    validate_status = get_int(gl1ctx, "VALIDATE_STATUS"),
    attached_shaders = get_int(gl1ctx, "ATTACHED_SHADERS"),
    active_uniforms = get_int(gl1ctx, "ACTIVE_UNIFORMS"),
    active_attributes = get_int(gl1ctx, "ACTIVE_ATTRIBUTES"),
    shading_language_version = get_int(gl1ctx, "SHADING_LANGUAGE_VERSION"),
    current_program = get_int(gl1ctx, "CURRENT_PROGRAM"),
    never = get_int(gl1ctx, "NEVER"),
    less = get_int(gl1ctx, "LESS"),
    equal = get_int(gl1ctx, "EQUAL"),
    lequal = get_int(gl1ctx, "LEQUAL"),
    greater = get_int(gl1ctx, "GREATER"),
    notequal = get_int(gl1ctx, "NOTEQUAL"),
    gequal = get_int(gl1ctx, "GEQUAL"),
    always = get_int(gl1ctx, "ALWAYS"),
    keep = get_int(gl1ctx, "KEEP"),
    replace = get_int(gl1ctx, "REPLACE"),
    incr = get_int(gl1ctx, "INCR"),
    decr = get_int(gl1ctx, "DECR"),
    invert = get_int(gl1ctx, "INVERT"),
    incr_wrap = get_int(gl1ctx, "INCR_WRAP"),
    decr_wrap = get_int(gl1ctx, "DECR_WRAP"),
    vendor = get_int(gl1ctx, "VENDOR"),
    renderer = get_int(gl1ctx, "RENDERER"),
    version = get_int(gl1ctx, "VERSION"),
    nearest = get_int(gl1ctx, "NEAREST"),
    linear = get_int(gl1ctx, "LINEAR"),
    nearest_mipmap_nearest = get_int(gl1ctx, "NEAREST_MIPMAP_NEAREST"),
    linear_mipmap_nearest = get_int(gl1ctx, "LINEAR_MIPMAP_NEAREST"),
    nearest_mipmap_linear = get_int(gl1ctx, "NEAREST_MIPMAP_LINEAR"),
    linear_mipmap_linear = get_int(gl1ctx, "LINEAR_MIPMAP_LINEAR"),
    texture_mag_filter = get_int(gl1ctx, "TEXTURE_MAG_FILTER"),
    texture_min_filter = get_int(gl1ctx, "TEXTURE_MIN_FILTER"),
    texture_wrap_s = get_int(gl1ctx, "TEXTURE_WRAP_S"),
    texture_wrap_t = get_int(gl1ctx, "TEXTURE_WRAP_T"),
    texture_2d = get_int(gl1ctx, "TEXTURE_2D"),
    texture = get_int(gl1ctx, "TEXTURE"),
    texture_cube_map = get_int(gl1ctx, "TEXTURE_CUBE_MAP"),
    texture_binding_cube_map = get_int(gl1ctx, "TEXTURE_BINDING_CUBE_MAP"),
    texture_cube_map_positive_x =
      get_int(gl1ctx, "TEXTURE_CUBE_MAP_POSITIVE_X"),
    texture_cube_map_negative_x =
      get_int(gl1ctx, "TEXTURE_CUBE_MAP_NEGATIVE_X"),
    texture_cube_map_positive_y =
      get_int(gl1ctx, "TEXTURE_CUBE_MAP_POSITIVE_Y"),
    texture_cube_map_negative_y =
      get_int(gl1ctx, "TEXTURE_CUBE_MAP_NEGATIVE_Y"),
    texture_cube_map_positive_z =
      get_int(gl1ctx, "TEXTURE_CUBE_MAP_POSITIVE_Z"),
    texture_cube_map_negative_z =
      get_int(gl1ctx, "TEXTURE_CUBE_MAP_NEGATIVE_Z"),
    max_cube_map_texture_size = get_int(gl1ctx, "MAX_CUBE_MAP_TEXTURE_SIZE"),
    texture0 = get_int(gl1ctx, "TEXTURE0"),
    texture1 = get_int(gl1ctx, "TEXTURE1"),
    texture2 = get_int(gl1ctx, "TEXTURE2"),
    texture3 = get_int(gl1ctx, "TEXTURE3"),
    texture4 = get_int(gl1ctx, "TEXTURE4"),
    texture5 = get_int(gl1ctx, "TEXTURE5"),
    texture6 = get_int(gl1ctx, "TEXTURE6"),
    texture7 = get_int(gl1ctx, "TEXTURE7"),
    texture8 = get_int(gl1ctx, "TEXTURE8"),
    texture9 = get_int(gl1ctx, "TEXTURE9"),
    texture10 = get_int(gl1ctx, "TEXTURE10"),
    texture11 = get_int(gl1ctx, "TEXTURE11"),
    texture12 = get_int(gl1ctx, "TEXTURE12"),
    texture13 = get_int(gl1ctx, "TEXTURE13"),
    texture14 = get_int(gl1ctx, "TEXTURE14"),
    texture15 = get_int(gl1ctx, "TEXTURE15"),
    texture16 = get_int(gl1ctx, "TEXTURE16"),
    texture17 = get_int(gl1ctx, "TEXTURE17"),
    texture18 = get_int(gl1ctx, "TEXTURE18"),
    texture19 = get_int(gl1ctx, "TEXTURE19"),
    texture20 = get_int(gl1ctx, "TEXTURE20"),
    texture21 = get_int(gl1ctx, "TEXTURE21"),
    texture22 = get_int(gl1ctx, "TEXTURE22"),
    texture23 = get_int(gl1ctx, "TEXTURE23"),
    texture24 = get_int(gl1ctx, "TEXTURE24"),
    texture25 = get_int(gl1ctx, "TEXTURE25"),
    texture26 = get_int(gl1ctx, "TEXTURE26"),
    texture27 = get_int(gl1ctx, "TEXTURE27"),
    texture28 = get_int(gl1ctx, "TEXTURE28"),
    texture29 = get_int(gl1ctx, "TEXTURE29"),
    texture30 = get_int(gl1ctx, "TEXTURE30"),
    texture31 = get_int(gl1ctx, "TEXTURE31"),
    active_texture$0 = get_int(gl1ctx, "ACTIVE_TEXTURE"),
    repeat = get_int(gl1ctx, "REPEAT"),
    clamp_to_edge = get_int(gl1ctx, "CLAMP_TO_EDGE"),
    mirrored_repeat = get_int(gl1ctx, "MIRRORED_REPEAT"),
    float_vec2 = get_int(gl1ctx, "FLOAT_VEC2"),
    float_vec3 = get_int(gl1ctx, "FLOAT_VEC3"),
    float_vec4 = get_int(gl1ctx, "FLOAT_VEC4"),
    int_vec2 = get_int(gl1ctx, "INT_VEC2"),
    int_vec3 = get_int(gl1ctx, "INT_VEC3"),
    int_vec4 = get_int(gl1ctx, "INT_VEC4"),
    bool = get_int(gl1ctx, "BOOL"),
    bool_vec2 = get_int(gl1ctx, "BOOL_VEC2"),
    bool_vec3 = get_int(gl1ctx, "BOOL_VEC3"),
    bool_vec4 = get_int(gl1ctx, "BOOL_VEC4"),
    float_mat2 = get_int(gl1ctx, "FLOAT_MAT2"),
    float_mat3 = get_int(gl1ctx, "FLOAT_MAT3"),
    float_mat4 = get_int(gl1ctx, "FLOAT_MAT4"),
    sampler_2d = get_int(gl1ctx, "SAMPLER_2D"),
    sampler_cube = get_int(gl1ctx, "SAMPLER_CUBE"),
    vertex_attrib_array_enabled =
      get_int(gl1ctx, "VERTEX_ATTRIB_ARRAY_ENABLED"),
    vertex_attrib_array_size = get_int(gl1ctx, "VERTEX_ATTRIB_ARRAY_SIZE"),
    vertex_attrib_array_stride = get_int(gl1ctx, "VERTEX_ATTRIB_ARRAY_STRIDE"),
    vertex_attrib_array_type = get_int(gl1ctx, "VERTEX_ATTRIB_ARRAY_TYPE"),
    vertex_attrib_array_normalized =
      get_int(gl1ctx, "VERTEX_ATTRIB_ARRAY_NORMALIZED"),
    vertex_attrib_array_pointer =
      get_int(gl1ctx, "VERTEX_ATTRIB_ARRAY_POINTER"),
    vertex_attrib_array_buffer_bin =
      get_int(gl1ctx, "VERTEX_ATTRIB_ARRAY_BUFFER_BINDING"),
    implementation_color_read_type =
      get_int(gl1ctx, "IMPLEMENTATION_COLOR_READ_TYPE"),
    implementation_color_read_form =
      get_int(gl1ctx, "IMPLEMENTATION_COLOR_READ_FORMAT"),
    compile_status = get_int(gl1ctx, "COMPILE_STATUS"),
    low_float = get_int(gl1ctx, "LOW_FLOAT"),
    medium_float = get_int(gl1ctx, "MEDIUM_FLOAT"),
    high_float = get_int(gl1ctx, "HIGH_FLOAT"),
    low_int = get_int(gl1ctx, "LOW_INT"),
    medium_int = get_int(gl1ctx, "MEDIUM_INT"),
    high_int = get_int(gl1ctx, "HIGH_INT"),
    framebuffer = get_int(gl1ctx, "FRAMEBUFFER"),
    renderbuffer = get_int(gl1ctx, "RENDERBUFFER"),
    rgba4 = get_int(gl1ctx, "RGBA4"),
    rgb5_a1 = get_int(gl1ctx, "RGB5_A1"),
    rgb565 = get_int(gl1ctx, "RGB565"),
    depth_component16 = get_int(gl1ctx, "DEPTH_COMPONENT16"),
    stencil_index8 = get_int(gl1ctx, "STENCIL_INDEX8"),
    depth_stencil = get_int(gl1ctx, "DEPTH_STENCIL"),
    renderbuffer_width = get_int(gl1ctx, "RENDERBUFFER_WIDTH"),
    renderbuffer_height = get_int(gl1ctx, "RENDERBUFFER_HEIGHT"),
    renderbuffer_internal_format =
      get_int(gl1ctx, "RENDERBUFFER_INTERNAL_FORMAT"),
    renderbuffer_red_size = get_int(gl1ctx, "RENDERBUFFER_RED_SIZE"),
    renderbuffer_green_size = get_int(gl1ctx, "RENDERBUFFER_GREEN_SIZE"),
    renderbuffer_blue_size = get_int(gl1ctx, "RENDERBUFFER_BLUE_SIZE"),
    renderbuffer_alpha_size = get_int(gl1ctx, "RENDERBUFFER_ALPHA_SIZE"),
    renderbuffer_depth_size = get_int(gl1ctx, "RENDERBUFFER_DEPTH_SIZE"),
    renderbuffer_stencil_size = get_int(gl1ctx, "RENDERBUFFER_STENCIL_SIZE"),
    framebuffer_attachment_object_ =
      get_int(gl1ctx, "FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE"),
    framebuffer_attachment_object_$0 =
      get_int(gl1ctx, "FRAMEBUFFER_ATTACHMENT_OBJECT_NAME"),
    framebuffer_attachment_texture =
      get_int(gl1ctx, "FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL"),
    framebuffer_attachment_texture$0 =
      get_int(gl1ctx, "FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE"),
    color_attachment0 = get_int(gl1ctx, "COLOR_ATTACHMENT0"),
    depth_attachment = get_int(gl1ctx, "DEPTH_ATTACHMENT"),
    stencil_attachment = get_int(gl1ctx, "STENCIL_ATTACHMENT"),
    depth_stencil_attachment = get_int(gl1ctx, "DEPTH_STENCIL_ATTACHMENT"),
    none = get_int(gl1ctx, "NONE"),
    framebuffer_complete = get_int(gl1ctx, "FRAMEBUFFER_COMPLETE"),
    framebuffer_incomplete_attachm =
      get_int(gl1ctx, "FRAMEBUFFER_INCOMPLETE_ATTACHMENT"),
    framebuffer_incomplete_missing =
      get_int(gl1ctx, "FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT"),
    framebuffer_incomplete_dimensi =
      get_int(gl1ctx, "FRAMEBUFFER_INCOMPLETE_DIMENSIONS"),
    framebuffer_unsupported = get_int(gl1ctx, "FRAMEBUFFER_UNSUPPORTED"),
    framebuffer_binding = get_int(gl1ctx, "FRAMEBUFFER_BINDING"),
    renderbuffer_binding = get_int(gl1ctx, "RENDERBUFFER_BINDING"),
    max_renderbuffer_size = get_int(gl1ctx, "MAX_RENDERBUFFER_SIZE"),
    invalid_framebuffer_operation =
      get_int(gl1ctx, "INVALID_FRAMEBUFFER_OPERATION"),
    unpack_flip_y_webgl = get_int(gl1ctx, "UNPACK_FLIP_Y_WEBGL"),
    unpack_premultiply_alpha_webgl =
      get_int(gl1ctx, "UNPACK_PREMULTIPLY_ALPHA_WEBGL"),
    context_lost_webgl = get_int(gl1ctx, "CONTEXT_LOST_WEBGL"),
    unpack_colorspace_conversion_w =
      get_int(gl1ctx, "UNPACK_COLORSPACE_CONVERSION_WEBGL"),
    browser_default_webgl = get_int(gl1ctx, "BROWSER_DEFAULT_WEBGL"),
    gl2ctx = Jv[12]["WebGL2RenderingContext"],
    read_buffer$0 = get_int(gl2ctx, "READ_BUFFER"),
    unpack_row_length = get_int(gl2ctx, "UNPACK_ROW_LENGTH"),
    unpack_skip_rows = get_int(gl2ctx, "UNPACK_SKIP_ROWS"),
    unpack_skip_pixels = get_int(gl2ctx, "UNPACK_SKIP_PIXELS"),
    pack_row_length = get_int(gl2ctx, "PACK_ROW_LENGTH"),
    pack_skip_rows = get_int(gl2ctx, "PACK_SKIP_ROWS"),
    pack_skip_pixels = get_int(gl2ctx, "PACK_SKIP_PIXELS"),
    color$1 = get_int(gl2ctx, "COLOR"),
    depth$0 = get_int(gl2ctx, "DEPTH"),
    stencil$0 = get_int(gl2ctx, "STENCIL"),
    red = get_int(gl2ctx, "RED"),
    rgb8 = get_int(gl2ctx, "RGB8"),
    rgba8 = get_int(gl2ctx, "RGBA8"),
    rgb10_a2 = get_int(gl2ctx, "RGB10_A2"),
    texture_binding_3d = get_int(gl2ctx, "TEXTURE_BINDING_3D"),
    unpack_skip_images = get_int(gl2ctx, "UNPACK_SKIP_IMAGES"),
    unpack_image_height = get_int(gl2ctx, "UNPACK_IMAGE_HEIGHT"),
    texture_3d = get_int(gl2ctx, "TEXTURE_3D"),
    texture_wrap_r = get_int(gl2ctx, "TEXTURE_WRAP_R"),
    max_3d_texture_size = get_int(gl2ctx, "MAX_3D_TEXTURE_SIZE"),
    unsigned_int_2_10_10_10_rev =
      get_int(gl2ctx, "UNSIGNED_INT_2_10_10_10_REV"),
    max_elements_vertices = get_int(gl2ctx, "MAX_ELEMENTS_VERTICES"),
    max_elements_indices = get_int(gl2ctx, "MAX_ELEMENTS_INDICES"),
    texture_min_lod = get_int(gl2ctx, "TEXTURE_MIN_LOD"),
    texture_max_lod = get_int(gl2ctx, "TEXTURE_MAX_LOD"),
    texture_base_level = get_int(gl2ctx, "TEXTURE_BASE_LEVEL"),
    texture_max_level = get_int(gl2ctx, "TEXTURE_MAX_LEVEL"),
    min = get_int(gl2ctx, "MIN"),
    max = get_int(gl2ctx, "MAX"),
    depth_component24 = get_int(gl2ctx, "DEPTH_COMPONENT24"),
    max_texture_lod_bias = get_int(gl2ctx, "MAX_TEXTURE_LOD_BIAS"),
    texture_compare_mode = get_int(gl2ctx, "TEXTURE_COMPARE_MODE"),
    texture_compare_func = get_int(gl2ctx, "TEXTURE_COMPARE_FUNC"),
    current_query = get_int(gl2ctx, "CURRENT_QUERY"),
    query_result = get_int(gl2ctx, "QUERY_RESULT"),
    query_result_available = get_int(gl2ctx, "QUERY_RESULT_AVAILABLE"),
    stream_read = get_int(gl2ctx, "STREAM_READ"),
    stream_copy = get_int(gl2ctx, "STREAM_COPY"),
    static_read = get_int(gl2ctx, "STATIC_READ"),
    static_copy = get_int(gl2ctx, "STATIC_COPY"),
    dynamic_read = get_int(gl2ctx, "DYNAMIC_READ"),
    dynamic_copy = get_int(gl2ctx, "DYNAMIC_COPY"),
    max_draw_buffers = get_int(gl2ctx, "MAX_DRAW_BUFFERS"),
    draw_buffer0 = get_int(gl2ctx, "DRAW_BUFFER0"),
    draw_buffer1 = get_int(gl2ctx, "DRAW_BUFFER1"),
    draw_buffer2 = get_int(gl2ctx, "DRAW_BUFFER2"),
    draw_buffer3 = get_int(gl2ctx, "DRAW_BUFFER3"),
    draw_buffer4 = get_int(gl2ctx, "DRAW_BUFFER4"),
    draw_buffer5 = get_int(gl2ctx, "DRAW_BUFFER5"),
    draw_buffer6 = get_int(gl2ctx, "DRAW_BUFFER6"),
    draw_buffer7 = get_int(gl2ctx, "DRAW_BUFFER7"),
    draw_buffer8 = get_int(gl2ctx, "DRAW_BUFFER8"),
    draw_buffer9 = get_int(gl2ctx, "DRAW_BUFFER9"),
    draw_buffer10 = get_int(gl2ctx, "DRAW_BUFFER10"),
    draw_buffer11 = get_int(gl2ctx, "DRAW_BUFFER11"),
    draw_buffer12 = get_int(gl2ctx, "DRAW_BUFFER12"),
    draw_buffer13 = get_int(gl2ctx, "DRAW_BUFFER13"),
    draw_buffer14 = get_int(gl2ctx, "DRAW_BUFFER14"),
    draw_buffer15 = get_int(gl2ctx, "DRAW_BUFFER15"),
    max_fragment_uniform_component =
      get_int(gl2ctx, "MAX_FRAGMENT_UNIFORM_COMPONENTS"),
    max_vertex_uniform_components =
      get_int(gl2ctx, "MAX_VERTEX_UNIFORM_COMPONENTS"),
    sampler_3d = get_int(gl2ctx, "SAMPLER_3D"),
    sampler_2d_shadow = get_int(gl2ctx, "SAMPLER_2D_SHADOW"),
    fragment_shader_derivative_hin =
      get_int(gl2ctx, "FRAGMENT_SHADER_DERIVATIVE_HINT"),
    pixel_pack_buffer = get_int(gl2ctx, "PIXEL_PACK_BUFFER"),
    pixel_unpack_buffer = get_int(gl2ctx, "PIXEL_UNPACK_BUFFER"),
    pixel_pack_buffer_binding = get_int(gl2ctx, "PIXEL_PACK_BUFFER_BINDING"),
    pixel_unpack_buffer_binding =
      get_int(gl2ctx, "PIXEL_UNPACK_BUFFER_BINDING"),
    float_mat2x3 = get_int(gl2ctx, "FLOAT_MAT2x3"),
    float_mat2x4 = get_int(gl2ctx, "FLOAT_MAT2x4"),
    float_mat3x2 = get_int(gl2ctx, "FLOAT_MAT3x2"),
    float_mat3x4 = get_int(gl2ctx, "FLOAT_MAT3x4"),
    float_mat4x2 = get_int(gl2ctx, "FLOAT_MAT4x2"),
    float_mat4x3 = get_int(gl2ctx, "FLOAT_MAT4x3"),
    srgb = get_int(gl2ctx, "SRGB"),
    srgb8 = get_int(gl2ctx, "SRGB8"),
    srgb8_alpha8 = get_int(gl2ctx, "SRGB8_ALPHA8"),
    compare_ref_to_texture = get_int(gl2ctx, "COMPARE_REF_TO_TEXTURE"),
    rgba32f = get_int(gl2ctx, "RGBA32F"),
    rgb32f = get_int(gl2ctx, "RGB32F"),
    rgba16f = get_int(gl2ctx, "RGBA16F"),
    rgb16f = get_int(gl2ctx, "RGB16F"),
    vertex_attrib_array_integer =
      get_int(gl2ctx, "VERTEX_ATTRIB_ARRAY_INTEGER"),
    max_array_texture_layers = get_int(gl2ctx, "MAX_ARRAY_TEXTURE_LAYERS"),
    min_program_texel_offset = get_int(gl2ctx, "MIN_PROGRAM_TEXEL_OFFSET"),
    max_program_texel_offset = get_int(gl2ctx, "MAX_PROGRAM_TEXEL_OFFSET"),
    max_varying_components = get_int(gl2ctx, "MAX_VARYING_COMPONENTS"),
    texture_2d_array = get_int(gl2ctx, "TEXTURE_2D_ARRAY"),
    texture_binding_2d_array = get_int(gl2ctx, "TEXTURE_BINDING_2D_ARRAY"),
    r11f_g11f_b10f = get_int(gl2ctx, "R11F_G11F_B10F"),
    unsigned_int_10f_11f_11f_rev =
      get_int(gl2ctx, "UNSIGNED_INT_10F_11F_11F_REV"),
    rgb9_e5 = get_int(gl2ctx, "RGB9_E5"),
    unsigned_int_5_9_9_9_rev = get_int(gl2ctx, "UNSIGNED_INT_5_9_9_9_REV"),
    transform_feedback_buffer_mode =
      get_int(gl2ctx, "TRANSFORM_FEEDBACK_BUFFER_MODE"),
    max_transform_feedback_separat =
      get_int(gl2ctx, "MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS"),
    transform_feedback_varyings$0 =
      get_int(gl2ctx, "TRANSFORM_FEEDBACK_VARYINGS"),
    transform_feedback_buffer_star =
      get_int(gl2ctx, "TRANSFORM_FEEDBACK_BUFFER_START"),
    transform_feedback_buffer_size =
      get_int(gl2ctx, "TRANSFORM_FEEDBACK_BUFFER_SIZE"),
    transform_feedback_primitives_ =
      get_int(gl2ctx, "TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN"),
    rasterizer_discard = get_int(gl2ctx, "RASTERIZER_DISCARD"),
    max_transform_feedback_interle =
      get_int(gl2ctx, "MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS"),
    max_transform_feedback_separat$0 =
      get_int(gl2ctx, "MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS"),
    interleaved_attribs = get_int(gl2ctx, "INTERLEAVED_ATTRIBS"),
    separate_attribs = get_int(gl2ctx, "SEPARATE_ATTRIBS"),
    transform_feedback_buffer = get_int(gl2ctx, "TRANSFORM_FEEDBACK_BUFFER"),
    transform_feedback_buffer_bind =
      get_int(gl2ctx, "TRANSFORM_FEEDBACK_BUFFER_BINDING"),
    rgba32ui = get_int(gl2ctx, "RGBA32UI"),
    rgb32ui = get_int(gl2ctx, "RGB32UI"),
    rgba16ui = get_int(gl2ctx, "RGBA16UI"),
    rgb16ui = get_int(gl2ctx, "RGB16UI"),
    rgba8ui = get_int(gl2ctx, "RGBA8UI"),
    rgb8ui = get_int(gl2ctx, "RGB8UI"),
    rgba32i = get_int(gl2ctx, "RGBA32I"),
    rgb32i = get_int(gl2ctx, "RGB32I"),
    rgba16i = get_int(gl2ctx, "RGBA16I"),
    rgb16i = get_int(gl2ctx, "RGB16I"),
    rgba8i = get_int(gl2ctx, "RGBA8I"),
    rgb8i = get_int(gl2ctx, "RGB8I"),
    red_integer = get_int(gl2ctx, "RED_INTEGER"),
    rgb_integer = get_int(gl2ctx, "RGB_INTEGER"),
    rgba_integer = get_int(gl2ctx, "RGBA_INTEGER"),
    sampler_2d_array = get_int(gl2ctx, "SAMPLER_2D_ARRAY"),
    sampler_2d_array_shadow = get_int(gl2ctx, "SAMPLER_2D_ARRAY_SHADOW"),
    sampler_cube_shadow = get_int(gl2ctx, "SAMPLER_CUBE_SHADOW"),
    unsigned_int_vec2 = get_int(gl2ctx, "UNSIGNED_INT_VEC2"),
    unsigned_int_vec3 = get_int(gl2ctx, "UNSIGNED_INT_VEC3"),
    unsigned_int_vec4 = get_int(gl2ctx, "UNSIGNED_INT_VEC4"),
    int_sampler_2d = get_int(gl2ctx, "INT_SAMPLER_2D"),
    int_sampler_3d = get_int(gl2ctx, "INT_SAMPLER_3D"),
    int_sampler_cube = get_int(gl2ctx, "INT_SAMPLER_CUBE"),
    int_sampler_2d_array = get_int(gl2ctx, "INT_SAMPLER_2D_ARRAY"),
    unsigned_int_sampler_2d = get_int(gl2ctx, "UNSIGNED_INT_SAMPLER_2D"),
    unsigned_int_sampler_3d = get_int(gl2ctx, "UNSIGNED_INT_SAMPLER_3D"),
    unsigned_int_sampler_cube = get_int(gl2ctx, "UNSIGNED_INT_SAMPLER_CUBE"),
    unsigned_int_sampler_2d_array =
      get_int(gl2ctx, "UNSIGNED_INT_SAMPLER_2D_ARRAY"),
    depth_component32f = get_int(gl2ctx, "DEPTH_COMPONENT32F"),
    depth32f_stencil8 = get_int(gl2ctx, "DEPTH32F_STENCIL8"),
    float_32_unsigned_int_24_8_rev =
      get_int(gl2ctx, "FLOAT_32_UNSIGNED_INT_24_8_REV"),
    framebuffer_attachment_color_e =
      get_int(gl2ctx, "FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING"),
    framebuffer_attachment_compone =
      get_int(gl2ctx, "FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE"),
    framebuffer_attachment_red_siz =
      get_int(gl2ctx, "FRAMEBUFFER_ATTACHMENT_RED_SIZE"),
    framebuffer_attachment_green_s =
      get_int(gl2ctx, "FRAMEBUFFER_ATTACHMENT_GREEN_SIZE"),
    framebuffer_attachment_blue_si =
      get_int(gl2ctx, "FRAMEBUFFER_ATTACHMENT_BLUE_SIZE"),
    framebuffer_attachment_alpha_s =
      get_int(gl2ctx, "FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE"),
    framebuffer_attachment_depth_s =
      get_int(gl2ctx, "FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE"),
    framebuffer_attachment_stencil =
      get_int(gl2ctx, "FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE"),
    framebuffer_default = get_int(gl2ctx, "FRAMEBUFFER_DEFAULT"),
    unsigned_int_24_8 = get_int(gl2ctx, "UNSIGNED_INT_24_8"),
    depth24_stencil8 = get_int(gl2ctx, "DEPTH24_STENCIL8"),
    unsigned_normalized = get_int(gl2ctx, "UNSIGNED_NORMALIZED"),
    draw_framebuffer_binding = get_int(gl2ctx, "DRAW_FRAMEBUFFER_BINDING"),
    read_framebuffer = get_int(gl2ctx, "READ_FRAMEBUFFER"),
    draw_framebuffer = get_int(gl2ctx, "DRAW_FRAMEBUFFER"),
    read_framebuffer_binding = get_int(gl2ctx, "READ_FRAMEBUFFER_BINDING"),
    renderbuffer_samples = get_int(gl2ctx, "RENDERBUFFER_SAMPLES"),
    framebuffer_attachment_texture$1 =
      get_int(gl2ctx, "FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER"),
    max_color_attachments = get_int(gl2ctx, "MAX_COLOR_ATTACHMENTS"),
    color_attachment1 = get_int(gl2ctx, "COLOR_ATTACHMENT1"),
    color_attachment2 = get_int(gl2ctx, "COLOR_ATTACHMENT2"),
    color_attachment3 = get_int(gl2ctx, "COLOR_ATTACHMENT3"),
    color_attachment4 = get_int(gl2ctx, "COLOR_ATTACHMENT4"),
    color_attachment5 = get_int(gl2ctx, "COLOR_ATTACHMENT5"),
    color_attachment6 = get_int(gl2ctx, "COLOR_ATTACHMENT6"),
    color_attachment7 = get_int(gl2ctx, "COLOR_ATTACHMENT7"),
    color_attachment8 = get_int(gl2ctx, "COLOR_ATTACHMENT8"),
    color_attachment9 = get_int(gl2ctx, "COLOR_ATTACHMENT9"),
    color_attachment10 = get_int(gl2ctx, "COLOR_ATTACHMENT10"),
    color_attachment11 = get_int(gl2ctx, "COLOR_ATTACHMENT11"),
    color_attachment12 = get_int(gl2ctx, "COLOR_ATTACHMENT12"),
    color_attachment13 = get_int(gl2ctx, "COLOR_ATTACHMENT13"),
    color_attachment14 = get_int(gl2ctx, "COLOR_ATTACHMENT14"),
    color_attachment15 = get_int(gl2ctx, "COLOR_ATTACHMENT15"),
    framebuffer_incomplete_multisa =
      get_int(gl2ctx, "FRAMEBUFFER_INCOMPLETE_MULTISAMPLE"),
    max_samples = get_int(gl2ctx, "MAX_SAMPLES"),
    half_float = get_int(gl2ctx, "HALF_FLOAT"),
    rg = get_int(gl2ctx, "RG"),
    rg_integer = get_int(gl2ctx, "RG_INTEGER"),
    r8 = get_int(gl2ctx, "R8"),
    rg8 = get_int(gl2ctx, "RG8"),
    r16f = get_int(gl2ctx, "R16F"),
    r32f = get_int(gl2ctx, "R32F"),
    rg16f = get_int(gl2ctx, "RG16F"),
    rg32f = get_int(gl2ctx, "RG32F"),
    r8i = get_int(gl2ctx, "R8I"),
    r8ui = get_int(gl2ctx, "R8UI"),
    r16i = get_int(gl2ctx, "R16I"),
    r16ui = get_int(gl2ctx, "R16UI"),
    r32i = get_int(gl2ctx, "R32I"),
    r32ui = get_int(gl2ctx, "R32UI"),
    rg8i = get_int(gl2ctx, "RG8I"),
    rg8ui = get_int(gl2ctx, "RG8UI"),
    rg16i = get_int(gl2ctx, "RG16I"),
    rg16ui = get_int(gl2ctx, "RG16UI"),
    rg32i = get_int(gl2ctx, "RG32I"),
    rg32ui = get_int(gl2ctx, "RG32UI"),
    vertex_array_binding = get_int(gl2ctx, "VERTEX_ARRAY_BINDING"),
    r8_snorm = get_int(gl2ctx, "R8_SNORM"),
    rg8_snorm = get_int(gl2ctx, "RG8_SNORM"),
    rgb8_snorm = get_int(gl2ctx, "RGB8_SNORM"),
    rgba8_snorm = get_int(gl2ctx, "RGBA8_SNORM"),
    signed_normalized = get_int(gl2ctx, "SIGNED_NORMALIZED"),
    copy_read_buffer = get_int(gl2ctx, "COPY_READ_BUFFER"),
    copy_write_buffer = get_int(gl2ctx, "COPY_WRITE_BUFFER"),
    copy_read_buffer_binding = get_int(gl2ctx, "COPY_READ_BUFFER_BINDING"),
    copy_write_buffer_binding = get_int(gl2ctx, "COPY_WRITE_BUFFER_BINDING"),
    uniform_buffer = get_int(gl2ctx, "UNIFORM_BUFFER"),
    uniform_buffer_binding = get_int(gl2ctx, "UNIFORM_BUFFER_BINDING"),
    uniform_buffer_start = get_int(gl2ctx, "UNIFORM_BUFFER_START"),
    uniform_buffer_size = get_int(gl2ctx, "UNIFORM_BUFFER_SIZE"),
    max_vertex_uniform_blocks = get_int(gl2ctx, "MAX_VERTEX_UNIFORM_BLOCKS"),
    max_fragment_uniform_blocks =
      get_int(gl2ctx, "MAX_FRAGMENT_UNIFORM_BLOCKS"),
    max_combined_uniform_blocks =
      get_int(gl2ctx, "MAX_COMBINED_UNIFORM_BLOCKS"),
    max_uniform_buffer_bindings =
      get_int(gl2ctx, "MAX_UNIFORM_BUFFER_BINDINGS"),
    max_uniform_block_size = get_int(gl2ctx, "MAX_UNIFORM_BLOCK_SIZE"),
    max_combined_vertex_uniform_co =
      get_int(gl2ctx, "MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS"),
    max_combined_fragment_uniform_ =
      get_int(gl2ctx, "MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS"),
    uniform_buffer_offset_alignmen =
      get_int(gl2ctx, "UNIFORM_BUFFER_OFFSET_ALIGNMENT"),
    active_uniform_blocks = get_int(gl2ctx, "ACTIVE_UNIFORM_BLOCKS"),
    uniform_type = get_int(gl2ctx, "UNIFORM_TYPE"),
    uniform_size = get_int(gl2ctx, "UNIFORM_SIZE"),
    uniform_block_index = get_int(gl2ctx, "UNIFORM_BLOCK_INDEX"),
    uniform_offset = get_int(gl2ctx, "UNIFORM_OFFSET"),
    uniform_array_stride = get_int(gl2ctx, "UNIFORM_ARRAY_STRIDE"),
    uniform_matrix_stride = get_int(gl2ctx, "UNIFORM_MATRIX_STRIDE"),
    uniform_is_row_major = get_int(gl2ctx, "UNIFORM_IS_ROW_MAJOR"),
    uniform_block_binding$0 = get_int(gl2ctx, "UNIFORM_BLOCK_BINDING"),
    uniform_block_data_size = get_int(gl2ctx, "UNIFORM_BLOCK_DATA_SIZE"),
    uniform_block_active_uniforms =
      get_int(gl2ctx, "UNIFORM_BLOCK_ACTIVE_UNIFORMS"),
    uniform_block_active_uniform_i =
      get_int(gl2ctx, "UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES"),
    uniform_block_referenced_by_ve =
      get_int(gl2ctx, "UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER"),
    uniform_block_referenced_by_fr =
      get_int(gl2ctx, "UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER"),
    invalid_index = get_int(gl2ctx, "INVALID_INDEX"),
    max_vertex_output_components =
      get_int(gl2ctx, "MAX_VERTEX_OUTPUT_COMPONENTS"),
    max_fragment_input_components =
      get_int(gl2ctx, "MAX_FRAGMENT_INPUT_COMPONENTS"),
    max_server_wait_timeout = get_int(gl2ctx, "MAX_SERVER_WAIT_TIMEOUT"),
    object_type = get_int(gl2ctx, "OBJECT_TYPE"),
    sync_condition = get_int(gl2ctx, "SYNC_CONDITION"),
    sync_status = get_int(gl2ctx, "SYNC_STATUS"),
    sync_flags = get_int(gl2ctx, "SYNC_FLAGS"),
    sync_fence = get_int(gl2ctx, "SYNC_FENCE"),
    sync_gpu_commands_complete = get_int(gl2ctx, "SYNC_GPU_COMMANDS_COMPLETE"),
    unsignaled = get_int(gl2ctx, "UNSIGNALED"),
    signaled = get_int(gl2ctx, "SIGNALED"),
    already_signaled = get_int(gl2ctx, "ALREADY_SIGNALED"),
    timeout_expired = get_int(gl2ctx, "TIMEOUT_EXPIRED"),
    condition_satisfied = get_int(gl2ctx, "CONDITION_SATISFIED"),
    wait_failed = get_int(gl2ctx, "WAIT_FAILED"),
    sync_flush_commands_bit = get_int(gl2ctx, "SYNC_FLUSH_COMMANDS_BIT"),
    vertex_attrib_array_divisor =
      get_int(gl2ctx, "VERTEX_ATTRIB_ARRAY_DIVISOR"),
    any_samples_passed = get_int(gl2ctx, "ANY_SAMPLES_PASSED"),
    any_samples_passed_conservativ =
      get_int(gl2ctx, "ANY_SAMPLES_PASSED_CONSERVATIVE"),
    sampler_binding = get_int(gl2ctx, "SAMPLER_BINDING"),
    rgb10_a2ui = get_int(gl2ctx, "RGB10_A2UI"),
    int_2_10_10_10_rev = get_int(gl2ctx, "INT_2_10_10_10_REV"),
    transform_feedback = get_int(gl2ctx, "TRANSFORM_FEEDBACK"),
    transform_feedback_paused = get_int(gl2ctx, "TRANSFORM_FEEDBACK_PAUSED"),
    transform_feedback_active = get_int(gl2ctx, "TRANSFORM_FEEDBACK_ACTIVE"),
    transform_feedback_binding = get_int(gl2ctx, "TRANSFORM_FEEDBACK_BINDING"),
    texture_immutable_format = get_int(gl2ctx, "TEXTURE_IMMUTABLE_FORMAT"),
    max_element_index = get_int(gl2ctx, "MAX_ELEMENT_INDEX"),
    texture_immutable_levels = get_int(gl2ctx, "TEXTURE_IMMUTABLE_LEVELS"),
    timeout_ignored = get_int(gl2ctx, "TIMEOUT_IGNORED"),
    max_client_wait_timeout_webgl =
      get_int(gl2ctx, "MAX_CLIENT_WAIT_TIMEOUT_WEBGL"),
    Brr_canvas =
      [0,
       [0,
        is_2d,
        is_identity,
        inverse,
        multiply,
        m11,
        m12,
        m13,
        m14,
        m21,
        m22,
        m23,
        m24,
        m31,
        m32,
        m33,
        m34,
        m41,
        m42,
        m43,
        m44,
        a,
        b,
        c,
        d,
        e,
        f,
        to_float32_array,
        of_float32_array,
        to_float64_array,
        of_float64_array],
       [0, v, tr, to_json, x, y, z, w],
       [0,
        create,
        of_el,
        to_el,
        w$0,
        h,
        set_w,
        set_h,
        set_size_to_layout_size,
        image_encode,
        to_data_url,
        to_blob,
        capture_stream],
       [0,
        Fill_rule,
        Image_smoothing_quality,
        Line_cap,
        Line_join,
        Text_align,
        Text_baseline,
        Text_direction,
        Composite_op,
        Repeat,
        [0,
         create$0,
         of_svg,
         of_path,
         add,
         close,
         move_to,
         line_to,
         qcurve_to,
         ccurve_to,
         arc_to,
         arc,
         rect,
         ellipse],
        image_src_of_el,
        image_src_of_jv,
        attrs_alpha,
        attrs_color_space,
        attrs_desynchronized,
        attrs_will_read_frequently,
        get_context,
        get_context,
        canvas,
        attrs,
        save,
        restore,
        image_smoothing_enabled,
        set_image_smoothing_enabled,
        image_smoothing_quality,
        set_image_smoothing_quality,
        global_alpha,
        set_global_alpha,
        global_composite_op,
        set_global_composite_op,
        filter,
        set_filter,
        get_transform,
        set_transform,
        set_transform$0,
        reset_transform,
        transform,
        transform$0,
        translate,
        rotate,
        scale,
        set_stroke_style,
        set_fill_style,
        color$0,
        gradient_style,
        linear_gradient,
        radial_gradient,
        pattern_style,
        pattern,
        line_width,
        set_line_width,
        line_cap,
        set_line_cap,
        line_join,
        set_line_join,
        miter_limit,
        set_miter_limit,
        line_dash,
        set_line_dash,
        line_dash_offset,
        set_line_dash_offset,
        shadow_blur,
        set_shadow_blur,
        shadow_offset_x,
        set_shadow_offset_x,
        shadow_offset_y,
        set_shadow_offset_y,
        shadow_color,
        set_shadow_color,
        font,
        set_font,
        text_align,
        set_text_align,
        text_baseline,
        set_text_baseline,
        text_direction,
        set_text_direction,
        clear_rect,
        fill_rect,
        stroke_rect,
        fill,
        stroke,
        clip,
        draw_focus_if_needed,
        scroll_path_into_view,
        is_point_in_fill,
        is_point_in_stroke,
        fill_text,
        stroke_text,
        Text_metrics,
        measure_text,
        draw_image,
        draw_image_in_rect,
        draw_sub_image_in_rect,
        [0, create$1, w$1, h$0, data, color_space],
        create_image_data,
        get_image_data,
        put_image_data,
        put_sub_image_data],
       [0,
        [0,
         Power_preference,
         v$0,
         alpha,
         depth,
         stencil,
         antialias,
         premultiplied_alpha,
         preserve_drawing_buffer,
         power_preference,
         desynchronized],
        get_context$0,
        get_context$0,
        canvas$0,
        drawing_buffer_width,
        drawing_buffer_height,
        attrs$0,
        is_context_lost,
        get_supported_extensions,
        get_extension,
        Active_info,
        Shader_precision_format,
        Tex_image_source,
        active_texture,
        attach_shader,
        begin_query,
        begin_transform_feedback,
        bind_attrib_location,
        bind_buffer,
        bind_buffer_base,
        bind_buffer_range,
        bind_framebuffer,
        bind_renderbuffer,
        bind_sampler,
        bind_texture,
        bind_transform_feedback,
        bind_vertex_array,
        blend_color,
        blend_equation,
        blend_equation_separate,
        blend_func,
        blend_func_separate,
        blit_framebuffer,
        buffer_data,
        buffer_data_size,
        buffer_sub_data,
        check_framebuffer_status,
        clear$0,
        clear_bufferfi,
        clear_bufferfv,
        clear_bufferiv,
        clear_bufferuiv,
        clear_color,
        clear_depth,
        clear_stencil,
        client_wait_sync,
        color_mask,
        compile_shader,
        compressed_tex_image2d,
        compressed_tex_image2d_size,
        compressed_tex_image3d,
        compressed_tex_image3d_size,
        compressed_tex_sub_image2d,
        compressed_tex_sub_image2d_siz,
        compressed_tex_sub_image3d,
        compressed_tex_sub_image3d_siz,
        copy_buffer_sub_data,
        copy_tex_image2d,
        copy_tex_sub_image2d,
        copy_tex_sub_image3d,
        create_buffer,
        create_framebuffer,
        create_program,
        create_query,
        create_renderbuffer,
        create_sampler,
        create_shader,
        create_texture,
        create_transform_feedback,
        create_vertex_array,
        cull_face,
        delete_buffer,
        delete_framebuffer,
        delete_program,
        delete_query,
        delete_renderbuffer,
        delete_sampler,
        delete_shader,
        delete_sync,
        delete_texture,
        delete_transform_feedback,
        delete_vertex_array,
        depth_func,
        depth_mask,
        detach_shader,
        disable,
        disable_vertex_attrib_array,
        draw_arrays,
        draw_arrays_instanced,
        draw_buffers,
        draw_elements,
        draw_elements_instanced,
        draw_range_elements,
        enable,
        enable_vertex_attrib_array,
        end_query,
        end_transform_feedback,
        fence_sync,
        finish,
        flush,
        framebuffer_renderbuffer,
        framebuffer_texture2d,
        framebuffer_texture_layer,
        front_face,
        generate_mipmap,
        get_active_attrib,
        get_active_uniform,
        get_active_uniform_block_name,
        get_active_uniform_block_param,
        get_active_uniforms,
        get_attached_shaders,
        get_attrib_location,
        get_buffer_parameter,
        get_buffer_sub_data,
        get_error,
        get_frag_data_location,
        get_framebuffer_attachment_par,
        get_indexed_parameter,
        get_internalformat_parameter,
        get_parameter,
        get_program_info_log,
        get_program_parameter,
        get_query,
        get_query_parameter,
        get_renderbuffer_parameter,
        get_sampler_parameter,
        get_shader_info_log,
        get_shader_parameter,
        get_shader_precision_format,
        get_shader_source,
        get_sync_parameter,
        get_tex_parameter,
        get_transform_feedback_varying,
        get_uniform,
        get_uniform_block_index,
        get_uniform_indices,
        get_uniform_location,
        get_vertex_attrib,
        get_vertex_attrib_offset,
        hint,
        invalidate_framebuffer,
        invalidate_sub_framebuffer,
        is_buffer,
        is_enabled,
        is_framebuffer,
        is_program,
        is_query,
        is_renderbuffer,
        is_sampler,
        is_shader,
        is_texture,
        is_transform_feedback,
        is_vertex_array,
        line_width$0,
        link_program,
        pause_transform_feedback,
        pixel_storei,
        polygon_offset,
        read_buffer,
        read_pixels_to_pixel_pack,
        read_pixels,
        renderbuffer_storage,
        renderbuffer_storage_multisamp,
        resume_transform_feedback,
        sample_coverage,
        sampler_parameterf,
        sampler_parameteri,
        scissor,
        shader_source,
        stencil_func,
        stencil_func_separate,
        stencil_mask,
        stencil_mask_separate,
        stencil_op,
        stencil_op_separate,
        tex_image2d,
        tex_image2d_of_source,
        tex_image2d_of_pixel_unpack,
        tex_image3d,
        tex_image3d_of_source,
        tex_image3d_of_pixel_unpack,
        tex_parameterf,
        tex_parameteri,
        tex_storage2d,
        tex_storage3d,
        tex_sub_image2d,
        tex_sub_image2d_of_source,
        tex_sub_image2d_of_pixel_unpac,
        tex_sub_image3d,
        tex_sub_image3d_of_source,
        tex_sub_image3d_of_pixel_unpac,
        transform_feedback_varyings,
        uniform1f,
        uniform1fv,
        uniform1i,
        uniform1iv,
        uniform1ui,
        uniform1uiv,
        uniform2f,
        uniform2fv,
        uniform2i,
        uniform2iv,
        uniform2ui,
        uniform2uiv,
        uniform3f,
        uniform3fv,
        uniform3i,
        uniform3iv,
        uniform3ui,
        uniform3uiv,
        uniform4f,
        uniform4fv,
        uniform4i,
        uniform4iv,
        uniform4ui,
        uniform4uiv,
        uniform_block_binding,
        uniform_matrix2fv,
        uniform_matrix2x3fv,
        uniform_matrix2x4fv,
        uniform_matrix3fv,
        uniform_matrix3x2fv,
        uniform_matrix3x4fv,
        uniform_matrix4fv,
        uniform_matrix4x2fv,
        uniform_matrix4x3fv,
        use_program,
        validate_program,
        vertex_attrib1f,
        vertex_attrib1fv,
        vertex_attrib2f,
        vertex_attrib2fv,
        vertex_attrib3f,
        vertex_attrib3fv,
        vertex_attrib4f,
        vertex_attrib4fv,
        vertex_attrib_divisor,
        vertex_attrib_i4i,
        vertex_attrib_i4iv,
        vertex_attrib_i4ui,
        vertex_attrib_i4uiv,
        vertex_attrib_ipointer,
        vertex_attrib_pointer,
        viewport,
        wait_sync,
        active_attributes,
        active_texture$0,
        active_uniform_blocks,
        active_uniforms,
        aliased_line_width_range,
        aliased_point_size_range,
        alpha$0,
        alpha_bits,
        already_signaled,
        always,
        any_samples_passed,
        any_samples_passed_conservativ,
        array_buffer,
        array_buffer_binding,
        attached_shaders,
        back,
        blend,
        blend_color$0,
        blend_dst_alpha,
        blend_dst_rgb,
        blend_equation$0,
        blend_equation_alpha,
        blend_equation_rgb,
        blend_src_alpha,
        blend_src_rgb,
        blue_bits,
        bool,
        bool_vec2,
        bool_vec3,
        bool_vec4,
        browser_default_webgl,
        buffer_size,
        buffer_usage,
        byte$0,
        ccw,
        clamp_to_edge,
        color$1,
        color_attachment0,
        color_attachment1,
        color_attachment10,
        color_attachment11,
        color_attachment12,
        color_attachment13,
        color_attachment14,
        color_attachment15,
        color_attachment2,
        color_attachment3,
        color_attachment4,
        color_attachment5,
        color_attachment6,
        color_attachment7,
        color_attachment8,
        color_attachment9,
        color_buffer_bit,
        color_clear_value,
        color_writemask,
        compare_ref_to_texture,
        compile_status,
        compressed_texture_formats,
        condition_satisfied,
        constant_alpha,
        constant_color,
        context_lost_webgl,
        copy_read_buffer,
        copy_read_buffer_binding,
        copy_write_buffer,
        copy_write_buffer_binding,
        cull_face$0,
        cull_face_mode,
        current_program,
        current_query,
        current_vertex_attrib,
        cw,
        decr,
        decr_wrap,
        delete_status,
        depth$0,
        depth24_stencil8,
        depth32f_stencil8,
        depth_attachment,
        depth_bits,
        depth_buffer_bit,
        depth_clear_value,
        depth_component,
        depth_component16,
        depth_component24,
        depth_component32f,
        depth_func$0,
        depth_range,
        depth_stencil,
        depth_stencil_attachment,
        depth_test,
        depth_writemask,
        dither,
        dont_care,
        draw_buffer0,
        draw_buffer1,
        draw_buffer10,
        draw_buffer11,
        draw_buffer12,
        draw_buffer13,
        draw_buffer14,
        draw_buffer15,
        draw_buffer2,
        draw_buffer3,
        draw_buffer4,
        draw_buffer5,
        draw_buffer6,
        draw_buffer7,
        draw_buffer8,
        draw_buffer9,
        draw_framebuffer,
        draw_framebuffer_binding,
        dst_alpha,
        dst_color,
        dynamic_copy,
        dynamic_draw,
        dynamic_read,
        element_array_buffer,
        element_array_buffer_binding,
        equal,
        fastest,
        float$0,
        float_32_unsigned_int_24_8_rev,
        float_mat2,
        float_mat2x3,
        float_mat2x4,
        float_mat3,
        float_mat3x2,
        float_mat3x4,
        float_mat4,
        float_mat4x2,
        float_mat4x3,
        float_vec2,
        float_vec3,
        float_vec4,
        fragment_shader,
        fragment_shader_derivative_hin,
        framebuffer,
        framebuffer_attachment_alpha_s,
        framebuffer_attachment_blue_si,
        framebuffer_attachment_color_e,
        framebuffer_attachment_compone,
        framebuffer_attachment_depth_s,
        framebuffer_attachment_green_s,
        framebuffer_attachment_object_$0,
        framebuffer_attachment_object_,
        framebuffer_attachment_red_siz,
        framebuffer_attachment_stencil,
        framebuffer_attachment_texture$0,
        framebuffer_attachment_texture$1,
        framebuffer_attachment_texture,
        framebuffer_binding,
        framebuffer_complete,
        framebuffer_default,
        framebuffer_incomplete_attachm,
        framebuffer_incomplete_dimensi,
        framebuffer_incomplete_missing,
        framebuffer_incomplete_multisa,
        framebuffer_unsupported,
        front,
        front_and_back,
        front_face$0,
        func_add,
        func_reverse_subtract,
        func_subtract,
        generate_mipmap_hint,
        gequal,
        greater,
        green_bits,
        half_float,
        high_float,
        high_int,
        implementation_color_read_form,
        implementation_color_read_type,
        incr,
        incr_wrap,
        int$0,
        int_2_10_10_10_rev,
        int_sampler_2d,
        int_sampler_2d_array,
        int_sampler_3d,
        int_sampler_cube,
        int_vec2,
        int_vec3,
        int_vec4,
        interleaved_attribs,
        invalid_enum,
        invalid_framebuffer_operation,
        invalid_index,
        invalid_operation,
        invalid_value,
        invert,
        keep,
        lequal,
        less,
        line_loop,
        line_strip,
        line_width$1,
        linear,
        linear_mipmap_linear,
        linear_mipmap_nearest,
        lines,
        link_status,
        low_float,
        low_int,
        luminance,
        luminance_alpha,
        max,
        max_3d_texture_size,
        max_array_texture_layers,
        max_client_wait_timeout_webgl,
        max_color_attachments,
        max_combined_fragment_uniform_,
        max_combined_texture_image_uni,
        max_combined_uniform_blocks,
        max_combined_vertex_uniform_co,
        max_cube_map_texture_size,
        max_draw_buffers,
        max_element_index,
        max_elements_indices,
        max_elements_vertices,
        max_fragment_input_components,
        max_fragment_uniform_blocks,
        max_fragment_uniform_component,
        max_fragment_uniform_vectors,
        max_program_texel_offset,
        max_renderbuffer_size,
        max_samples,
        max_server_wait_timeout,
        max_texture_image_units,
        max_texture_lod_bias,
        max_texture_size,
        max_transform_feedback_interle,
        max_transform_feedback_separat$0,
        max_transform_feedback_separat,
        max_uniform_block_size,
        max_uniform_buffer_bindings,
        max_varying_components,
        max_varying_vectors,
        max_vertex_attribs,
        max_vertex_output_components,
        max_vertex_texture_image_units,
        max_vertex_uniform_blocks,
        max_vertex_uniform_components,
        max_vertex_uniform_vectors,
        max_viewport_dims,
        medium_float,
        medium_int,
        min,
        min_program_texel_offset,
        mirrored_repeat,
        nearest,
        nearest_mipmap_linear,
        nearest_mipmap_nearest,
        never,
        nicest,
        no_error,
        none,
        notequal,
        object_type,
        one,
        one_minus_constant_alpha,
        one_minus_constant_color,
        one_minus_dst_alpha,
        one_minus_dst_color,
        one_minus_src_alpha,
        one_minus_src_color,
        out_of_memory,
        pack_alignment,
        pack_row_length,
        pack_skip_pixels,
        pack_skip_rows,
        pixel_pack_buffer,
        pixel_pack_buffer_binding,
        pixel_unpack_buffer,
        pixel_unpack_buffer_binding,
        points,
        polygon_offset_factor,
        polygon_offset_fill,
        polygon_offset_units,
        query_result,
        query_result_available,
        r11f_g11f_b10f,
        r16f,
        r16i,
        r16ui,
        r32f,
        r32i,
        r32ui,
        r8,
        r8_snorm,
        r8i,
        r8ui,
        rasterizer_discard,
        read_buffer$0,
        read_framebuffer,
        read_framebuffer_binding,
        red,
        red_bits,
        red_integer,
        renderbuffer,
        renderbuffer_alpha_size,
        renderbuffer_binding,
        renderbuffer_blue_size,
        renderbuffer_depth_size,
        renderbuffer_green_size,
        renderbuffer_height,
        renderbuffer_internal_format,
        renderbuffer_red_size,
        renderbuffer_samples,
        renderbuffer_stencil_size,
        renderbuffer_width,
        renderer,
        repeat,
        replace,
        rg,
        rg16f,
        rg16i,
        rg16ui,
        rg32f,
        rg32i,
        rg32ui,
        rg8,
        rg8_snorm,
        rg8i,
        rg8ui,
        rg_integer,
        rgb,
        rgb10_a2,
        rgb10_a2ui,
        rgb16f,
        rgb16i,
        rgb16ui,
        rgb32f,
        rgb32i,
        rgb32ui,
        rgb565,
        rgb5_a1,
        rgb8,
        rgb8_snorm,
        rgb8i,
        rgb8ui,
        rgb9_e5,
        rgb_integer,
        rgba,
        rgba16f,
        rgba16i,
        rgba16ui,
        rgba32f,
        rgba32i,
        rgba32ui,
        rgba4,
        rgba8,
        rgba8_snorm,
        rgba8i,
        rgba8ui,
        rgba_integer,
        sample_alpha_to_coverage,
        sample_buffers,
        sample_coverage$0,
        sample_coverage_invert,
        sample_coverage_value,
        sampler_2d,
        sampler_2d_array,
        sampler_2d_array_shadow,
        sampler_2d_shadow,
        sampler_3d,
        sampler_binding,
        sampler_cube,
        sampler_cube_shadow,
        samples,
        scissor_box,
        scissor_test,
        separate_attribs,
        shader_type,
        shading_language_version,
        short$0,
        signaled,
        signed_normalized,
        src_alpha,
        src_alpha_saturate,
        src_color,
        srgb,
        srgb8,
        srgb8_alpha8,
        static_copy,
        static_draw,
        static_read,
        stencil$0,
        stencil_attachment,
        stencil_back_fail,
        stencil_back_func,
        stencil_back_pass_depth_fail,
        stencil_back_pass_depth_pass,
        stencil_back_ref,
        stencil_back_value_mask,
        stencil_back_writemask,
        stencil_bits,
        stencil_buffer_bit,
        stencil_clear_value,
        stencil_fail,
        stencil_func$0,
        stencil_index8,
        stencil_pass_depth_fail,
        stencil_pass_depth_pass,
        stencil_ref,
        stencil_test,
        stencil_value_mask,
        stencil_writemask,
        stream_copy,
        stream_draw,
        stream_read,
        subpixel_bits,
        sync_condition,
        sync_fence,
        sync_flags,
        sync_flush_commands_bit,
        sync_gpu_commands_complete,
        sync_status,
        texture,
        texture0,
        texture1,
        texture10,
        texture11,
        texture12,
        texture13,
        texture14,
        texture15,
        texture16,
        texture17,
        texture18,
        texture19,
        texture2,
        texture20,
        texture21,
        texture22,
        texture23,
        texture24,
        texture25,
        texture26,
        texture27,
        texture28,
        texture29,
        texture3,
        texture30,
        texture31,
        texture4,
        texture5,
        texture6,
        texture7,
        texture8,
        texture9,
        texture_2d,
        texture_2d_array,
        texture_3d,
        texture_base_level,
        texture_binding_2d,
        texture_binding_2d_array,
        texture_binding_3d,
        texture_binding_cube_map,
        texture_compare_func,
        texture_compare_mode,
        texture_cube_map,
        texture_cube_map_negative_x,
        texture_cube_map_negative_y,
        texture_cube_map_negative_z,
        texture_cube_map_positive_x,
        texture_cube_map_positive_y,
        texture_cube_map_positive_z,
        texture_immutable_format,
        texture_immutable_levels,
        texture_mag_filter,
        texture_max_level,
        texture_max_lod,
        texture_min_filter,
        texture_min_lod,
        texture_wrap_r,
        texture_wrap_s,
        texture_wrap_t,
        timeout_expired,
        timeout_ignored,
        transform_feedback,
        transform_feedback_active,
        transform_feedback_binding,
        transform_feedback_buffer,
        transform_feedback_buffer_bind,
        transform_feedback_buffer_mode,
        transform_feedback_buffer_size,
        transform_feedback_buffer_star,
        transform_feedback_paused,
        transform_feedback_primitives_,
        transform_feedback_varyings$0,
        triangle_fan,
        triangle_strip,
        triangles,
        uniform_array_stride,
        uniform_block_active_uniform_i,
        uniform_block_active_uniforms,
        uniform_block_binding$0,
        uniform_block_data_size,
        uniform_block_index,
        uniform_block_referenced_by_fr,
        uniform_block_referenced_by_ve,
        uniform_buffer,
        uniform_buffer_binding,
        uniform_buffer_offset_alignmen,
        uniform_buffer_size,
        uniform_buffer_start,
        uniform_is_row_major,
        uniform_matrix_stride,
        uniform_offset,
        uniform_size,
        uniform_type,
        unpack_alignment,
        unpack_colorspace_conversion_w,
        unpack_flip_y_webgl,
        unpack_image_height,
        unpack_premultiply_alpha_webgl,
        unpack_row_length,
        unpack_skip_images,
        unpack_skip_pixels,
        unpack_skip_rows,
        unsignaled,
        unsigned_byte,
        unsigned_int,
        unsigned_int_10f_11f_11f_rev,
        unsigned_int_24_8,
        unsigned_int_2_10_10_10_rev,
        unsigned_int_5_9_9_9_rev,
        unsigned_int_sampler_2d,
        unsigned_int_sampler_2d_array,
        unsigned_int_sampler_3d,
        unsigned_int_sampler_cube,
        unsigned_int_vec2,
        unsigned_int_vec3,
        unsigned_int_vec4,
        unsigned_normalized,
        unsigned_short,
        unsigned_short_4_4_4_4,
        unsigned_short_5_5_5_1,
        unsigned_short_5_6_5,
        validate_status,
        vendor,
        version,
        vertex_array_binding,
        vertex_attrib_array_buffer_bin,
        vertex_attrib_array_divisor,
        vertex_attrib_array_enabled,
        vertex_attrib_array_integer,
        vertex_attrib_array_normalized,
        vertex_attrib_array_pointer,
        vertex_attrib_array_size,
        vertex_attrib_array_stride,
        vertex_attrib_array_type,
        vertex_shader,
        viewport$0,
        wait_failed,
        zero]];
   runtime.caml_register_global(1067, Brr_canvas, "Brr_canvas");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Brr_webgpu
//# unitInfo: Requires: Fut, Jstr, Jv, Stdlib__List, Stdlib__Option
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_1d = "1d",
    cst_2d = "2d",
    cst_3d = "3d",
    cst_add$0 = "add",
    cst_aspect$2 = "aspect",
    cst_auto = "auto",
    cst_beginningOfPassWriteIndex$1 = "beginningOfPassWriteIndex",
    cst_binding$4 = "binding",
    cst_buffer$0 = "buffer",
    cst_bytesPerRow$1 = "bytesPerRow",
    cst_colorSpace$2 = "colorSpace",
    cst_compare$1 = "compare",
    cst_constants = "constants",
    cst_count$2 = "count",
    cst_depth32float_stencil8 = "depth32float-stencil8",
    cst_depthOrArrayLayers$1 = "depthOrArrayLayers",
    cst_depthReadOnly$1 = "depthReadOnly",
    cst_device$0 = "device",
    cst_dimension$2 = "dimension",
    cst_endOfPassWriteIndex$1 = "endOfPassWriteIndex",
    cst_entries = "entries",
    cst_entryPoint$2 = "entryPoint",
    cst_error = "error",
    cst_features = "features",
    cst_format$5 = "format",
    cst_height$1 = "height",
    cst_internal = "internal",
    cst_label$36 = "label",
    cst_layout$2 = "layout",
    cst_limits = "limits",
    cst_linear = "linear",
    cst_maxBindGroups$1 = "maxBindGroups",
    cst_maxBindGroupsPlusVertexBuf$1 = "maxBindGroupsPlusVertexBuffers",
    cst_maxBindingsPerBindGroup$1 = "maxBindingsPerBindGroup",
    cst_maxBufferSize$1 = "maxBufferSize",
    cst_maxColorAttachmentBytesPer$1 = "maxColorAttachmentBytesPerSample",
    cst_maxColorAttachments$1 = "maxColorAttachments",
    cst_maxComputeInvocationsPerWo$1 = "maxComputeInvocationsPerWorkgroup",
    cst_maxComputeWorkgroupSizeX$1 = "maxComputeWorkgroupSizeX",
    cst_maxComputeWorkgroupSizeY$1 = "maxComputeWorkgroupSizeY",
    cst_maxComputeWorkgroupSizeZ$1 = "maxComputeWorkgroupSizeZ",
    cst_maxComputeWorkgroupStorage$1 = "maxComputeWorkgroupStorageSize",
    cst_maxComputeWorkgroupsPerDim$1 = "maxComputeWorkgroupsPerDimension",
    cst_maxDynamicStorageBuffersPe$1 =
      "maxDynamicStorageBuffersPerPipelineLayout",
    cst_maxDynamicUniformBuffersPe$1 =
      "maxDynamicUniformBuffersPerPipelineLayout",
    cst_maxInterStageShaderCompone$1 = "maxInterStageShaderComponents",
    cst_maxInterStageShaderVariabl$1 = "maxInterStageShaderVariables",
    cst_maxSampledTexturesPerShade$1 = "maxSampledTexturesPerShaderStage",
    cst_maxSamplersPerShaderStage$1 = "maxSamplersPerShaderStage",
    cst_maxStorageBufferBindingSiz$1 = "maxStorageBufferBindingSize",
    cst_maxStorageBuffersPerShader$1 = "maxStorageBuffersPerShaderStage",
    cst_maxStorageTexturesPerShade$1 = "maxStorageTexturesPerShaderStage",
    cst_maxTextureArrayLayers$1 = "maxTextureArrayLayers",
    cst_maxTextureDimension1D$1 = "maxTextureDimension1D",
    cst_maxTextureDimension2D$1 = "maxTextureDimension2D",
    cst_maxTextureDimension3D$1 = "maxTextureDimension3D",
    cst_maxUniformBufferBindingSiz$1 = "maxUniformBufferBindingSize",
    cst_maxUniformBuffersPerShader$1 = "maxUniformBuffersPerShaderStage",
    cst_maxVertexAttributes$1 = "maxVertexAttributes",
    cst_maxVertexBufferArrayStride$1 = "maxVertexBufferArrayStride",
    cst_maxVertexBuffers$1 = "maxVertexBuffers",
    cst_message$3 = "message",
    cst_minStorageBufferOffsetAlig$1 = "minStorageBufferOffsetAlignment",
    cst_minUniformBufferOffsetAlig$1 = "minUniformBufferOffsetAlignment",
    cst_mipLevel$1 = "mipLevel",
    cst_mipLevelCount$2 = "mipLevelCount",
    cst_module = "module",
    cst_nearest = "nearest",
    cst_offset$4 = "offset",
    cst_origin = "origin",
    cst_querySet = "querySet",
    cst_reason$1 = "reason",
    cst_resource = "resource",
    cst_rowsPerImage$1 = "rowsPerImage",
    cst_sampleCount$2 = "sampleCount",
    cst_size$2 = "size",
    cst_source = "source",
    cst_stencilReadOnly$1 = "stencilReadOnly",
    cst_texture$0 = "texture",
    cst_timestampWrites$0 = "timestampWrites",
    cst_type$4 = "type",
    cst_uint32 = "uint32",
    cst_usage$4 = "usage",
    cst_validation = "validation",
    cst_vertex = "vertex",
    cst_view = "view",
    cst_viewDimension$1 = "viewDimension",
    cst_viewFormats = "viewFormats",
    cst_width$1 = "width",
    cst_x$1 = "x",
    cst_y$1 = "y",
    cst_zero = "zero";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Jv = global_data.Jv,
    Fut = global_data.Fut,
    Stdlib_Option = global_data.Stdlib__Option,
    Stdlib_List = global_data.Stdlib__List,
    cst_x = cst_x$1,
    cst_y = cst_y$1;
   function v(x, y){
    var o = {};
    caml_call3(Jv[20][3], o, cst_x, x);
    caml_call3(Jv[20][3], o, cst_y, y);
    return o;
   }
   var Origin_2d = [0, v], cst_x$0 = cst_x$1, cst_y$0 = cst_y$1, cst_z = "z";
   function v$0(x, y, z){
    var o = {};
    caml_call3(Jv[20][3], o, cst_x$0, x);
    caml_call3(Jv[20][3], o, cst_y$0, y);
    caml_call3(Jv[20][3], o, cst_z, z);
    return o;
   }
   var
    Origin_3d = [0, v$0],
    cst_width = cst_width$1,
    cst_height = cst_height$1,
    cst_depthOrArrayLayers = cst_depthOrArrayLayers$1;
   function v$1(opt, _a6_, w, param){
    if(opt) var sth = opt[1], h = sth; else var h = 1;
    if(_a6_) var sth$0 = _a6_[1], d = sth$0; else var d = 1;
    var o = {};
    caml_call3(Jv[20][3], o, cst_width, w);
    caml_call3(Jv[20][3], o, cst_height, h);
    caml_call3(Jv[20][3], o, cst_depthOrArrayLayers, d);
    return o;
   }
   var
    Extent_3d = [0, v$1],
    never = "never",
    less = "less",
    equal = "equal",
    less_equal = "less-equal",
    greater = "greater",
    not_equal = "not-equal",
    greater_equal = "greater-equal",
    always = "always",
    Compare_function =
      [0,
       never,
       less,
       equal,
       less_equal,
       greater,
       not_equal,
       greater_equal,
       always],
    unmapped = "unmapped",
    pending = "pending",
    mapped = "mapped",
    Map_state = [0, unmapped, pending, mapped],
    Map_mode = [0, 1, 2],
    Usage = [0, 1, 2, 4, 8, 16, 32, 64, 128, 256, 512],
    cst_label = cst_label$36,
    cst_size = cst_size$2,
    cst_usage = cst_usage$4,
    cst_mappedAtCreation = "mappedAtCreation";
   function v$2(label, size, usage, mapped_at_creation, param){
    var d = {};
    caml_call3(Jv[23][4], d, cst_label, label);
    caml_call3(Jv[20][4], d, cst_size, size);
    caml_call3(Jv[20][4], d, cst_usage, usage);
    caml_call3(Jv[19][4], d, cst_mappedAtCreation, mapped_at_creation);
    return d;
   }
   var
    Descriptor = [0, v$2],
    cst_label$0 = cst_label$36,
    cst_size$0 = cst_size$2,
    cst_usage$0 = cst_usage$4,
    cst_mapState = "mapState";
   function label(b){return caml_call2(Jv[23][2], b, cst_label$0);}
   function size(b){return caml_call2(Jv[20][2], b, cst_size$0);}
   function usage(b){return caml_call2(Jv[20][2], b, cst_usage$0);}
   function map_state(b){return caml_call2(Jv[23][2], b, cst_mapState);}
   function map_async(size, offset, b, mode){
    var
     size$0 = caml_call3(Jv[11], Jv[5], function(_a5_){return _a5_;}, size),
     offset$0 =
       caml_call3(Jv[11], Jv[5], function(_a4_){return _a4_;}, offset),
     _a2_ = b.mapAsync(mode, offset$0, size$0);
    return caml_call1(caml_call1(Fut[11], function(_a3_){return 0;}), _a2_);
   }
   function get_mapped_range(size, offset, b){
    var
     size$0 = caml_call3(Jv[11], Jv[5], function(_a1_){return _a1_;}, size),
     offset$0 =
       caml_call3(Jv[11], Jv[5], function(_a0_){return _a0_;}, offset);
    return b.getMappedRange(size$0, offset$0);
   }
   function unmap(b){b.unmap(); return 0;}
   function destroy(b){b.destroy(); return 0;}
   var
    uniform = "uniform",
    storage = "storage",
    read_only_storage = "read-only-storage",
    Binding_type = [0, uniform, storage, read_only_storage],
    cst_type = cst_type$4,
    cst_hasDynamicOffset = "hasDynamicOffset",
    cst_minBindingSize = "minBindingSize";
   function v$3(type, has_dynamic_offset, min_binding_size, param){
    var l = {};
    caml_call3(Jv[23][4], l, cst_type, type);
    caml_call3(Jv[19][4], l, cst_hasDynamicOffset, has_dynamic_offset);
    caml_call3(Jv[20][4], l, cst_minBindingSize, min_binding_size);
    return l;
   }
   var
    Binding_layout = [0, v$3],
    cst_offset = cst_offset$4,
    cst_size$1 = cst_size$2;
   function v$4(offset, size, buffer, param){
    var b = {};
    b[cst_buffer$0] = buffer;
    caml_call3(Jv[20][4], b, cst_offset, offset);
    caml_call3(Jv[20][4], b, cst_size$1, size);
    return b;
   }
   var
    Binding = [0, v$4],
    Buffer =
      [0,
       Map_state,
       Map_mode,
       Usage,
       Descriptor,
       label,
       size,
       usage,
       map_state,
       map_async,
       get_mapped_range,
       unmap,
       destroy,
       Binding_type,
       Binding_layout,
       Binding],
    r8unorm = "r8unorm",
    r8snorm = "r8snorm",
    r8uint = "r8uint",
    r8sint = "r8sint",
    r16uint = "r16uint",
    r16sint = "r16sint",
    r16float = "r16float",
    rg8unorm = "rg8unorm",
    rg8snorm = "rg8snorm",
    rg8uint = "rg8uint",
    rg8sint = "rg8sint",
    r32uint = "r32uint",
    r32sint = "r32sint",
    r32float = "r32float",
    rg16uint = "rg16uint",
    rg16sint = "rg16sint",
    rg16float = "rg16float",
    rgba8unorm = "rgba8unorm",
    rgba8unorm_srgb = "rgba8unorm-srgb",
    rgba8snorm = "rgba8snorm",
    rgba8uint = "rgba8uint",
    rgba8sint = "rgba8sint",
    bgra8unorm = "bgra8unorm",
    bgra8unorm_srgb = "bgra8unorm-srgb",
    rgb9e5ufloat = "rgb9e5ufloat",
    rgb10a2unorm = "rgb10a2unorm",
    rg11b10ufloat = "rg11b10ufloat",
    rg32uint = "rg32uint",
    rg32sint = "rg32sint",
    rg32float = "rg32float",
    rgba16uint = "rgba16uint",
    rgba16sint = "rgba16sint",
    rgba16float = "rgba16float",
    rgba32uint = "rgba32uint",
    rgba32sint = "rgba32sint",
    rgba32float = "rgba32float",
    stencil8 = "stencil8",
    depth16unorm = "depth16unorm",
    depth24plus = "depth24plus",
    depth24plus_stencil8 = "depth24plus-stencil8",
    depth32float = "depth32float",
    depth32float_stencil8 = cst_depth32float_stencil8,
    bc1_rgba_unorm = "bc1-rgba-unorm",
    bc1_rgba_unorm_srgb = "bc1-rgba-unorm-srgb",
    bc2_rgba_unorm = "bc2-rgba-unorm",
    bc2_rgba_unorm_srgb = "bc2-rgba-unorm-srgb",
    bc3_rgba_unorm = "bc3-rgba-unorm",
    bc3_rgba_unorm_srgb = "bc3-rgba-unorm-srgb",
    bc4_r_unorm = "bc4-r-unorm",
    bc4_r_snorm = "bc4-r-snorm",
    bc5_rg_unorm = "bc5-rg-unorm",
    bc5_rg_snorm = "bc5-rg-snorm",
    bc6h_rgb_ufloat = "bc6h-rgb-ufloat",
    bc6h_rgb_float = "bc6h-rgb-float",
    bc7_rgba_unorm = "bc7-rgba-unorm",
    bc7_rgba_unorm_srgb = "bc7-rgba-unorm-srgb",
    etc2_rgb8unorm = "etc2-rgb8unorm",
    etc2_rgb8unorm_srgb = "etc2-rgb8unorm-srgb",
    etc2_rgb8a1unorm = "etc2-rgb8a1unorm",
    etc2_rgb8a1unorm_srgb = "etc2-rgb8a1unorm-srgb",
    etc2_rgba8unorm = "etc2-rgba8unorm",
    etc2_rgba8unorm_srgb = "etc2-rgba8unorm-srgb",
    eac_r11unorm = "eac-r11unorm",
    eac_r11snorm = "eac-r11snorm",
    eac_rg11unorm = "eac-rg11unorm",
    eac_rg11snorm = "eac-rg11snorm",
    astc_4x4_unorm = "astc-4x4-unorm",
    astc_4x4_unorm_srgb = "astc-4x4-unorm-srgb",
    astc_5x4_unorm = "astc-5x4-unorm",
    astc_5x4_unorm_srgb = "astc-5x4-unorm-srgb",
    astc_5x5_unorm = "astc-5x5-unorm",
    astc_5x5_unorm_srgb = "astc-5x5-unorm-srgb",
    astc_6x5_unorm = "astc-6x5-unorm",
    astc_6x5_unorm_srgb = "astc-6x5-unorm-srgb",
    astc_6x6_unorm = "astc-6x6-unorm",
    astc_6x6_unorm_srgb = "astc-6x6-unorm-srgb",
    astc_8x5_unorm = "astc-8x5-unorm",
    astc_8x5_unorm_srgb = "astc-8x5-unorm-srgb",
    astc_8x6_unorm = "astc-8x6-unorm",
    astc_8x6_unorm_srgb = "astc-8x6-unorm-srgb",
    astc_8x8_unorm = "astc-8x8-unorm",
    astc_8x8_unorm_srgb = "astc-8x8-unorm-srgb",
    astc_10x5_unorm = "astc-10x5-unorm",
    astc_10x5_unorm_srgb = "astc-10x5-unorm-srgb",
    astc_10x6_unorm = "astc-10x6-unorm",
    astc_10x6_unorm_srgb = "astc-10x6-unorm-srgb",
    astc_10x8_unorm = "astc-10x8-unorm",
    astc_10x8_unorm_srgb = "astc-10x8-unorm-srgb",
    astc_10x10_unorm = "astc-10x10-unorm",
    astc_10x10_unorm_srgb = "astc-10x10-unorm-srgb",
    astc_12x10_unorm = "astc-12x10-unorm",
    astc_12x10_unorm_srgb = "astc-12x10-unorm-srgb",
    astc_12x12_unorm = "astc-12x12-unorm",
    astc_12x12_unorm_srgb = "astc-12x12-unorm-srgb",
    Format =
      [0,
       r8unorm,
       r8snorm,
       r8uint,
       r8sint,
       r16uint,
       r16sint,
       r16float,
       rg8unorm,
       rg8snorm,
       rg8uint,
       rg8sint,
       r32uint,
       r32sint,
       r32float,
       rg16uint,
       rg16sint,
       rg16float,
       rgba8unorm,
       rgba8unorm_srgb,
       rgba8snorm,
       rgba8uint,
       rgba8sint,
       bgra8unorm,
       bgra8unorm_srgb,
       rgb9e5ufloat,
       rgb10a2unorm,
       rg11b10ufloat,
       rg32uint,
       rg32sint,
       rg32float,
       rgba16uint,
       rgba16sint,
       rgba16float,
       rgba32uint,
       rgba32sint,
       rgba32float,
       stencil8,
       depth16unorm,
       depth24plus,
       depth24plus_stencil8,
       depth32float,
       depth32float_stencil8,
       bc1_rgba_unorm,
       bc1_rgba_unorm_srgb,
       bc2_rgba_unorm,
       bc2_rgba_unorm_srgb,
       bc3_rgba_unorm,
       bc3_rgba_unorm_srgb,
       bc4_r_unorm,
       bc4_r_snorm,
       bc5_rg_unorm,
       bc5_rg_snorm,
       bc6h_rgb_ufloat,
       bc6h_rgb_float,
       bc7_rgba_unorm,
       bc7_rgba_unorm_srgb,
       etc2_rgb8unorm,
       etc2_rgb8unorm_srgb,
       etc2_rgb8a1unorm,
       etc2_rgb8a1unorm_srgb,
       etc2_rgba8unorm,
       etc2_rgba8unorm_srgb,
       eac_r11unorm,
       eac_r11snorm,
       eac_rg11unorm,
       eac_rg11snorm,
       astc_4x4_unorm,
       astc_4x4_unorm_srgb,
       astc_5x4_unorm,
       astc_5x4_unorm_srgb,
       astc_5x5_unorm,
       astc_5x5_unorm_srgb,
       astc_6x5_unorm,
       astc_6x5_unorm_srgb,
       astc_6x6_unorm,
       astc_6x6_unorm_srgb,
       astc_8x5_unorm,
       astc_8x5_unorm_srgb,
       astc_8x6_unorm,
       astc_8x6_unorm_srgb,
       astc_8x8_unorm,
       astc_8x8_unorm_srgb,
       astc_10x5_unorm,
       astc_10x5_unorm_srgb,
       astc_10x6_unorm,
       astc_10x6_unorm_srgb,
       astc_10x8_unorm,
       astc_10x8_unorm_srgb,
       astc_10x10_unorm,
       astc_10x10_unorm_srgb,
       astc_12x10_unorm,
       astc_12x10_unorm_srgb,
       astc_12x12_unorm,
       astc_12x12_unorm_srgb],
    Usage$0 = [0, 1, 2, 4, 8, 16],
    d1 = cst_1d,
    d2 = cst_2d,
    d3 = cst_3d,
    Dimension = [0, d1, d2, d3],
    d1$0 = cst_1d,
    d2$0 = cst_2d,
    d2_array = "2d-array",
    cube = "cube",
    cube_array = "cube-array",
    d3$0 = cst_3d,
    View_dimension = [0, d1$0, d2$0, d2_array, cube, cube_array, d3$0],
    all = "all",
    stencil_only = "stencil-only",
    depth_only = "depth-only",
    Aspect = [0, all, stencil_only, depth_only],
    cst_label$1 = cst_label$36,
    cst_format = cst_format$5,
    cst_dimension = cst_dimension$2,
    cst_aspect = cst_aspect$2,
    cst_baseMipLevel = "baseMipLevel",
    cst_mipLevelCount = cst_mipLevelCount$2,
    cst_baseArrayLayer = "baseArrayLayer",
    cst_arrayLayerCount = "arrayLayerCount";
   function v$5
   (label,
    format,
    dimension,
    aspect,
    base_mip_level,
    mip_level_count,
    base_array_layer,
    array_layer_count,
    param){
    var d = {};
    caml_call3(Jv[23][4], d, cst_label$1, label);
    caml_call3(Jv[23][4], d, cst_format, format);
    caml_call3(Jv[16], d, cst_dimension, dimension);
    caml_call3(Jv[23][4], d, cst_aspect, aspect);
    caml_call3(Jv[20][4], d, cst_baseMipLevel, base_mip_level);
    caml_call3(Jv[20][4], d, cst_mipLevelCount, mip_level_count);
    caml_call3(Jv[20][4], d, cst_baseArrayLayer, base_array_layer);
    caml_call3(Jv[20][4], d, cst_arrayLayerCount, array_layer_count);
    return d;
   }
   var Descriptor$0 = [0, v$5], cst_label$2 = cst_label$36;
   function label$0(v){return caml_call2(Jv[23][2], v, cst_label$2);}
   var
    View = [0, Descriptor$0, label$0],
    write_only = "write-only",
    Access = [0, write_only],
    cst_access = "access",
    cst_format$0 = cst_format$5,
    cst_viewDimension = cst_viewDimension$1;
   function v$6(access, format, view_dimension, param){
    var l = {};
    caml_call3(Jv[23][4], l, cst_access, access);
    caml_call3(Jv[23][4], l, cst_format$0, format);
    caml_call3(Jv[23][4], l, cst_viewDimension, view_dimension);
    return l;
   }
   var Binding_layout$0 = [0, v$6], Storage = [0, Access, Binding_layout$0];
   function v$7(param){var d = {}; return d;}
   var
    Binding_layout$1 = [0, v$7],
    cst_label$3 = cst_label$36,
    cst_colorSpace = cst_colorSpace$2;
   function v$8(label, color_space, source, param){
    var d = {};
    caml_call3(Jv[23][4], d, cst_label$3, label);
    d[cst_source] = source;
    return caml_call3(Jv[23][4], d, cst_colorSpace, color_space);
   }
   var Descriptor$1 = [0, v$8], cst_label$4 = cst_label$36;
   function label$1(v){return caml_call2(Jv[23][2], v, cst_label$4);}
   var
    External = [0, Binding_layout$1, Descriptor$1, label$1],
    float$0 = "float",
    unfilterable_float = "unfilterable-float",
    depth = "depth",
    sint = "sint",
    uint = "uint",
    Sample_type = [0, float$0, unfilterable_float, depth, sint, uint],
    cst_sampleType = "sampleType",
    cst_viewDimension$0 = cst_viewDimension$1,
    cst_multisampled = "multisampled";
   function v$9(sample_type, view_dimension, multisampled, param){
    var l = {};
    caml_call3(Jv[23][4], l, cst_sampleType, sample_type);
    caml_call3(Jv[23][4], l, cst_viewDimension$0, view_dimension);
    caml_call3(Jv[19][4], l, cst_multisampled, multisampled);
    return l;
   }
   var
    Binding_layout$2 = [0, v$9],
    cst_label$5 = cst_label$36,
    cst_mipLevelCount$0 = cst_mipLevelCount$2,
    cst_sampleCount = cst_sampleCount$2,
    cst_dimension$0 = cst_dimension$2,
    cst_format$1 = cst_format$5,
    cst_usage$1 = cst_usage$4;
   function v$10
   (label,
    mip_level_count,
    sample_count,
    dimension,
    opt,
    size,
    format,
    usage,
    param){
    if(opt) var sth = opt[1], view_formats = sth; else var view_formats = 0;
    var
     view_formats$0 =
       caml_call2(Jv[30], function(_aZ_){return _aZ_;}, view_formats),
     d = {};
    caml_call3(Jv[23][4], d, cst_label$5, label);
    d[cst_size$2] = size;
    caml_call3(Jv[20][4], d, cst_mipLevelCount$0, mip_level_count);
    caml_call3(Jv[20][4], d, cst_sampleCount, sample_count);
    caml_call3(Jv[23][4], d, cst_dimension$0, dimension);
    caml_call3(Jv[23][3], d, cst_format$1, format);
    caml_call3(Jv[20][3], d, cst_usage$1, usage);
    d[cst_viewFormats] = view_formats$0;
    return d;
   }
   var
    Descriptor$2 = [0, v$10],
    cst_width$0 = cst_width$1,
    cst_height$0 = cst_height$1,
    cst_depthOrArrayLayers$0 = cst_depthOrArrayLayers$1,
    cst_mipLevelCount$1 = cst_mipLevelCount$2,
    cst_sampleCount$0 = cst_sampleCount$2,
    cst_dimension$1 = cst_dimension$2,
    cst_format$2 = cst_format$5,
    cst_usage$2 = cst_usage$4,
    cst_offset$0 = cst_offset$4,
    cst_bytesPerRow = cst_bytesPerRow$1,
    cst_rowsPerImage = cst_rowsPerImage$1;
   function create_view(opt, t){
    if(opt) var sth = opt[1], descriptor = sth; else var descriptor = Jv[5];
    return t.createView(descriptor);
   }
   function destroy$0(t){t.destroy(); return 0;}
   function width(t){return caml_call2(Jv[20][2], t, cst_width$0);}
   function height(t){return caml_call2(Jv[20][2], t, cst_height$0);}
   function depth_or_array_layers(t){
    return caml_call2(Jv[20][2], t, cst_depthOrArrayLayers$0);
   }
   function mip_level_count(t){
    return caml_call2(Jv[20][2], t, cst_mipLevelCount$1);
   }
   function sample_count(t){
    return caml_call2(Jv[20][2], t, cst_sampleCount$0);
   }
   function dimension(t){return caml_call2(Jv[23][2], t, cst_dimension$1);}
   function format(t){return caml_call2(Jv[23][2], t, cst_format$2);}
   function usage$0(t){return caml_call2(Jv[20][2], t, cst_usage$2);}
   function v$11(offset, bytes_per_row, rows_per_image, param){
    var d = {};
    caml_call3(Jv[20][4], d, cst_offset$0, offset);
    caml_call3(Jv[20][4], d, cst_bytesPerRow, bytes_per_row);
    caml_call3(Jv[20][4], d, cst_rowsPerImage, rows_per_image);
    return d;
   }
   var
    Data_layout = [0, v$11],
    cst_offset$1 = cst_offset$4,
    cst_bytesPerRow$0 = cst_bytesPerRow$1,
    cst_rowsPerImage$0 = cst_rowsPerImage$1;
   function v$12(offset, bytes_per_row, rows_per_image, buffer, param){
    var d = {};
    d[cst_buffer$0] = buffer;
    caml_call3(Jv[20][4], d, cst_offset$1, offset);
    caml_call3(Jv[20][4], d, cst_bytesPerRow$0, bytes_per_row);
    caml_call3(Jv[20][4], d, cst_rowsPerImage$0, rows_per_image);
    return d;
   }
   var
    Copy_buffer = [0, v$12],
    cst_mipLevel = cst_mipLevel$1,
    cst_aspect$0 = cst_aspect$2;
   function v$13(mip_level, opt, aspect, texture, param){
    if(opt) var sth = opt[1], origin = sth; else var origin = Jv[5];
    var d = {};
    d[cst_texture$0] = texture;
    caml_call3(Jv[20][4], d, cst_mipLevel, mip_level);
    d[cst_origin] = origin;
    caml_call3(Jv[23][4], d, cst_aspect$0, aspect);
    return d;
   }
   var
    Copy_texture = [0, v$13],
    cst_mipLevel$0 = cst_mipLevel$1,
    cst_aspect$1 = cst_aspect$2,
    cst_colorSpace$0 = cst_colorSpace$2,
    cst_premultipliedAlpha = "premultipliedAlpha";
   function v$14
   (mip_level, opt, aspect, color_space, premultiplied_alpha, texture, param){
    if(opt) var sth = opt[1], origin = sth; else var origin = Jv[5];
    var d = {};
    d[cst_texture$0] = texture;
    caml_call3(Jv[20][4], d, cst_mipLevel$0, mip_level);
    d[cst_origin] = origin;
    caml_call3(Jv[23][4], d, cst_aspect$1, aspect);
    caml_call3(Jv[23][4], d, cst_colorSpace$0, color_space);
    caml_call3(Jv[19][4], d, cst_premultipliedAlpha, premultiplied_alpha);
    return d;
   }
   var Copy_texture_tagged = [0, v$14], cst_flipY = "flipY";
   function v$15(opt, flip_y, source, param){
    if(opt) var sth = opt[1], origin = sth; else var origin = Jv[5];
    var d = {};
    d[cst_source] = source;
    d[cst_origin] = origin;
    caml_call3(Jv[19][4], d, cst_flipY, flip_y);
    return d;
   }
   var
    Copy_external_image = [0, v$15],
    Image =
      [0,
       Data_layout,
       Copy_buffer,
       Copy_texture,
       Copy_texture_tagged,
       Copy_external_image],
    filtering = "filtering",
    non_filtering = "non-filtering",
    comparison = "comparison",
    Binding_type$0 = [0, filtering, non_filtering, comparison],
    cst_type$0 = cst_type$4;
   function v$16(type, param){
    var l = {};
    caml_call3(Jv[23][4], l, cst_type$0, type);
    return l;
   }
   var
    Binding_layout$3 = [0, v$16],
    clamp_to_edge = "clamp-to-edge",
    repeat = "repeat",
    mirror_repeat = "mirror-repeat",
    Address_mode = [0, clamp_to_edge, repeat, mirror_repeat],
    nearest = cst_nearest,
    linear = cst_linear,
    Filter_mode = [0, nearest, linear],
    nearest$0 = cst_nearest,
    linear$0 = cst_linear,
    Mipmap_filter_mode = [0, nearest$0, linear$0],
    cst_addressModeU = "addressModeU",
    cst_addressModeV = "addressModeV",
    cst_addressModeW = "addressModeW",
    cst_magFilter = "magFilter",
    cst_minFilter = "minFilter",
    cst_mipmapFilter = "mipmapFilter",
    cst_lodMinClamp = "lodMinClamp",
    cst_lodMaxClamp = "lodMaxClamp",
    cst_compare = cst_compare$1,
    cst_maxAnisotropy = "maxAnisotropy";
   function v$17
   (address_mode_u,
    address_mode_v,
    address_mode_w,
    mag_filter,
    min_filter,
    mipmap_filter,
    lod_min_clamp,
    lod_max_clamp,
    compare,
    max_anisotropy,
    param){
    var d = {};
    caml_call3(Jv[23][4], d, cst_addressModeU, address_mode_u);
    caml_call3(Jv[23][4], d, cst_addressModeV, address_mode_v);
    caml_call3(Jv[23][4], d, cst_addressModeW, address_mode_w);
    caml_call3(Jv[23][4], d, cst_magFilter, mag_filter);
    caml_call3(Jv[23][4], d, cst_minFilter, min_filter);
    caml_call3(Jv[23][4], d, cst_mipmapFilter, mipmap_filter);
    caml_call3(Jv[21][4], d, cst_lodMinClamp, lod_min_clamp);
    caml_call3(Jv[21][4], d, cst_lodMaxClamp, lod_max_clamp);
    caml_call3(Jv[23][4], d, cst_compare, compare);
    caml_call3(Jv[20][4], d, cst_maxAnisotropy, max_anisotropy);
    return d;
   }
   var Descriptor$3 = [0, v$17], cst_label$6 = cst_label$36;
   function label$2(s){return caml_call2(Jv[23][2], s, cst_label$6);}
   var
    Sampler =
      [0,
       Binding_type$0,
       Binding_layout$3,
       Address_mode,
       Filter_mode,
       Mipmap_filter_mode,
       Descriptor$3,
       label$2],
    Shader_stage = [0, 1, 2, 4],
    cst_binding = cst_binding$4,
    cst_visibility = "visibility",
    cst_buffer = cst_buffer$0,
    cst_sampler = "sampler",
    cst_texture = cst_texture$0,
    cst_storageTexture = "storageTexture",
    cst_externalTexture = "externalTexture";
   function v$18
   (buffer,
    sampler,
    texture,
    storage_texture,
    external_texture,
    binding,
    visibility,
    param){
    var e = {}, m = Stdlib_Option[7];
    caml_call3(Jv[20][3], e, cst_binding, binding);
    caml_call3(Jv[20][3], e, cst_visibility, visibility);
    var _aP_ = caml_call2(m, function(_aY_){return _aY_;}, buffer);
    caml_call3(Jv[16], e, cst_buffer, _aP_);
    var _aQ_ = caml_call2(m, function(_aX_){return _aX_;}, sampler);
    caml_call3(Jv[16], e, cst_sampler, _aQ_);
    var _aR_ = caml_call2(m, function(_aW_){return _aW_;}, texture);
    caml_call3(Jv[16], e, cst_texture, _aR_);
    var _aS_ = caml_call2(m, function(_aV_){return _aV_;}, storage_texture);
    caml_call3(Jv[16], e, cst_storageTexture, _aS_);
    var _aT_ = caml_call2(m, function(_aU_){return _aU_;}, external_texture);
    caml_call3(Jv[16], e, cst_externalTexture, _aT_);
    return e;
   }
   var Entry = [0, v$18];
   function v$19(entries, param){
    var d = {};
    d[cst_entries] = caml_call2(Jv[30], function(_aO_){return _aO_;}, entries);
    return d;
   }
   var Descriptor$4 = [0, v$19], cst_label$7 = cst_label$36;
   function label$3(l){return caml_call2(Jv[23][2], l, cst_label$7);}
   var
    Layout = [0, Shader_stage, Entry, Descriptor$4, label$3],
    cst_binding$0 = cst_binding$4,
    cst_binding$1 = cst_binding$4,
    cst_binding$2 = cst_binding$4,
    cst_binding$3 = cst_binding$4;
   function of_sampler(binding, resource){
    var e = {};
    caml_call3(Jv[20][3], e, cst_binding$0, binding);
    e[cst_resource] = resource;
    return e;
   }
   function of_texture_view(binding, resource){
    var e = {};
    caml_call3(Jv[20][3], e, cst_binding$1, binding);
    e[cst_resource] = resource;
    return e;
   }
   function of_buffer_binding(binding, resource){
    var e = {};
    caml_call3(Jv[20][3], e, cst_binding$2, binding);
    e[cst_resource] = resource;
    return e;
   }
   function of_external_texture(binding, resource){
    var e = {};
    caml_call3(Jv[20][3], e, cst_binding$3, binding);
    e[cst_resource] = resource;
    return e;
   }
   var
    Entry$0 =
      [0, of_sampler, of_texture_view, of_buffer_binding, of_external_texture],
    cst_label$8 = cst_label$36;
   function v$20(label, layout, entries, param){
    var
     entries$0 = caml_call2(Jv[30], function(_aN_){return _aN_;}, entries),
     d = {};
    caml_call3(Jv[23][4], d, cst_label$8, label);
    d[cst_layout$2] = layout;
    d[cst_entries] = entries$0;
    return d;
   }
   var Descriptor$5 = [0, v$20], cst_label$9 = cst_label$36;
   function label$4(l){return caml_call2(Jv[23][2], l, cst_label$9);}
   var
    Bind_group = [0, Layout, Entry$0, Descriptor$5, label$4],
    cst_label$10 = cst_label$36;
   function v$21(label, bind_group_layouts, param){
    var
     d = {},
     ls = caml_call2(Jv[30], function(_aM_){return _aM_;}, bind_group_layouts);
    caml_call3(Jv[23][4], d, cst_label$10, label);
    d["bindGroupLayouts"] = ls;
    return d;
   }
   var Descriptor$6 = [0, v$21], cst_label$11 = cst_label$36;
   function label$5(l){return caml_call2(Jv[23][2], l, cst_label$11);}
   var
    Pipeline_layout = [0, Descriptor$6, label$5],
    error = cst_error,
    warning = "warning",
    info = "info",
    Type = [0, error, warning, info],
    cst_message = cst_message$3,
    cst_type$1 = cst_type$4,
    cst_lineNum = "lineNum",
    cst_linePos = "linePos",
    cst_offset$2 = cst_offset$4,
    cst_length = "length";
   function message(m){return caml_call2(Jv[23][2], m, cst_message);}
   function type(m){return caml_call2(Jv[23][2], m, cst_type$1);}
   function linenum(m){return caml_call2(Jv[20][2], m, cst_lineNum);}
   function linepos(m){return caml_call2(Jv[20][2], m, cst_linePos);}
   function offset(m){return caml_call2(Jv[20][2], m, cst_offset$2);}
   function length(m){return caml_call2(Jv[20][2], m, cst_length);}
   var
    Compilation_message =
      [0, Type, message, type, linenum, linepos, offset, length];
   function messages(i){
    var _aK_ = i["messages"];
    return caml_call2(Jv[29], function(_aL_){return _aL_;}, _aK_);
   }
   var Compilation_info = [0, messages], cst_layout = cst_layout$2;
   function v$22(layout, param){
    var h = {};
    if(layout){
     var match = layout[1];
     if(typeof match === "number")
      caml_call3(Jv[23][3], h, cst_layout, cst_auto);
     else{var l = match[2]; h[cst_layout$2] = l;}
    }
    return h;
   }
   var
    Compilation_hint = [0, v$22],
    cst_label$12 = cst_label$36,
    cst_code = "code",
    cst_sourceMap = "sourceMap",
    cst_label$13 = cst_label$36,
    cst_entryPoint = cst_entryPoint$2,
    cst_label$14 = cst_label$36,
    cst_layout$0 = cst_layout$2;
   function v$23(label, source_map, opt, code, param){
    if(opt) var sth = opt[1], hints$0 = sth; else var hints$0 = 0;
    var hints = {};
    caml_call2
     (Stdlib_List[17],
      function(param){var h = param[2], k = param[1]; return hints[k] = h;},
      hints$0);
    var d = {};
    caml_call3(Jv[23][4], d, cst_label$12, label);
    caml_call3(Jv[23][3], d, cst_code, code);
    caml_call3(Jv[16], d, cst_sourceMap, source_map);
    d["hints"] = hints;
    return d;
   }
   function label$6(l){return caml_call2(Jv[23][2], l, cst_label$13);}
   function get_compilation_info(m){
    function ok(_aJ_){return _aJ_;}
    var _aI_ = m.getCompilationInfo();
    return caml_call1(caml_call1(Fut[11], ok), _aI_);
   }
   function constants_obj(constants){
    var c = {};
    caml_call2
     (Stdlib_List[17],
      function(param){var v = param[2], k = param[1]; return c[k] = v;},
      constants);
    return c;
   }
   function v$24(opt, module, entry_point, param){
    if(opt) var sth = opt[1], constants = sth; else var constants = 0;
    var p = {};
    p[cst_module] = module;
    caml_call3(Jv[23][3], p, cst_entryPoint, entry_point);
    p[cst_constants] = constants_obj(constants);
    return p;
   }
   function v$25(label, layout, compute, param){
    var d = {};
    caml_call3(Jv[23][4], d, cst_label$14, label);
    if(typeof layout === "number")
     caml_call3(Jv[23][3], d, cst_layout$0, cst_auto);
    else{var l = layout[2]; d[cst_layout$2] = l;}
    d["compute"] = compute;
    return d;
   }
   var Descriptor$7 = [0, v$25], cst_label$15 = cst_label$36;
   function label$7(p){return caml_call2(Jv[23][2], p, cst_label$15);}
   function get_bind_group_layout(p, i){return p.getBindGroupLayout(i);}
   var
    Compute_pipeline = [0, Descriptor$7, label$7, get_bind_group_layout],
    uint16 = "uint16",
    uint32 = cst_uint32,
    Index_format = [0, uint16, uint32],
    point_list = "point-list",
    line_list = "line-list",
    line_strip = "line-strip",
    triangle_list = "triangle-list",
    triangle_strip = "triangle-strip",
    Topology =
      [0, point_list, line_list, line_strip, triangle_list, triangle_strip],
    ccw = "ccw",
    cw = "cw",
    Front_face = [0, ccw, cw],
    none = "none",
    front = "front",
    back = "back",
    Cull_mode = [0, none, front, back],
    cst_topology = "topology",
    cst_stripIndexFormat = "stripIndexFormat",
    cst_fontFace = "fontFace",
    cst_cullMode = "cullMode",
    cst_unclippedDepth = "unclippedDepth";
   function v$26
   (topology,
    strip_index_format,
    front_face,
    cull_mode,
    unclipped_depth,
    param){
    var s = {};
    caml_call3(Jv[23][4], s, cst_topology, topology);
    caml_call3(Jv[23][4], s, cst_stripIndexFormat, strip_index_format);
    caml_call3(Jv[23][4], s, cst_fontFace, front_face);
    caml_call3(Jv[23][4], s, cst_cullMode, cull_mode);
    caml_call3(Jv[19][4], s, cst_unclippedDepth, unclipped_depth);
    return s;
   }
   var
    State = [0, v$26],
    Primitive = [0, Topology, Front_face, Cull_mode, State],
    uint8x2 = "uint8x2",
    uint8x4 = "uint8x4",
    sint8x2 = "sint8x2",
    sint8x4 = "sint8x4",
    unorm8x2 = "unorm8x2",
    unorm8x4 = "unorm8x4",
    snorm8x2 = "snorm8x2",
    snorm8x4 = "snorm8x4",
    uint16x2 = "uint16x2",
    uint16x4 = "uint16x4",
    sint16x2 = "sint16x2",
    sint16x4 = "sint16x4",
    unorm16x2 = "unorm16x2",
    unorm16x4 = "unorm16x4",
    snorm16x2 = "snorm16x2",
    snorm16x4 = "snorm16x4",
    float16x2 = "float16x2",
    float16x4 = "float16x4",
    float32 = "float32",
    float32x2 = "float32x2",
    float32x3 = "float32x3",
    float32x4 = "float32x4",
    uint32$0 = cst_uint32,
    uint32x2 = "uint32x2",
    uint32x3 = "uint32x3",
    uint32x4 = "uint32x4",
    sint32 = "sint32",
    sint32x2 = "sint32x2",
    sint32x3 = "sint32x3",
    sint32x4 = "sint32x4",
    Format$0 =
      [0,
       uint8x2,
       uint8x4,
       sint8x2,
       sint8x4,
       unorm8x2,
       unorm8x4,
       snorm8x2,
       snorm8x4,
       uint16x2,
       uint16x4,
       sint16x2,
       sint16x4,
       unorm16x2,
       unorm16x4,
       snorm16x2,
       snorm16x4,
       float16x2,
       float16x4,
       float32,
       float32x2,
       float32x3,
       float32x4,
       uint32$0,
       uint32x2,
       uint32x3,
       uint32x4,
       sint32,
       sint32x2,
       sint32x3,
       sint32x4],
    vertex = cst_vertex,
    instance = "instance",
    Step_mode = [0, vertex, instance],
    cst_format$3 = cst_format$5,
    cst_offset$3 = cst_offset$4,
    cst_shaderLocation = "shaderLocation";
   function v$27(format, offset, shader_location, param){
    var a = {};
    caml_call3(Jv[23][3], a, cst_format$3, format);
    caml_call3(Jv[20][3], a, cst_offset$3, offset);
    caml_call3(Jv[20][3], a, cst_shaderLocation, shader_location);
    return a;
   }
   var
    Attribute = [0, v$27],
    cst_stepMode = "stepMode",
    cst_arrayStride = "arrayStride";
   function v$28(step_mode, array_stride, attributes, param){
    var
     attributes$0 =
       caml_call2(Jv[30], function(_aH_){return _aH_;}, attributes),
     l = {};
    caml_call3(Jv[23][4], l, cst_stepMode, step_mode);
    l["attributes"] = attributes$0;
    caml_call3(Jv[20][3], l, cst_arrayStride, array_stride);
    return l;
   }
   var Buffer_layout = [0, v$28], cst_entryPoint$0 = cst_entryPoint$2;
   function v$29(opt, buffers, module, entry_point, param){
    if(opt) var sth = opt[1], constants = sth; else var constants = 0;
    var
     buffers$0 = caml_call2(Jv[30], function(_aG_){return _aG_;}, buffers),
     p = {};
    p["buffers"] = buffers$0;
    p[cst_module] = module;
    caml_call3(Jv[23][3], p, cst_entryPoint$0, entry_point);
    p[cst_constants] = constants_obj(constants);
    return p;
   }
   var
    State$0 = [0, v$29],
    Vertex = [0, Format$0, Step_mode, Attribute, Buffer_layout, State$0],
    zero = cst_zero,
    one = "one",
    src = "src",
    one_minus_src = "one-minus-src",
    src_alpha = "src-alpha",
    one_minus_src_alpha = "one-minus-src-alpha",
    dst = "dst",
    one_minus_dst = "one-minus-dst",
    dst_alpha = "dst-alpha",
    one_minus_dst_alpha = "one-minus-dst-alpha",
    src_alpha_saturated = "src-alpha-saturated",
    constant = "constant",
    one_minus_constant = "one-minus-constant",
    Factor =
      [0,
       zero,
       one,
       src,
       one_minus_src,
       src_alpha,
       one_minus_src_alpha,
       dst,
       one_minus_dst,
       dst_alpha,
       one_minus_dst_alpha,
       src_alpha_saturated,
       constant,
       one_minus_constant],
    add = cst_add$0,
    subtract = "subtract",
    reverse_subtract = "reverse-subtract",
    min = "min",
    max = "max",
    Operation = [0, add, subtract, reverse_subtract, min, max],
    cst_add = cst_add$0,
    cst_srcFactor = "srcFactor",
    cst_dstFactor = "dstFactor";
   function v$30(operation, src_factor, dst_factor, param){
    var c = {};
    caml_call3(Jv[23][4], c, cst_add, operation);
    caml_call3(Jv[23][4], c, cst_srcFactor, src_factor);
    caml_call3(Jv[23][4], c, cst_dstFactor, dst_factor);
    return c;
   }
   var Component = [0, v$30], cst_color = "color", cst_alpha = "alpha";
   function v$31(color, alpha, param){
    var
     c = {},
     _aC_ = caml_call2(Stdlib_Option[7], function(_aF_){return _aF_;}, color);
    caml_call3(Jv[16], c, cst_color, _aC_);
    var
     _aD_ = caml_call2(Stdlib_Option[7], function(_aE_){return _aE_;}, alpha);
    caml_call3(Jv[16], c, cst_alpha, _aD_);
    return c;
   }
   var
    State$1 = [0, v$31],
    Blend = [0, Factor, Operation, Component, State$1],
    Write = [0, 1, 2, 4, 8, 15],
    cst_blend = "blend",
    cst_writeMask = "writeMask";
   function v$32(blend, write_mask, format, param){
    var s = {};
    s[cst_format$5] = format;
    var
     _aA_ = caml_call2(Stdlib_Option[7], function(_aB_){return _aB_;}, blend);
    caml_call3(Jv[16], s, cst_blend, _aA_);
    caml_call3(Jv[20][4], s, cst_writeMask, write_mask);
    return s;
   }
   var
    Target_state = [0, v$32],
    cst_r = "r",
    cst_g = "g",
    cst_b = "b",
    cst_a = "a";
   function v$33(r, g, b, a){
    var c = {};
    caml_call3(Jv[21][3], c, cst_r, r);
    caml_call3(Jv[21][3], c, cst_g, g);
    caml_call3(Jv[21][3], c, cst_b, b);
    caml_call3(Jv[21][3], c, cst_a, a);
    return c;
   }
   var
    Color = [0, Write, Target_state, v$33],
    keep = "keep",
    zero$0 = cst_zero,
    replace = "replace",
    invert = "invert",
    increment_clamp = "increment-clamp",
    decrement_clamp = "decrement-clamp",
    increment_wrap = "increment-wrap",
    decrement_wrap = "decrement-wrap",
    Operation$0 =
      [0,
       keep,
       zero$0,
       replace,
       invert,
       increment_clamp,
       decrement_clamp,
       increment_wrap,
       decrement_wrap],
    cst_compare$0 = cst_compare$1,
    cst_failOp = "failOp",
    cst_depthFailOp = "depthFailOp",
    cst_passOp = "passOp";
   function v$34(compare, fail_op, depth_fail_op, pass_op, param){
    var s = {};
    caml_call3(Jv[23][4], s, cst_compare$0, compare);
    caml_call3(Jv[23][4], s, cst_failOp, fail_op);
    caml_call3(Jv[23][4], s, cst_depthFailOp, depth_fail_op);
    caml_call3(Jv[23][4], s, cst_passOp, pass_op);
    return s;
   }
   var
    Face_state = [0, v$34],
    Stencil = [0, Operation$0, Face_state],
    cst_format$4 = cst_format$5,
    cst_depthWriteEnabled = "depthWriteEnabled",
    cst_depthCompare = "depthCompare",
    cst_stencilFront = "stencilFront",
    cst_stencilBack = "stencilBack",
    cst_stencilReadMask = "stencilReadMask",
    cst_stencilWriteMask = "stencilWriteMask",
    cst_depthBias = "depthBias",
    cst_depthBiasSlopeScale = "depthBiasSlopeScale",
    cst_depthBiasClamp = "depthBiasClamp";
   function v$35
   (stencil_front,
    stencil_back,
    stencil_read_mask,
    stencil_write_mask,
    depth_bias,
    depth_bias_slope_scale,
    depth_bias_clamp,
    format,
    depth_write_enabled,
    depth_compare,
    param){
    var s = {};
    caml_call3(Jv[23][3], s, cst_format$4, format);
    caml_call3(Jv[19][3], s, cst_depthWriteEnabled, depth_write_enabled);
    caml_call3(Jv[23][3], s, cst_depthCompare, depth_compare);
    caml_call3(Jv[16], s, cst_stencilFront, stencil_front);
    caml_call3(Jv[16], s, cst_stencilBack, stencil_back);
    caml_call3(Jv[20][4], s, cst_stencilReadMask, stencil_read_mask);
    caml_call3(Jv[20][4], s, cst_stencilWriteMask, stencil_write_mask);
    caml_call3(Jv[20][4], s, cst_depthBias, depth_bias);
    caml_call3(Jv[20][4], s, cst_depthBiasSlopeScale, depth_bias_slope_scale);
    caml_call3(Jv[20][4], s, cst_depthBiasClamp, depth_bias_clamp);
    return s;
   }
   var
    Depth_stencil_state = [0, v$35],
    cst_count = cst_count$2,
    cst_mask = "mask",
    cst_alphaToCoverageEnabled = "alphaToCoverageEnabled";
   function v$36(count, mask, alpha_to_coverage_enabled, param){
    var s = {};
    caml_call3(Jv[20][4], s, cst_count, count);
    caml_call3(Jv[20][4], s, cst_mask, mask);
    caml_call3
     (Jv[19][4], s, cst_alphaToCoverageEnabled, alpha_to_coverage_enabled);
    return s;
   }
   var Multisample_state = [0, v$36], cst_entryPoint$1 = cst_entryPoint$2;
   function v$37(opt, targets, module, entry_point, param){
    if(opt) var sth = opt[1], constants = sth; else var constants = 0;
    var
     targets$0 = caml_call2(Jv[30], function(_az_){return _az_;}, targets),
     p = {};
    p["targets"] = targets$0;
    p[cst_module] = module;
    caml_call3(Jv[23][3], p, cst_entryPoint$1, entry_point);
    p[cst_constants] = constants_obj(constants);
    return p;
   }
   var
    Fragment_state = [0, v$37],
    cst_label$16 = cst_label$36,
    cst_layout$1 = cst_layout$2,
    cst_primitive = "primitive",
    cst_multisample = "multisample",
    cst_depthStencil = "depthStencil",
    cst_fragment = "fragment";
   function v$38
   (label,
    primitive,
    depth_stencil,
    multisample,
    fragment,
    layout,
    vertex,
    param){
    var d = {};
    caml_call3(Jv[23][4], d, cst_label$16, label);
    if(typeof layout === "number")
     caml_call3(Jv[23][3], d, cst_layout$1, cst_auto);
    else{var l = layout[2]; d[cst_layout$2] = l;}
    d[cst_vertex] = vertex;
    var
     m = Stdlib_Option[7],
     _ar_ = caml_call2(m, function(_ay_){return _ay_;}, primitive);
    caml_call3(Jv[16], d, cst_primitive, _ar_);
    var _as_ = caml_call2(m, function(_ax_){return _ax_;}, multisample);
    caml_call3(Jv[16], d, cst_multisample, _as_);
    var _at_ = caml_call2(m, function(_aw_){return _aw_;}, depth_stencil);
    caml_call3(Jv[16], d, cst_depthStencil, _at_);
    var _au_ = caml_call2(m, function(_av_){return _av_;}, fragment);
    caml_call3(Jv[16], d, cst_fragment, _au_);
    return d;
   }
   var Descriptor$8 = [0, v$38], cst_label$17 = cst_label$36;
   function label$8(p){return caml_call2(Jv[23][2], p, cst_label$17);}
   function get_bind_group_layout$0(p, i){return p.getBindGroupLayout(i);}
   var
    Render_pipeline = [0, Descriptor$8, label$8, get_bind_group_layout$0],
    occlusion = "occlusion",
    timestamp = "timestamp",
    Type$0 = [0, occlusion, timestamp],
    cst_label$18 = cst_label$36,
    cst_type$2 = cst_type$4,
    cst_count$0 = cst_count$2;
   function v$39(label, type, count, param){
    var d = {};
    caml_call3(Jv[23][4], d, cst_label$18, label);
    caml_call3(Jv[23][3], d, cst_type$2, type);
    caml_call3(Jv[20][3], d, cst_count$0, count);
    return d;
   }
   var
    Descriptor$9 = [0, v$39],
    cst_label$19 = cst_label$36,
    cst_type$3 = cst_type$4,
    cst_count$1 = cst_count$2;
   function label$9(s){return caml_call2(Jv[23][2], s, cst_label$19);}
   function type$0(s){return caml_call2(Jv[23][2], s, cst_type$3);}
   function count(s){return caml_call2(Jv[20][2], s, cst_count$1);}
   function destroy$1(s){s.destroy(); return 0;}
   var
    Set = [0, Descriptor$9, label$9, type$0, count, destroy$1],
    Query = [0, Type$0, Set],
    cst_beginningOfPassWriteIndex = cst_beginningOfPassWriteIndex$1,
    cst_endOfPassWriteIndex = cst_endOfPassWriteIndex$1;
   function v$40
   (beginning_of_pass_write_index, end_of_pass_write_index, query_set, param){
    var w = {};
    w[cst_querySet] = query_set;
    caml_call3
     (Jv[20][4],
      w,
      cst_beginningOfPassWriteIndex,
      beginning_of_pass_write_index);
    caml_call3(Jv[20][4], w, cst_endOfPassWriteIndex, end_of_pass_write_index);
    return w;
   }
   var Timestamp_writes = [0, v$40], cst_label$20 = cst_label$36;
   function v$41(label, timestamp_writes, param){
    var d = {};
    caml_call3(Jv[23][4], d, cst_label$20, label);
    d[cst_timestampWrites$0] = timestamp_writes;
    return d;
   }
   var
    Descriptor$10 = [0, v$41],
    cst_label$21 = cst_label$36,
    cst_label$22 = cst_label$36;
   function label$10(e){return caml_call2(Jv[23][2], e, cst_label$21);}
   function set_pipeline(e, p){e.setPipeline(p); return 0;}
   function dispatch_workgroups(opt, _aq_, e, count_x){
    if(opt) var sth = opt[1], count_z = sth; else var count_z = 1;
    if(_aq_) var sth$0 = _aq_[1], count_y = sth$0; else var count_y = 1;
    e.dispatchWorkgroups(count_x, count_y, count_z);
    return 0;
   }
   function dispatch_workgroups_indirect(e, buf, offset){e.dispatchWorkgroupsIndirect(buf, offset); return 0;
   }
   function end(e){e.end(); return 0;}
   function set_bind_group(opt, group, e, index){
    if(opt)
     var sth = opt[1], dynamic_offsets = sth;
    else
     var dynamic_offsets = 0;
    var
     group$0 = caml_call3(Jv[11], Jv[5], function(_ap_){return _ap_;}, group),
     dynamic_offsets$0 =
       caml_call2(Jv[30], function(_ao_){return _ao_;}, dynamic_offsets);
    e.setBindGroup(index, group$0, dynamic_offsets$0);
    return 0;
   }
   function set_bind_group$0
   (group, e, index, dynamic_offsets, offsets_start, offsets_length){
    var
     group$0 = caml_call3(Jv[11], Jv[5], function(_an_){return _an_;}, group),
     dynamic_offsets$0 =
       caml_call2(Jv[28], function(_am_){return _am_;}, dynamic_offsets);
    e.setBindGroup
     (index, group$0, dynamic_offsets$0, offsets_start, offsets_length);
    return 0;
   }
   function push_debug_group(e, label){e.pushDebugGroup(label); return 0;}
   function pop_debug_group(e){e.popDebugGroup(); return 0;}
   function insert_debug_marker(e, marker){e.insertDebugMarker(marker); return 0;
   }
   function v$42(label, param){
    var d = {};
    caml_call3(Jv[23][4], d, cst_label$22, label);
    return d;
   }
   var
    Descriptor$11 = [0, v$42],
    cst_label$23 = cst_label$36,
    cst_label$24 = cst_label$36,
    cst_depthStencilFormat = "depthStencilFormat",
    cst_sampleCount$1 = cst_sampleCount$2,
    cst_depthReadOnly = cst_depthReadOnly$1,
    cst_stencilReadOnly = cst_stencilReadOnly$1;
   function label$11(b){return caml_call2(Jv[23][2], b, cst_label$23);}
   function v$43
   (label,
    opt,
    depth_stencil_format,
    sample_count,
    depth_read_only,
    stencil_read_only,
    param){
    if(opt) var sth = opt[1], color_formats = sth; else var color_formats = 0;
    var
     d = {},
     color_formats$0 =
       caml_call2(Jv[30], function(_al_){return _al_;}, color_formats);
    caml_call3(Jv[23][4], d, cst_label$24, label);
    d["colorFormats"] = color_formats$0;
    var
     _aj_ =
       caml_call2
        (Stdlib_Option[7], function(_ak_){return _ak_;}, depth_stencil_format);
    caml_call3(Jv[16], d, cst_depthStencilFormat, _aj_);
    caml_call3(Jv[20][4], d, cst_sampleCount$1, sample_count);
    caml_call3(Jv[19][4], d, cst_depthReadOnly, depth_read_only);
    caml_call3(Jv[19][4], d, cst_stencilReadOnly, stencil_read_only);
    return d;
   }
   var Descriptor$12 = [0, v$43], cst_label$25 = cst_label$36;
   function label$12(e){return caml_call2(Jv[23][2], e, cst_label$25);}
   function set_pipeline$0(e, p){e.setPipeline(p); return 0;}
   function finish(opt, e){return e.finish(e);}
   function set_bind_group$1(opt, group, e, index){
    if(opt)
     var sth = opt[1], dynamic_offsets = sth;
    else
     var dynamic_offsets = 0;
    var
     group$0 = caml_call3(Jv[11], Jv[5], function(_ai_){return _ai_;}, group),
     dynamic_offsets$0 =
       caml_call2(Jv[30], function(_ah_){return _ah_;}, dynamic_offsets);
    e.setBindGroup(index, group$0, dynamic_offsets$0);
    return 0;
   }
   function set_bind_group$2
   (group, e, index, dynamic_offsets, offsets_start, offsets_length){
    var
     group$0 = caml_call3(Jv[11], Jv[5], function(_ag_){return _ag_;}, group),
     dynamic_offsets$0 =
       caml_call2(Jv[28], function(_af_){return _af_;}, dynamic_offsets);
    e.setBindGroup
     (index, group$0, dynamic_offsets$0, offsets_start, offsets_length);
    return 0;
   }
   function set_index_buffer(opt, size, e, buffer, format){
    if(opt) var sth = opt[1], offset = sth; else var offset = 0;
    var
     size$0 = caml_call3(Jv[11], Jv[5], function(_ae_){return _ae_;}, size);
    e.setIndexBuffer(buffer, format, offset, size$0);
    return 0;
   }
   function set_vertex_buffer(buffer, opt, size, e, slot){
    if(opt) var sth = opt[1], offset = sth; else var offset = 0;
    var
     buffer$0 =
       caml_call3(Jv[11], Jv[5], function(_ad_){return _ad_;}, buffer),
     size$0 = caml_call3(Jv[11], Jv[5], function(_ac_){return _ac_;}, size);
    e.setVertexBuffer(slot, buffer$0, offset, size$0);
    return 0;
   }
   function draw(opt, _ab_, _aa_, e, vertex_count){
    if(opt)
     var sth = opt[1], first_instance = sth;
    else
     var first_instance = 0;
    if(_ab_)
     var sth$0 = _ab_[1], first_vertex = sth$0;
    else
     var first_vertex = 0;
    if(_aa_)
     var sth$1 = _aa_[1], instance_count = sth$1;
    else
     var instance_count = 0;
    e.draw(vertex_count, instance_count, first_vertex, first_instance);
    return 0;
   }
   function draw_indexed(opt, _$_, ___, _Z_, e, index_count){
    if(opt)
     var sth = opt[1], first_instance = sth;
    else
     var first_instance = 0;
    if(_$_) var sth$0 = _$_[1], base_vertex = sth$0; else var base_vertex = 0;
    if(___) var sth$1 = ___[1], first_index = sth$1; else var first_index = 0;
    if(_Z_)
     var sth$2 = _Z_[1], instance_count = sth$2;
    else
     var instance_count = 1;
    e.drawIndexed
     (index_count, instance_count, first_index, base_vertex, first_instance);
    return 0;
   }
   function draw_indirect(e, buffer, offset){
    e.drawIndirect(buffer, offset);
    return 0;
   }
   function draw_indexed_indirect(e, buffer, offset){e.drawIndexedIndirect(buffer, offset); return 0;
   }
   function push_debug_group$0(e, label){e.pushDebugGroup(label); return 0;}
   function pop_debug_group$0(e){e.popDebugGroup(); return 0;}
   function insert_debug_marker$0(e, marker){e.insertDebugMarker(marker); return 0;
   }
   var
    load = "load",
    clear = "clear",
    Load_op = [0, load, clear],
    store = "store",
    discard = "discard",
    Store_op = [0, store, discard],
    cst_beginningOfPassWriteIndex$0 = cst_beginningOfPassWriteIndex$1,
    cst_endOfPassWriteIndex$0 = cst_endOfPassWriteIndex$1;
   function v$44
   (beginning_of_pass_write_index, end_of_pass_write_index, query_set, param){
    var w = {};
    w[cst_querySet] = query_set;
    caml_call3
     (Jv[20][4],
      w,
      cst_beginningOfPassWriteIndex$0,
      beginning_of_pass_write_index);
    caml_call3
     (Jv[20][4], w, cst_endOfPassWriteIndex$0, end_of_pass_write_index);
    return w;
   }
   var
    Timestamp_writes$0 = [0, v$44],
    cst_resolveTarget = "resolveTarget",
    cst_clearValue = "clearValue",
    cst_loadOp = "loadOp",
    cst_storeOp = "storeOp";
   function v$45(resolve_target, clear_value, view, load_op, store_op, param){
    var a = {}, m = Stdlib_Option[7];
    a[cst_view] = view;
    var _V_ = caml_call2(m, function(_Y_){return _Y_;}, resolve_target);
    caml_call3(Jv[16], a, cst_resolveTarget, _V_);
    var _W_ = caml_call2(m, function(_X_){return _X_;}, clear_value);
    caml_call3(Jv[16], a, cst_clearValue, _W_);
    caml_call3(Jv[23][3], a, cst_loadOp, load_op);
    caml_call3(Jv[23][3], a, cst_storeOp, store_op);
    return a;
   }
   var
    Color_attachment = [0, v$45],
    cst_depthClearValue = "depthClearValue",
    cst_depthLoadOp = "depthLoadOp",
    cst_depthStoreOp = "depthStoreOp",
    cst_depthReadOnly$0 = cst_depthReadOnly$1,
    cst_stencilClearValue = "stencilClearValue",
    cst_stencilLoadOp = "stencilLoadOp",
    cst_stencilStoreOp = "stencilStoreOp",
    cst_stencilReadOnly$0 = cst_stencilReadOnly$1;
   function v$46
   (depth_clear_value,
    depth_load_op,
    depth_store_op,
    depth_read_only,
    stencil_clear_value,
    stencil_load_op,
    stencil_store_op,
    stencil_read_only,
    view,
    param){
    var a = {};
    a[cst_view] = view;
    caml_call3(Jv[21][4], a, cst_depthClearValue, depth_clear_value);
    caml_call3(Jv[23][4], a, cst_depthLoadOp, depth_load_op);
    caml_call3(Jv[23][4], a, cst_depthStoreOp, depth_store_op);
    caml_call3(Jv[19][4], a, cst_depthReadOnly$0, depth_read_only);
    caml_call3(Jv[20][4], a, cst_stencilClearValue, stencil_clear_value);
    caml_call3(Jv[23][4], a, cst_stencilLoadOp, stencil_load_op);
    caml_call3(Jv[23][4], a, cst_stencilStoreOp, stencil_store_op);
    caml_call3(Jv[19][4], a, cst_stencilReadOnly$0, stencil_read_only);
    return a;
   }
   var
    Depth_stencil_attachment = [0, v$46],
    cst_label$26 = cst_label$36,
    cst_depthStencilAttachment = "depthStencilAttachment",
    cst_occlusionQuerySet = "occlusionQuerySet",
    cst_timestampWrites = cst_timestampWrites$0,
    cst_maxDrawCount = "maxDrawCount";
   function v$47
   (label,
    depth_stencil_attachment,
    occlusion_query_set,
    timestamp_writes,
    max_draw_count,
    cs,
    param){
    var
     d = {},
     m = Stdlib_Option[7],
     color_attachments = caml_call2(Jv[30], function(_U_){return _U_;}, cs);
    caml_call3(Jv[23][4], d, cst_label$26, label);
    d["colorAttachments"] = color_attachments;
    var
     _O_ = caml_call2(m, function(_T_){return _T_;}, depth_stencil_attachment);
    caml_call3(Jv[16], d, cst_depthStencilAttachment, _O_);
    var _P_ = caml_call2(m, function(_S_){return _S_;}, occlusion_query_set);
    caml_call3(Jv[16], d, cst_occlusionQuerySet, _P_);
    var _Q_ = caml_call2(m, function(_R_){return _R_;}, timestamp_writes);
    caml_call3(Jv[16], d, cst_timestampWrites, _Q_);
    caml_call3(Jv[20][4], d, cst_maxDrawCount, max_draw_count);
    return d;
   }
   var
    Descriptor$13 = [0, v$47],
    cst_label$27 = cst_label$36,
    cst_label$28 = cst_label$36;
   function label$13(e){return caml_call2(Jv[23][2], e, cst_label$27);}
   function set_pipeline$1(e, p){e.setPipeline(p); return 0;}
   function end$0(e){e.end(); return 0;}
   function set_viewport(e, x, y, w, h, min_depth, max_depth){
    e.setViewport(x, y, w, h, min_depth, max_depth);
    return 0;
   }
   function set_scissor_rect(e, x, y, w, h){e.setScissorRect(x, y, w, h); return 0;
   }
   function set_blend_constant(e, color){e.setBlendConstant(color); return 0;}
   function set_stencil_reference(e, ref){e.setStencilReference(ref); return 0;
   }
   function set_bind_group$3(opt, group, e, index){
    if(opt)
     var sth = opt[1], dynamic_offsets = sth;
    else
     var dynamic_offsets = 0;
    var
     group$0 = caml_call3(Jv[11], Jv[5], function(_N_){return _N_;}, group),
     dynamic_offsets$0 =
       caml_call2(Jv[30], function(_M_){return _M_;}, dynamic_offsets);
    e.setBindGroup(index, group$0, dynamic_offsets$0);
    return 0;
   }
   function set_bind_group$4
   (group, e, index, dynamic_offsets, offsets_start, offsets_length){
    var
     group$0 = caml_call3(Jv[11], Jv[5], function(_L_){return _L_;}, group),
     dynamic_offsets$0 =
       caml_call2(Jv[28], function(_K_){return _K_;}, dynamic_offsets);
    e.setBindGroup
     (index, group$0, dynamic_offsets$0, offsets_start, offsets_length);
    return 0;
   }
   function set_index_buffer$0(opt, size, e, buffer, format){
    if(opt) var sth = opt[1], offset = sth; else var offset = 0;
    var size$0 = caml_call3(Jv[11], Jv[5], function(_J_){return _J_;}, size);
    e.setIndexBuffer(buffer, format, offset, size$0);
    return 0;
   }
   function set_vertex_buffer$0(buffer, opt, size, e, slot){
    if(opt) var sth = opt[1], offset = sth; else var offset = 0;
    var
     buffer$0 = caml_call3(Jv[11], Jv[5], function(_I_){return _I_;}, buffer),
     size$0 = caml_call3(Jv[11], Jv[5], function(_H_){return _H_;}, size);
    e.setVertexBuffer(slot, buffer$0, offset, size$0);
    return 0;
   }
   function execute_bundles(e, bundles){
    var bundles$0 = caml_call2(Jv[30], function(_G_){return _G_;}, bundles);
    e.executeBundles(bundles$0);
    return 0;
   }
   function draw$0(opt, _F_, _E_, e, vertex_count){
    if(opt)
     var sth = opt[1], first_instance = sth;
    else
     var first_instance = 0;
    if(_F_)
     var sth$0 = _F_[1], first_vertex = sth$0;
    else
     var first_vertex = 0;
    if(_E_)
     var sth$1 = _E_[1], instance_count = sth$1;
    else
     var instance_count = 0;
    e.draw(vertex_count, instance_count, first_vertex, first_instance);
    return 0;
   }
   function draw_indexed$0(opt, _D_, _C_, _B_, e, index_count){
    if(opt)
     var sth = opt[1], first_instance = sth;
    else
     var first_instance = 0;
    if(_D_) var sth$0 = _D_[1], base_vertex = sth$0; else var base_vertex = 0;
    if(_C_) var sth$1 = _C_[1], first_index = sth$1; else var first_index = 0;
    if(_B_)
     var sth$2 = _B_[1], instance_count = sth$2;
    else
     var instance_count = 1;
    e.drawIndexed
     (index_count, instance_count, first_index, base_vertex, first_instance);
    return 0;
   }
   function draw_indirect$0(e, buffer, offset){e.drawIndirect(buffer, offset); return 0;
   }
   function draw_indexed_indirect$0(e, buffer, offset){e.drawIndexedIndirect(buffer, offset); return 0;
   }
   function push_debug_group$1(e, label){e.pushDebugGroup(label); return 0;}
   function pop_debug_group$1(e){e.popDebugGroup(); return 0;}
   function insert_debug_marker$1(e, marker){e.insertDebugMarker(marker); return 0;
   }
   function v$48(label, param){
    var d = {};
    caml_call3(Jv[23][4], d, cst_label$28, label);
    return d;
   }
   var Descriptor$14 = [0, v$48], cst_label$29 = cst_label$36;
   function label$14(q){return caml_call2(Jv[23][2], q, cst_label$29);}
   var Buffer$0 = [0, Descriptor$14, label$14], cst_label$30 = cst_label$36;
   function v$49(label, param){
    var d = {};
    caml_call3(Jv[23][4], d, cst_label$30, label);
    return d;
   }
   var
    Descriptor$15 = [0, v$49],
    cst_label$31 = cst_label$36,
    cst_label$32 = cst_label$36;
   function label$15(q){return caml_call2(Jv[23][2], q, cst_label$31);}
   function finish$0(opt, e){
    if(opt) var sth = opt[1], descr = sth; else var descr = Jv[5];
    return e.finish(descr);
   }
   function begin_render_pass(e, d){return e.beginRenderPass(d);}
   function begin_compute_pass(e, d){return e.beginComputePass(d);}
   function copy_buffer_to_buffer(e, src, src_offset, dst, dst_offset, size){e.copyBufferToBuffer(src, src_offset, dst, dst_offset, size); return 0;
   }
   function copy_buffer_to_texture(e, src, dst, size){e.copyBufferToTexture(src, dst, size); return 0;
   }
   function copy_texture_to_buffer(e, src, dst, size){e.copyTextureToBuffer(src, dst, size); return 0;
   }
   function copy_texture_to_texture(e, src, dst, size){e.TextureToTexture(src, dst, size); return 0;
   }
   function clear_buffer(size, opt, e, buffer){
    if(opt) var sth = opt[1], offset = sth; else var offset = 0;
    var size$0 = caml_call3(Jv[11], Jv[5], function(_A_){return _A_;}, size);
    e.clearBuffer(buffer, offset, size$0);
    return 0;
   }
   function write_timestamp(e, qs, i){e.writeTimestamp(qs, i); return 0;}
   function resolve_query_set(e, qs, first, count, dst, dst_offset){e.resolveQuerySet(qs, first, count, dst, dst_offset); return 0;
   }
   function push_debug_group$2(e, label){e.pushDebugGroup(label); return 0;}
   function pop_debug_group$2(e){e.popDebugGroup(); return 0;}
   function insert_debug_marker$2(e, marker){e.insertDebugMarker(marker); return 0;
   }
   function v$50(label, param){
    var d = {};
    caml_call3(Jv[23][4], d, cst_label$32, label);
    return d;
   }
   var Descriptor$16 = [0, v$50], cst_label$33 = cst_label$36;
   function label$16(q){return caml_call2(Jv[23][2], q, cst_label$33);}
   function submit(q, buffers){
    var buffers$0 = caml_call2(Jv[30], function(_z_){return _z_;}, buffers);
    q.submit(buffers$0);
    return 0;
   }
   function on_submitted_work_done(q){
    var _x_ = q.onSubmittedWorkDone();
    return caml_call1(caml_call1(Fut[11], function(_y_){return 0;}), _x_);
   }
   function write_buffer(opt, size, q, dst, dst_offset, src){
    if(opt) var sth = opt[1], src_offset = sth; else var src_offset = 0;
    if(size) var size$0 = size[1], size$1 = size$0; else var size$1 = Jv[5];
    q.writeBuffer(dst, dst_offset, src, src_offset, size$1);
    return 0;
   }
   function write_texture(q, dst, src, src_layout, size){
    q.writeTexture(dst, src, src_layout, size);
    return 0;
   }
   function copy_external_image_to_texture(q, src, dst, size){q.copyExternalImageToTexture(src, dst, size); return 0;
   }
   var
    Queue =
      [0,
       Descriptor$16,
       label$16,
       submit,
       on_submitted_work_done,
       write_buffer,
       write_texture,
       copy_external_image_to_texture],
    cst_maxTextureDimension1D = cst_maxTextureDimension1D$1,
    cst_maxTextureDimension2D = cst_maxTextureDimension2D$1,
    cst_maxTextureDimension3D = cst_maxTextureDimension3D$1,
    cst_maxTextureArrayLayers = cst_maxTextureArrayLayers$1,
    cst_maxBindGroups = cst_maxBindGroups$1,
    cst_maxBindGroupsPlusVertexBuf = cst_maxBindGroupsPlusVertexBuf$1,
    cst_maxBindingsPerBindGroup = cst_maxBindingsPerBindGroup$1,
    cst_maxDynamicUniformBuffersPe = cst_maxDynamicUniformBuffersPe$1,
    cst_maxDynamicStorageBuffersPe = cst_maxDynamicStorageBuffersPe$1,
    cst_maxSampledTexturesPerShade = cst_maxSampledTexturesPerShade$1,
    cst_maxSamplersPerShaderStage = cst_maxSamplersPerShaderStage$1,
    cst_maxStorageBuffersPerShader = cst_maxStorageBuffersPerShader$1,
    cst_maxStorageTexturesPerShade = cst_maxStorageTexturesPerShade$1,
    cst_maxUniformBuffersPerShader = cst_maxUniformBuffersPerShader$1,
    cst_maxUniformBufferBindingSiz = cst_maxUniformBufferBindingSiz$1,
    cst_maxStorageBufferBindingSiz = cst_maxStorageBufferBindingSiz$1,
    cst_minUniformBufferOffsetAlig = cst_minUniformBufferOffsetAlig$1,
    cst_minStorageBufferOffsetAlig = cst_minStorageBufferOffsetAlig$1,
    cst_maxVertexBuffers = cst_maxVertexBuffers$1,
    cst_maxBufferSize = cst_maxBufferSize$1,
    cst_maxVertexAttributes = cst_maxVertexAttributes$1,
    cst_maxVertexBufferArrayStride = cst_maxVertexBufferArrayStride$1,
    cst_maxInterStageShaderCompone = cst_maxInterStageShaderCompone$1,
    cst_maxInterStageShaderVariabl = cst_maxInterStageShaderVariabl$1,
    cst_maxColorAttachments = cst_maxColorAttachments$1,
    cst_maxColorAttachmentBytesPer = cst_maxColorAttachmentBytesPer$1,
    cst_maxComputeWorkgroupStorage = cst_maxComputeWorkgroupStorage$1,
    cst_maxComputeInvocationsPerWo = cst_maxComputeInvocationsPerWo$1,
    cst_maxComputeWorkgroupSizeX = cst_maxComputeWorkgroupSizeX$1,
    cst_maxComputeWorkgroupSizeY = cst_maxComputeWorkgroupSizeY$1,
    cst_maxComputeWorkgroupSizeZ = cst_maxComputeWorkgroupSizeZ$1,
    cst_maxComputeWorkgroupsPerDim = cst_maxComputeWorkgroupsPerDim$1;
   function max_texture_dimension_1d(l){
    return caml_call2(Jv[20][2], l, cst_maxTextureDimension1D);
   }
   function max_texture_dimension_2d(l){
    return caml_call2(Jv[20][2], l, cst_maxTextureDimension2D);
   }
   function max_texture_dimension_3d(l){
    return caml_call2(Jv[20][2], l, cst_maxTextureDimension3D);
   }
   function max_texture_array_layers(l){
    return caml_call2(Jv[20][2], l, cst_maxTextureArrayLayers);
   }
   function max_bind_groups(l){
    return caml_call2(Jv[20][2], l, cst_maxBindGroups);
   }
   function max_bind_groups_plus_vertex_bu(l){
    return caml_call2(Jv[20][2], l, cst_maxBindGroupsPlusVertexBuf);
   }
   function max_bindings_per_bind_group(l){
    return caml_call2(Jv[20][2], l, cst_maxBindingsPerBindGroup);
   }
   function max_dynamic_uniform_buffers_pe(l){
    return caml_call2(Jv[20][2], l, cst_maxDynamicUniformBuffersPe);
   }
   function max_dynamic_storage_buffers_pe(l){
    return caml_call2(Jv[20][2], l, cst_maxDynamicStorageBuffersPe);
   }
   function max_sampled_textures_per_shade(l){
    return caml_call2(Jv[20][2], l, cst_maxSampledTexturesPerShade);
   }
   function max_samplers_per_shader_stage(l){
    return caml_call2(Jv[20][2], l, cst_maxSamplersPerShaderStage);
   }
   function max_storage_buffers_per_shader(l){
    return caml_call2(Jv[20][2], l, cst_maxStorageBuffersPerShader);
   }
   function max_storage_textures_per_shade(l){
    return caml_call2(Jv[20][2], l, cst_maxStorageTexturesPerShade);
   }
   function max_uniform_buffers_per_shader(l){
    return caml_call2(Jv[20][2], l, cst_maxUniformBuffersPerShader);
   }
   function max_uniform_buffer_binding_siz(l){
    return caml_call2(Jv[20][2], l, cst_maxUniformBufferBindingSiz);
   }
   function max_storage_buffer_binding_siz(l){
    return caml_call2(Jv[20][2], l, cst_maxStorageBufferBindingSiz);
   }
   function min_uniform_buffer_offset_alig(l){
    return caml_call2(Jv[20][2], l, cst_minUniformBufferOffsetAlig);
   }
   function min_storage_buffer_offset_alig(l){
    return caml_call2(Jv[20][2], l, cst_minStorageBufferOffsetAlig);
   }
   function max_vertex_buffers(l){
    return caml_call2(Jv[20][2], l, cst_maxVertexBuffers);
   }
   function max_buffer_size(l){
    return caml_call2(Jv[20][2], l, cst_maxBufferSize);
   }
   function max_vertex_attributes(l){
    return caml_call2(Jv[20][2], l, cst_maxVertexAttributes);
   }
   function max_vertex_buffer_array_stride(l){
    return caml_call2(Jv[20][2], l, cst_maxVertexBufferArrayStride);
   }
   function max_inter_stage_shader_compone(l){
    return caml_call2(Jv[20][2], l, cst_maxInterStageShaderCompone);
   }
   function max_inter_stage_shader_variabl(l){
    return caml_call2(Jv[20][2], l, cst_maxInterStageShaderVariabl);
   }
   function max_color_attachments(l){
    return caml_call2(Jv[20][2], l, cst_maxColorAttachments);
   }
   function max_color_attachment_bytes_per(l){
    return caml_call2(Jv[20][2], l, cst_maxColorAttachmentBytesPer);
   }
   function max_compute_workgroup_storage_(l){
    return caml_call2(Jv[20][2], l, cst_maxComputeWorkgroupStorage);
   }
   function max_compute_invocations_per_wo(l){
    return caml_call2(Jv[20][2], l, cst_maxComputeInvocationsPerWo);
   }
   function max_compute_workgroup_size_x(l){
    return caml_call2(Jv[20][2], l, cst_maxComputeWorkgroupSizeX);
   }
   function max_compute_workgroup_size_y(l){
    return caml_call2(Jv[20][2], l, cst_maxComputeWorkgroupSizeY);
   }
   function max_compute_workgroup_size_z(l){
    return caml_call2(Jv[20][2], l, cst_maxComputeWorkgroupSizeZ);
   }
   function max_compute_workgroups_per_dim(l){
    return caml_call2(Jv[20][2], l, cst_maxComputeWorkgroupsPerDim);
   }
   var
    Supported_limits =
      [0,
       max_texture_dimension_1d,
       max_texture_dimension_2d,
       max_texture_dimension_3d,
       max_texture_array_layers,
       max_bind_groups,
       max_bind_groups_plus_vertex_bu,
       max_bindings_per_bind_group,
       max_dynamic_uniform_buffers_pe,
       max_dynamic_storage_buffers_pe,
       max_sampled_textures_per_shade,
       max_samplers_per_shader_stage,
       max_storage_buffers_per_shader,
       max_storage_textures_per_shade,
       max_uniform_buffers_per_shader,
       max_uniform_buffer_binding_siz,
       max_storage_buffer_binding_siz,
       min_uniform_buffer_offset_alig,
       min_storage_buffer_offset_alig,
       max_vertex_buffers,
       max_buffer_size,
       max_vertex_attributes,
       max_vertex_buffer_array_stride,
       max_inter_stage_shader_compone,
       max_inter_stage_shader_variabl,
       max_color_attachments,
       max_color_attachment_bytes_per,
       max_compute_workgroup_storage_,
       max_compute_invocations_per_wo,
       max_compute_workgroup_size_x,
       max_compute_workgroup_size_y,
       max_compute_workgroup_size_z,
       max_compute_workgroups_per_dim],
    depth_clip_control = "depth-clip-control",
    depth32float_stencil8$0 = cst_depth32float_stencil8,
    texture_compression_bc = "texture-compression-bc",
    texture_compression_etc2 = "texture-compression-etc2",
    texture_compression_astc = "texture-compression-astc",
    timestamp_query = "timestamp-query",
    indirect_first_instance = "indirect-first-instance",
    shader_f16 = "shader-f16",
    rg11b10ufloat_renderable = "rg11b10ufloat-renderable",
    bgra8unorm_storage = "bgra8unorm-storage",
    float32_filterable = "float32-filterable",
    Feature_name =
      [0,
       depth_clip_control,
       depth32float_stencil8$0,
       texture_compression_bc,
       texture_compression_etc2,
       texture_compression_astc,
       timestamp_query,
       indirect_first_instance,
       shader_f16,
       rg11b10ufloat_renderable,
       bgra8unorm_storage,
       float32_filterable],
    validation = cst_validation,
    out_of_memory = "out-of-memory",
    internal = cst_internal,
    Filter = [0, validation, out_of_memory, internal],
    cst_message$0 = cst_message$3;
   function message$0(i){return caml_call2(Jv[23][2], i, cst_message$0);}
   var
    Error = [0, Filter, message$0],
    validation$0 = cst_validation,
    internal$0 = cst_internal,
    Reason = [0, validation$0, internal$0],
    cst_message$1 = cst_message$3,
    cst_reason = cst_reason$1;
   function message$1(i){return caml_call2(Jv[23][2], i, cst_message$1);}
   function reason(i){return caml_call2(Jv[23][2], i, cst_reason);}
   var
    Pipeline_error = [0, Reason, message$1, reason],
    unknown = "unknown",
    destroyed = "destroyed",
    Lost_reason = [0, unknown, destroyed],
    cst_reason$0 = cst_reason$1,
    cst_message$2 = cst_message$3;
   function reason$0(i){return caml_call2(Jv[23][2], i, cst_reason$0);}
   function message$2(i){return caml_call2(Jv[23][2], i, cst_message$2);}
   var
    Lost_info = [0, reason$0, message$2],
    cst_label$34 = cst_label$36,
    cst_requiredFeatures = "requiredFeatures",
    cst_requiredLimits = "requiredLimits",
    cst_defaultQueue = "defaultQueue",
    cst_maxTextureDimension1D$0 = cst_maxTextureDimension1D$1,
    cst_maxTextureDimension2D$0 = cst_maxTextureDimension2D$1,
    cst_maxTextureDimension3D$0 = cst_maxTextureDimension3D$1,
    cst_maxTextureArrayLayers$0 = cst_maxTextureArrayLayers$1,
    cst_maxBindGroups$0 = cst_maxBindGroups$1,
    cst_maxBindGroupsPlusVertexBuf$0 = cst_maxBindGroupsPlusVertexBuf$1,
    cst_maxBindingsPerBindGroup$0 = cst_maxBindingsPerBindGroup$1,
    cst_maxDynamicUniformBuffersPe$0 = cst_maxDynamicUniformBuffersPe$1,
    cst_maxDynamicStorageBuffersPe$0 = cst_maxDynamicStorageBuffersPe$1,
    cst_maxSampledTexturesPerShade$0 = cst_maxSampledTexturesPerShade$1,
    cst_maxSamplersPerShaderStage$0 = cst_maxSamplersPerShaderStage$1,
    cst_maxStorageBuffersPerShader$0 = cst_maxStorageBuffersPerShader$1,
    cst_maxStorageTexturesPerShade$0 = cst_maxStorageTexturesPerShade$1,
    cst_maxUniformBuffersPerShader$0 = cst_maxUniformBuffersPerShader$1,
    cst_maxUniformBufferBindingSiz$0 = cst_maxUniformBufferBindingSiz$1,
    cst_maxStorageBufferBindingSiz$0 = cst_maxStorageBufferBindingSiz$1,
    cst_minUniformBufferOffsetAlig$0 = cst_minUniformBufferOffsetAlig$1,
    cst_minStorageBufferOffsetAlig$0 = cst_minStorageBufferOffsetAlig$1,
    cst_maxVertexBuffers$0 = cst_maxVertexBuffers$1,
    cst_maxBufferSize$0 = cst_maxBufferSize$1,
    cst_maxVertexAttributes$0 = cst_maxVertexAttributes$1,
    cst_maxVertexBufferArrayStride$0 = cst_maxVertexBufferArrayStride$1,
    cst_maxInterStageShaderCompone$0 = cst_maxInterStageShaderCompone$1,
    cst_maxInterStageShaderVariabl$0 = cst_maxInterStageShaderVariabl$1,
    cst_maxColorAttachments$0 = cst_maxColorAttachments$1,
    cst_maxColorAttachmentBytesPer$0 = cst_maxColorAttachmentBytesPer$1,
    cst_maxComputeWorkgroupStorage$0 = cst_maxComputeWorkgroupStorage$1,
    cst_maxComputeInvocationsPerWo$0 = cst_maxComputeInvocationsPerWo$1,
    cst_maxComputeWorkgroupSizeX$0 = cst_maxComputeWorkgroupSizeX$1,
    cst_maxComputeWorkgroupSizeY$0 = cst_maxComputeWorkgroupSizeY$1,
    cst_maxComputeWorkgroupSizeZ$0 = cst_maxComputeWorkgroupSizeZ$1,
    cst_maxComputeWorkgroupsPerDim$0 = cst_maxComputeWorkgroupsPerDim$1;
   function v$51(label, rf, required_limits, default_queue, param){
    var
     _v_ = caml_call1(Jv[30], function(_w_){return _w_;}),
     rf$0 = caml_call2(Stdlib_Option[7], _v_, rf),
     d = {};
    caml_call3(Jv[23][4], d, cst_label$34, label);
    caml_call3(Jv[16], d, cst_requiredFeatures, rf$0);
    caml_call3(Jv[16], d, cst_requiredLimits, required_limits);
    caml_call3(Jv[16], d, cst_defaultQueue, default_queue);
    return d;
   }
   function required_limits
   (max_texture_dimension_1d,
    max_texture_dimension_2d,
    max_texture_dimension_3d,
    max_texture_array_layers,
    max_bind_groups,
    max_bind_groups_plus_vertex_bu,
    max_bindings_per_bind_group,
    max_dynamic_uniform_buffers_pe,
    max_dynamic_storage_buffers_pe,
    max_sampled_textures_per_shade,
    max_samplers_per_shader_stage,
    max_storage_buffers_per_shader,
    max_storage_textures_per_shade,
    max_uniform_buffers_per_shader,
    max_uniform_buffer_binding_siz,
    max_storage_buffer_binding_siz,
    min_uniform_buffer_offset_alig,
    min_storage_buffer_offset_alig,
    max_vertex_buffers,
    max_buffer_size,
    max_vertex_attributes,
    max_vertex_buffer_array_stride,
    max_inter_stage_shader_compone,
    max_inter_stage_shader_variabl,
    max_color_attachments,
    max_color_attachment_bytes_per,
    max_compute_workgroup_storage_,
    max_compute_invocations_per_wo,
    max_compute_workgroup_size_x,
    max_compute_workgroup_size_y,
    max_compute_workgroup_size_z,
    max_compute_workgroups_per_dim,
    param){
    var l = {};
    caml_call3
     (Jv[20][4], l, cst_maxTextureDimension1D$0, max_texture_dimension_1d);
    caml_call3
     (Jv[20][4], l, cst_maxTextureDimension2D$0, max_texture_dimension_2d);
    caml_call3
     (Jv[20][4], l, cst_maxTextureDimension3D$0, max_texture_dimension_3d);
    caml_call3
     (Jv[20][4], l, cst_maxTextureArrayLayers$0, max_texture_array_layers);
    caml_call3(Jv[20][4], l, cst_maxBindGroups$0, max_bind_groups);
    caml_call3
     (Jv[20][4],
      l,
      cst_maxBindGroupsPlusVertexBuf$0,
      max_bind_groups_plus_vertex_bu);
    caml_call3
     (Jv[20][4],
      l,
      cst_maxBindingsPerBindGroup$0,
      max_bindings_per_bind_group);
    caml_call3
     (Jv[20][4],
      l,
      cst_maxDynamicUniformBuffersPe$0,
      max_dynamic_uniform_buffers_pe);
    caml_call3
     (Jv[20][4],
      l,
      cst_maxDynamicStorageBuffersPe$0,
      max_dynamic_storage_buffers_pe);
    caml_call3
     (Jv[20][4],
      l,
      cst_maxSampledTexturesPerShade$0,
      max_sampled_textures_per_shade);
    caml_call3
     (Jv[20][4],
      l,
      cst_maxSamplersPerShaderStage$0,
      max_samplers_per_shader_stage);
    caml_call3
     (Jv[20][4],
      l,
      cst_maxStorageBuffersPerShader$0,
      max_storage_buffers_per_shader);
    caml_call3
     (Jv[20][4],
      l,
      cst_maxStorageTexturesPerShade$0,
      max_storage_textures_per_shade);
    caml_call3
     (Jv[20][4],
      l,
      cst_maxUniformBuffersPerShader$0,
      max_uniform_buffers_per_shader);
    caml_call3
     (Jv[20][4],
      l,
      cst_maxUniformBufferBindingSiz$0,
      max_uniform_buffer_binding_siz);
    caml_call3
     (Jv[20][4],
      l,
      cst_maxStorageBufferBindingSiz$0,
      max_storage_buffer_binding_siz);
    caml_call3
     (Jv[20][4],
      l,
      cst_minUniformBufferOffsetAlig$0,
      min_uniform_buffer_offset_alig);
    caml_call3
     (Jv[20][4],
      l,
      cst_minStorageBufferOffsetAlig$0,
      min_storage_buffer_offset_alig);
    caml_call3(Jv[20][4], l, cst_maxVertexBuffers$0, max_vertex_buffers);
    caml_call3(Jv[20][4], l, cst_maxBufferSize$0, max_buffer_size);
    caml_call3(Jv[20][4], l, cst_maxVertexAttributes$0, max_vertex_attributes);
    caml_call3
     (Jv[20][4],
      l,
      cst_maxVertexBufferArrayStride$0,
      max_vertex_buffer_array_stride);
    caml_call3
     (Jv[20][4],
      l,
      cst_maxInterStageShaderCompone$0,
      max_inter_stage_shader_compone);
    caml_call3
     (Jv[20][4],
      l,
      cst_maxInterStageShaderVariabl$0,
      max_inter_stage_shader_variabl);
    caml_call3(Jv[20][4], l, cst_maxColorAttachments$0, max_color_attachments);
    caml_call3
     (Jv[20][4],
      l,
      cst_maxColorAttachmentBytesPer$0,
      max_color_attachment_bytes_per);
    caml_call3
     (Jv[20][4],
      l,
      cst_maxComputeWorkgroupStorage$0,
      max_compute_workgroup_storage_);
    caml_call3
     (Jv[20][4],
      l,
      cst_maxComputeInvocationsPerWo$0,
      max_compute_invocations_per_wo);
    caml_call3
     (Jv[20][4],
      l,
      cst_maxComputeWorkgroupSizeX$0,
      max_compute_workgroup_size_x);
    caml_call3
     (Jv[20][4],
      l,
      cst_maxComputeWorkgroupSizeY$0,
      max_compute_workgroup_size_y);
    caml_call3
     (Jv[20][4],
      l,
      cst_maxComputeWorkgroupSizeZ$0,
      max_compute_workgroup_size_z);
    caml_call3
     (Jv[20][4],
      l,
      cst_maxComputeWorkgroupsPerDim$0,
      max_compute_workgroups_per_dim);
    return l;
   }
   var
    Descriptor$17 = [0, v$51, required_limits],
    cst_label$35 = cst_label$36;
   function has_feature(d, f){
    var set = d[cst_features];
    return caml_call1(Jv[8], set) ? 0 : set.has(f) | 0;
   }
   function label$17(d){return caml_call2(Jv[23][2], d, cst_label$35);}
   function limits(d){return d[cst_limits];}
   function queue(d){return d["queue"];}
   function destroy$2(d){d.destroy(); return 0;}
   function lost(d){
    var _t_ = d["lost"];
    return caml_call2(Fut[11], function(_u_){return _u_;}, _t_);
   }
   function push_error_scope(d, filter){d.pushErrorScope(filter); return 0;}
   function pop_error_scope(d){
    var
     ok = caml_call1(Jv[10], function(_s_){return _s_;}),
     _r_ = d.popErrorScope();
    return caml_call1(caml_call1(Fut[11], ok), _r_);
   }
   function create_buffer(d, bd){return d.createBuffer(bd);}
   function create_texture(d, td){return d.createTexture(td);}
   function import_external_texture(d, td){return d.importExternalTexture(td);
   }
   function create_sampler(d, sd){return d.createSampler(sd);}
   function create_bind_group_layout(d, ld){return d.createBindGroupLayout(ld);
   }
   function create_bind_group(d, gd){return d.createBindGroup(gd);}
   function create_pipeline_layout(d, ld){return d.createPipelineLayout(ld);}
   function create_shader_module(d, md){return d.createShaderModule(md);}
   function create_compute_pipeline(d, cd){return d.createComputePipeline(cd);
   }
   function create_compute_pipeline_async(d, cd){
    function ok(_q_){return _q_;}
    function error(_p_){return _p_;}
    var _o_ = d.createComputePipelineAsync(cd);
    return caml_call1(caml_call2(Fut[13], ok, error), _o_);
   }
   function create_render_pipeline(d, cd){return d.createRenderPipeline(cd);}
   function create_render_pipeline_async(d, rd){
    function ok(_n_){return _n_;}
    function error(_m_){return _m_;}
    var _l_ = d.createRenderPipelineAsync(rd);
    return caml_call1(caml_call2(Fut[13], ok, error), _l_);
   }
   function create_query_set(d, qd){return d.createQuerySet(qd);}
   function create_render_bundle_encoder(d, ed){return d.createRenderBundleEncoder(ed);
   }
   function create_command_encoder(opt, d){
    if(opt) var sth = opt[1], descr = sth; else var descr = Jv[5];
    return d.createCommandEncoder(descr);
   }
   function error$0(e){return e[cst_error];}
   var
    Uncaptured_error = [0, error$0],
    uncapturederror = "uncapturederror",
    Ev = [0, Uncaptured_error, uncapturederror],
    cst_vendor = "vendor",
    cst_architecture = "architecture",
    cst_device = cst_device$0,
    cst_description = "description";
   function vendor(i){return caml_call2(Jv[23][2], i, cst_vendor);}
   function architecture(i){
    return caml_call2(Jv[23][2], i, cst_architecture);
   }
   function device(i){return caml_call2(Jv[23][2], i, cst_device);}
   function description(i){return caml_call2(Jv[23][2], i, cst_description);}
   var
    Info = [0, vendor, architecture, device, description],
    cst_isFallbackAdapter = "isFallbackAdapter",
    cst_gpu = "gpu";
   function limits$0(a){return a[cst_limits];}
   function has_feature$0(a, f){
    var set = a[cst_features];
    return caml_call1(Jv[8], set) ? 0 : set.has(f) | 0;
   }
   function is_fallback_adapter(a){
    return caml_call2(Jv[19][2], a, cst_isFallbackAdapter);
   }
   function request_device(opt, a){
    if(opt) var sth = opt[1], descr = sth; else var descr = Jv[5];
    var _j_ = a.requestDevice(descr);
    return caml_call1(caml_call1(Fut[11], function(_k_){return _k_;}), _j_);
   }
   function request_adapter_info(a, unmask_hints){
    var
     arr = caml_call2(Jv[30], function(_i_){return _i_;}, unmask_hints),
     _g_ = a.requestAdapterInfo(arr);
    return caml_call1(caml_call1(Fut[11], function(_h_){return _h_;}), _g_);
   }
   function of_navigator(n){return caml_call2(Jv[13], n, cst_gpu);}
   function get_preferred_canvas_format(g){return g.getPreferredCanvasFormat();
   }
   function has_wgsl_language_feature(g, f){
    var set = g["wgslLanguageFeatures"];
    return caml_call1(Jv[8], set) ? 0 : set.has(f) | 0;
   }
   var
    low_power = "low-power",
    high_performance = "high-performance",
    Power_preference = [0, low_power, high_performance],
    cst_powerPreference = "powerPreference",
    cst_forceFallbackAdapter = "forceFallbackAdapter";
   function opts(power_preference, force_fallback_adapater, param){
    var o = {};
    caml_call3(Jv[23][4], o, cst_powerPreference, power_preference);
    caml_call3
     (Jv[19][4], o, cst_forceFallbackAdapter, force_fallback_adapater);
    return o;
   }
   function request_adapter(opt, g){
    if(opt) var sth = opt[1], opts = sth; else var opts = Jv[5];
    var
     ok = caml_call1(Jv[10], function(_f_){return _f_;}),
     _e_ = g.requestAdapter(opts);
    return caml_call1(caml_call1(Fut[11], ok), _e_);
   }
   var
    opaque = "opaque",
    premultiplied = "premultiplied",
    Alpha_mode = [0, opaque, premultiplied],
    cst_usage$3 = cst_usage$4,
    cst_colorSpace$1 = cst_colorSpace$2,
    cst_alphaMode = "alphaMode";
   function get(cnv){
    var _c_ = cnv.getContext("webgpu");
    return caml_call1(caml_call1(Jv[10], function(_d_){return _d_;}), _c_);
   }
   function conf(usage, opt, color_space, alpha_mode, device, format){
    if(opt) var sth = opt[1], view_formats = sth; else var view_formats = 0;
    var
     view_formats$0 =
       caml_call2(Jv[30], function(_b_){return _b_;}, view_formats),
     c = {};
    caml_call3(Jv[20][4], c, cst_usage$3, usage);
    c[cst_viewFormats] = view_formats$0;
    caml_call3(Jv[23][4], c, cst_colorSpace$1, color_space);
    caml_call3(Jv[23][4], c, cst_alphaMode, alpha_mode);
    c[cst_device$0] = device;
    c[cst_format$5] = format;
    return c;
   }
   function configure(ctx, conf){ctx.configure(conf); return 0;}
   function unconfigure(ctx){ctx.unconfigure(); return 0;}
   function get_current_texture(ctx){return ctx.getCurrentTexture();}
   var
    Brr_webgpu =
      [0,
       [0,
        Origin_2d,
        Origin_3d,
        Extent_3d,
        Compare_function,
        Buffer,
        [0,
         Format,
         Usage$0,
         Dimension,
         View_dimension,
         Aspect,
         Storage,
         External,
         View,
         Sample_type,
         Binding_layout$2,
         Descriptor$2,
         create_view,
         destroy$0,
         width,
         height,
         depth_or_array_layers,
         mip_level_count,
         sample_count,
         dimension,
         format,
         usage$0],
        Image,
        Sampler,
        Bind_group,
        Pipeline_layout,
        [0,
         Compilation_message,
         Compilation_info,
         Compilation_hint,
         [0, v$23],
         label$6,
         get_compilation_info],
        [0, v$24],
        Compute_pipeline,
        Index_format,
        Primitive,
        Vertex,
        Blend,
        Color,
        Stencil,
        Depth_stencil_state,
        Multisample_state,
        Fragment_state,
        Render_pipeline,
        Query,
        [0,
         Timestamp_writes,
         Descriptor$10,
         [0,
          label$10,
          end,
          set_pipeline,
          set_bind_group,
          set_bind_group$0,
          dispatch_workgroups,
          dispatch_workgroups_indirect,
          push_debug_group,
          pop_debug_group,
          insert_debug_marker]],
        [0,
         Descriptor$11,
         label$11,
         [0,
          Descriptor$12,
          label$12,
          finish,
          set_pipeline$0,
          set_bind_group$1,
          set_bind_group$2,
          set_index_buffer,
          set_vertex_buffer,
          draw,
          draw_indexed,
          draw_indirect,
          draw_indexed_indirect,
          push_debug_group$0,
          pop_debug_group$0,
          insert_debug_marker$0]],
        [0,
         Load_op,
         Store_op,
         Timestamp_writes$0,
         Color_attachment,
         Depth_stencil_attachment,
         Descriptor$13,
         [0,
          label$13,
          end$0,
          set_pipeline$1,
          set_viewport,
          set_scissor_rect,
          set_blend_constant,
          set_stencil_reference,
          set_bind_group$3,
          set_bind_group$4,
          set_index_buffer$0,
          set_vertex_buffer$0,
          execute_bundles,
          draw$0,
          draw_indexed$0,
          draw_indirect$0,
          draw_indexed_indirect$0,
          push_debug_group$1,
          pop_debug_group$1,
          insert_debug_marker$1]],
        [0,
         Buffer$0,
         [0,
          Descriptor$15,
          label$15,
          finish$0,
          begin_render_pass,
          begin_compute_pass,
          clear_buffer,
          write_timestamp,
          resolve_query_set,
          copy_buffer_to_buffer,
          copy_buffer_to_texture,
          copy_texture_to_buffer,
          copy_texture_to_texture,
          push_debug_group$2,
          pop_debug_group$2,
          insert_debug_marker$2]],
        Queue,
        Supported_limits,
        Feature_name,
        Error,
        Pipeline_error,
        [0,
         Lost_reason,
         Lost_info,
         Descriptor$17,
         function(_a_){return _a_;},
         label$17,
         has_feature,
         limits,
         lost,
         queue,
         destroy$2,
         push_error_scope,
         pop_error_scope,
         create_buffer,
         create_texture,
         import_external_texture,
         create_sampler,
         create_bind_group_layout,
         create_bind_group,
         create_pipeline_layout,
         create_shader_module,
         create_compute_pipeline,
         create_compute_pipeline_async,
         create_render_pipeline,
         create_render_pipeline_async,
         create_query_set,
         create_render_bundle_encoder,
         create_command_encoder,
         Ev],
        [0,
         Info,
         has_feature$0,
         limits$0,
         is_fallback_adapter,
         request_device,
         request_adapter_info],
        of_navigator,
        get_preferred_canvas_format,
        has_wgsl_language_feature,
        Power_preference,
        opts,
        request_adapter,
        [0,
         Alpha_mode,
         get,
         get_current_texture,
         conf,
         configure,
         unconfigure]]];
   runtime.caml_register_global(686, Brr_webgpu, "Brr_webgpu");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Brr_webaudio
//# unitInfo: Requires: Fut, Jstr, Jv, Stdlib__Option
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Q$0 = "Q",
    cst_attack$0 = "attack",
    cst_automationRate$2 = "automationRate",
    cst_buffer$3 = "buffer",
    cst_channelCount$16 = "channelCount",
    cst_channelCountMode$16 = "channelCountMode",
    cst_channelInterpretation$16 = "channelInterpretation",
    cst_coneInnerAngle$1 = "coneInnerAngle",
    cst_coneOuterAngle$1 = "coneOuterAngle",
    cst_coneOuterGain$1 = "coneOuterGain",
    cst_currentTime$1 = "currentTime",
    cst_curve = "curve",
    cst_defaultValue$1 = "defaultValue",
    cst_delayTime$0 = "delayTime",
    cst_detune$2 = "detune",
    cst_disableNormalization$1 = "disableNormalization",
    cst_distanceModel$2 = "distanceModel",
    cst_fftSize$2 = "fftSize",
    cst_frequency$1 = "frequency",
    cst_gain$1 = "gain",
    cst_knee$0 = "knee",
    cst_length$2 = "length",
    cst_loop$2 = "loop",
    cst_loopEnd$1 = "loopEnd",
    cst_loopStart$1 = "loopStart",
    cst_maxDecibels$2 = "maxDecibels",
    cst_maxDistance$2 = "maxDistance",
    cst_maxValue$1 = "maxValue",
    cst_mediaElement = "mediaElement",
    cst_mediaStream = "mediaStream",
    cst_minDecibels$2 = "minDecibels",
    cst_minValue$1 = "minValue",
    cst_normalize$1 = "normalize",
    cst_numberOfChannels$0 = "numberOfChannels",
    cst_numberOfInputs$2 = "numberOfInputs",
    cst_numberOfOutputs$1 = "numberOfOutputs",
    cst_offset$0 = "offset",
    cst_orientationX$0 = "orientationX",
    cst_orientationY$0 = "orientationY",
    cst_orientationZ$0 = "orientationZ",
    cst_oversample$2 = "oversample",
    cst_pan$0 = "pan",
    cst_panningModel$2 = "panningModel",
    cst_playbackRate$0 = "playbackRate",
    cst_port = "port",
    cst_positionX$0 = "positionX",
    cst_positionY$0 = "positionY",
    cst_positionZ$0 = "positionZ",
    cst_ratio$0 = "ratio",
    cst_refDistance$2 = "refDistance",
    cst_release$0 = "release",
    cst_sampleRate$3 = "sampleRate",
    cst_smoothingTimeConstant$2 = "smoothingTimeConstant",
    cst_threshold$0 = "threshold",
    cst_type$5 = "type",
    cst_value$1 = "value";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Fut = global_data.Fut,
    Jv = global_data.Jv,
    Jstr = global_data.Jstr,
    Stdlib_Option = global_data.Stdlib__Option,
    a_rate = "a-rate",
    k_rate = "k-rate",
    Automation_rate = [0, a_rate, k_rate],
    cst_automationRate = cst_automationRate$2,
    cst_minValue = cst_minValue$1,
    cst_maxValue = cst_maxValue$1,
    cst_defaultValue = cst_defaultValue$1,
    cst_value = cst_value$1,
    cst_value$0 = cst_value$1,
    cst_automationRate$0 = cst_automationRate$2,
    cst_automationRate$1 = cst_automationRate$2,
    cst_defaultValue$0 = cst_defaultValue$1,
    cst_minValue$0 = cst_minValue$1,
    cst_maxValue$0 = cst_maxValue$1;
   function descriptor
   (automation_rate, min_value, max_value, default_value, n){
    var o = {};
    o["name"] = n;
    caml_call3(Jv[23][4], o, cst_automationRate, automation_rate);
    caml_call3(Jv[21][4], o, cst_minValue, min_value);
    caml_call3(Jv[21][4], o, cst_maxValue, max_value);
    caml_call3(Jv[21][4], o, cst_defaultValue, max_value);
    return o;
   }
   function value(p){return caml_call2(Jv[21][2], p, cst_value);}
   function set_value(p, v){return caml_call3(Jv[21][3], p, cst_value$0, v);}
   function automation_rate(p){
    return caml_call2(Jv[23][2], p, cst_automationRate$0);
   }
   function set_automation_rate(p, v){
    return caml_call3(Jv[23][3], p, cst_automationRate$1, v);
   }
   function default_value(p){
    return caml_call2(Jv[21][2], p, cst_defaultValue$0);
   }
   function min_value(p){return caml_call2(Jv[21][2], p, cst_minValue$0);}
   function max_value(p){return caml_call2(Jv[21][2], p, cst_maxValue$0);}
   function set_value_at_time(p, v, t){p.setValueAtTime(v, t); return 0;}
   function linear_ramp_to_value_at_time(p, v, t){p.linearRampToValueAtTime(v, t); return 0;
   }
   function exponential_ramp_to_value_at_t(p, v, t){p.exponentialRampToValueAtTime(v, t); return 0;
   }
   function set_target_at_time(p, v, t, r){p.setTargetAtTime(v, t, r); return 0;
   }
   function set_value_curve_at_time(p, vs, t, d){p.setValueCurveAtTime(vs, t, d); return 0;
   }
   function cancel_scheduled_values(p, t){p.cancelScheduledValues(t); return 0;
   }
   function cancel_and_hold_at_time(p, t){p.cancelAndHoldAtTime(t); return 0;}
   var
    Param =
      [0,
       Automation_rate,
       descriptor,
       value,
       set_value,
       automation_rate,
       set_automation_rate,
       default_value,
       min_value,
       max_value,
       set_value_at_time,
       linear_ramp_to_value_at_time,
       exponential_ramp_to_value_at_t,
       set_target_at_time,
       set_value_curve_at_time,
       cancel_scheduled_values,
       cancel_and_hold_at_time];
   function position_x(l){return l.positionX();}
   function position_y(l){return l.positionY();}
   function position_z(l){return l.positionZ();}
   function forward_x(l){return l.forwardX();}
   function forward_y(l){return l.forwardY();}
   function forward_z(l){return l.forwardZ();}
   function up_x(l){return l.upX();}
   function up_y(l){return l.upY();}
   function up_z(l){return l.upZ();}
   var
    Listener =
      [0,
       position_x,
       position_y,
       position_z,
       forward_x,
       forward_y,
       forward_z,
       up_x,
       up_y,
       up_z],
    cst_currentFrame = "currentFrame",
    cst_currentTime = cst_currentTime$1,
    cst_sampleRate = cst_sampleRate$3;
   function add_module(w, url){
    var _P_ = w.addModule(url);
    return caml_call1(caml_call1(Fut[11], function(_Q_){return 0;}), _P_);
   }
   function register_processor(n, c){
    Jv[12]["registerProcessor"](n, c);
    return 0;
   }
   function current_frame(param){
    return caml_call2(Jv[20][2], Jv[12], cst_currentFrame);
   }
   function current_time(param){
    return caml_call2(Jv[21][2], Jv[12], cst_currentTime);
   }
   function sample_rate(param){
    return caml_call2(Jv[21][2], Jv[12], cst_sampleRate);
   }
   var G = [0, register_processor, current_frame, current_time, sample_rate];
   function port(p){return p[cst_port];}
   var
    Processor = [0, port],
    Worklet = [0, add_module, G, Processor],
    cst_sampleRate$0 = cst_sampleRate$3,
    cst_length = cst_length$2,
    cst_length$0 = cst_length$2,
    cst_numberOfChannels = cst_numberOfChannels$0;
   function opts(cc, l, r, param){
    return {numberOfChannels: cc, length: l, sampleRate: r};
   }
   function create(opts){return new Jv[12]["AudioBuffer"](opts);}
   function sample_rate$0(b){
    return caml_call2(Jv[21][2], b, cst_sampleRate$0);
   }
   function length(b){return caml_call2(Jv[20][2], b, cst_length);}
   function duration_s(b){return caml_call2(Jv[21][2], b, cst_length$0);}
   function channel_count(b){
    return caml_call2(Jv[20][2], b, cst_numberOfChannels);
   }
   function get_channel_data(b, channel){return b.getChannelData(channel);}
   function copy_from_channel(opt, b, c, dst){
    if(opt) var sth = opt[1], dst_start = sth; else var dst_start = 0;
    b.copyFromChannel(dst, c, dst_start);
    return 0;
   }
   function copy_to_channel(opt, b, src, c){
    if(opt) var sth = opt[1], dst_start = sth; else var dst_start = 0;
    b.copyToChannel(src, c, dst_start);
    return 0;
   }
   var
    Buffer =
      [0,
       opts,
       create,
       sample_rate$0,
       length,
       duration_s,
       channel_count,
       get_channel_data,
       copy_from_channel,
       copy_to_channel],
    max = "max",
    clamped_max = "clamped-max",
    explicit = "explicit",
    Channel_count_mode = [0, max, clamped_max, explicit],
    speakers = "speakers",
    discrete = "discrete",
    Channel_interpretation = [0, speakers, discrete],
    cst_numberOfInputs = cst_numberOfInputs$2,
    cst_numberOfOutputs = cst_numberOfOutputs$1,
    cst_channelCount = cst_channelCount$16,
    cst_channelCount$0 = cst_channelCount$16,
    cst_channelCountMode = cst_channelCountMode$16,
    cst_channelCountMode$0 = cst_channelCountMode$16,
    cst_channelInterpretation = cst_channelInterpretation$16,
    cst_channelInterpretation$0 = cst_channelInterpretation$16,
    cst_channelCount$1 = cst_channelCount$16,
    cst_channelCountMode$1 = cst_channelCountMode$16,
    cst_channelInterpretation$1 = cst_channelInterpretation$16,
    cst_fftSize = cst_fftSize$2,
    cst_minDecibels = cst_minDecibels$2,
    cst_maxDecibels = cst_maxDecibels$2,
    cst_smoothingTimeConstant = cst_smoothingTimeConstant$2,
    cst_fftSize$0 = cst_fftSize$2,
    cst_fftSize$1 = cst_fftSize$2,
    cst_frequencyBinCount = "frequencyBinCount",
    cst_minDecibels$0 = cst_minDecibels$2,
    cst_minDecibels$1 = cst_minDecibels$2,
    cst_maxDecibels$0 = cst_maxDecibels$2,
    cst_maxDecibels$1 = cst_maxDecibels$2,
    cst_smoothingTimeConstant$0 = cst_smoothingTimeConstant$2,
    cst_smoothingTimeConstant$1 = cst_smoothingTimeConstant$2;
   function context(n){return n["context"];}
   function input_count(n){
    return caml_call2(Jv[20][2], n, cst_numberOfInputs);
   }
   function output_count(n){
    return caml_call2(Jv[20][2], n, cst_numberOfOutputs);
   }
   function channel_count$0(n){
    return caml_call2(Jv[20][2], n, cst_channelCount);
   }
   function set_channel_count(n, c){
    return caml_call3(Jv[20][3], n, cst_channelCount$0, c);
   }
   function channel_count_mode(n){
    return caml_call2(Jv[23][2], n, cst_channelCountMode);
   }
   function set_channel_count_mode(n, m){
    return caml_call3(Jv[23][3], n, cst_channelCountMode$0, m);
   }
   function channel_interpretation(n){
    return caml_call2(Jv[23][2], n, cst_channelInterpretation);
   }
   function set_channel_interpretation(n, i){
    return caml_call3(Jv[23][3], n, cst_channelInterpretation$0, i);
   }
   function connect_node(opt, _O_, n, dst){
    if(opt) var sth = opt[1], output = sth; else var output = 0;
    if(_O_) var sth$0 = _O_[1], input = sth$0; else var input = 0;
    n.connect(dst, output, input);
    return 0;
   }
   function connect_param(opt, n, dst){
    if(opt) var sth = opt[1], output = sth; else var output = 0;
    n.connect(dst, output);
    return 0;
   }
   function disconnect(n){n.disconnect(); return 0;}
   function disconnect_node(output, input, n, dst){
    var
     output$0 = caml_call3(Jv[11], Jv[5], function(_N_){return _N_;}, output),
     input$0 = caml_call3(Jv[11], Jv[5], function(_M_){return _M_;}, input);
    n.disconnect(dst, output$0, input$0);
    return 0;
   }
   function disconnect_param(output, n, dst){
    var
     output$0 = caml_call3(Jv[11], Jv[5], function(_L_){return _L_;}, output);
    n.disconnect(dst, output$0);
    return 0;
   }
   function opts$0
   (channel_count,
    channel_count_mode,
    channel_interpretation,
    fft_size,
    max_decibels,
    min_decibels,
    smoothing_time_constant,
    param){
    var o = {};
    caml_call3(Jv[20][4], o, cst_channelCount$1, channel_count);
    caml_call3(Jv[23][4], o, cst_channelCountMode$1, channel_count_mode);
    caml_call3
     (Jv[23][4], o, cst_channelInterpretation$1, channel_interpretation);
    caml_call3(Jv[20][4], o, cst_fftSize, fft_size);
    caml_call3(Jv[21][4], o, cst_minDecibels, min_decibels);
    caml_call3(Jv[21][4], o, cst_maxDecibels, max_decibels);
    caml_call3
     (Jv[21][4], o, cst_smoothingTimeConstant, smoothing_time_constant);
    return o;
   }
   function create$0(opt, c){
    if(opt) var sth = opt[1], opts = sth; else var opts = Jv[5];
    return new Jv[12]["AnalyserNode"](c, opts);
   }
   function get_float_frequency_data(n, a){n.getFloatFrequencyData(a); return 0;
   }
   function get_byte_frequency_data(n, a){n.getByteFrequencyData(a); return 0;
   }
   function get_float_time_domain_data(n, a){n.getFloatTimeDomainData(a); return 0;
   }
   function get_byte_time_domain_data(n, a){n.getByteTimeDomainData(a); return 0;
   }
   function fft_size(n){return caml_call2(Jv[20][2], n, cst_fftSize$0);}
   function set_fft_size(n, v){
    return caml_call3(Jv[20][3], n, cst_fftSize$1, v);
   }
   function frequency_bin_count(n){
    return caml_call2(Jv[20][2], n, cst_frequencyBinCount);
   }
   function min_decibels(n){
    return caml_call2(Jv[21][2], n, cst_minDecibels$0);
   }
   function set_min_decibels(n, v){
    return caml_call3(Jv[21][3], n, cst_minDecibels$1, v);
   }
   function max_decibels(n){
    return caml_call2(Jv[21][2], n, cst_maxDecibels$0);
   }
   function set_max_decibels(n, v){
    return caml_call3(Jv[21][3], n, cst_maxDecibels$1, v);
   }
   function smoothing_time_constant(n){
    return caml_call2(Jv[21][2], n, cst_smoothingTimeConstant$0);
   }
   function set_smoothing_time_constant(n, v){
    return caml_call3(Jv[21][3], n, cst_smoothingTimeConstant$1, v);
   }
   var
    Analyser =
      [0,
       opts$0,
       create$0,
       get_float_frequency_data,
       get_byte_frequency_data,
       get_float_time_domain_data,
       get_byte_time_domain_data,
       fft_size,
       set_fft_size,
       frequency_bin_count,
       min_decibels,
       set_min_decibels,
       max_decibels,
       set_max_decibels,
       smoothing_time_constant,
       set_smoothing_time_constant],
    lowpass = "lowpass",
    highpass = "highpass",
    bandpass = "bandpass",
    lowshelf = "lowshelf",
    highshelf = "highshelf",
    peaking = "peaking",
    notch = "notch",
    allpass = "allpass",
    Type =
      [0,
       lowpass,
       highpass,
       bandpass,
       lowshelf,
       highshelf,
       peaking,
       notch,
       allpass],
    cst_channelCount$2 = cst_channelCount$16,
    cst_channelCountMode$2 = cst_channelCountMode$16,
    cst_channelInterpretation$2 = cst_channelInterpretation$16,
    cst_type = cst_type$5,
    cst_Q = cst_Q$0,
    cst_detune = cst_detune$2,
    cst_frequency = cst_frequency$1,
    cst_gain = cst_gain$1,
    cst_type$0 = cst_type$5,
    cst_type$1 = cst_type$5;
   function opts$1
   (channel_count,
    channel_count_mode,
    channel_interpretation,
    type,
    q,
    detune,
    frequency,
    gain,
    param){
    var o = {};
    caml_call3(Jv[20][4], o, cst_channelCount$2, channel_count);
    caml_call3(Jv[23][4], o, cst_channelCountMode$2, channel_count_mode);
    caml_call3
     (Jv[23][4], o, cst_channelInterpretation$2, channel_interpretation);
    caml_call3(Jv[23][4], o, cst_type, type);
    caml_call3(Jv[21][4], o, cst_Q, q);
    caml_call3(Jv[21][4], o, cst_detune, detune);
    caml_call3(Jv[21][4], o, cst_frequency, frequency);
    caml_call3(Jv[21][4], o, cst_gain, gain);
    return o;
   }
   function create$1(opt, c){
    if(opt) var sth = opt[1], opts = sth; else var opts = Jv[5];
    return new Jv[12]["BiquadFilterNode"](c, opts);
   }
   function type(n){return caml_call2(Jv[23][2], n, cst_type$0);}
   function set_type(n, v){return caml_call3(Jv[23][3], n, cst_type$1, v);}
   function detune(n){return n.detune();}
   function frequency(n){return n.frequency();}
   function q(n){return n.Q();}
   function gain(n){return n.gain();}
   function get_frequency_response(n, f, m, p){n.getFrequencyResponse(f, m, p); return 0;
   }
   var
    Biquad_filter =
      [0,
       Type,
       opts$1,
       create$1,
       type,
       set_type,
       detune,
       frequency,
       q,
       gain,
       get_frequency_response],
    cst_buffer = cst_buffer$3,
    cst_detune$0 = cst_detune$2,
    cst_loop = cst_loop$2,
    cst_loop_start = "loop_start",
    cst_loop_end = "loop_end",
    cst_playbackRate = cst_playbackRate$0,
    cst_buffer$0 = cst_buffer$3,
    cst_loop$0 = cst_loop$2,
    cst_loop$1 = cst_loop$2,
    cst_loopStart = cst_loopStart$1,
    cst_loopStart$0 = cst_loopStart$1,
    cst_loopEnd = cst_loopEnd$1,
    cst_loopEnd$0 = cst_loopEnd$1;
   function opts$2
   (buffer, detune, loop, loop_start, loop_end, playback_rate, param){
    var o = {};
    caml_call3(Jv[16], o, cst_buffer, buffer);
    caml_call3(Jv[21][4], o, cst_detune$0, detune);
    caml_call3(Jv[19][4], o, cst_loop, loop);
    caml_call3(Jv[21][4], o, cst_loop_start, loop_start);
    caml_call3(Jv[21][4], o, cst_loop_end, loop_end);
    caml_call3(Jv[21][4], o, cst_playbackRate, playback_rate);
    return o;
   }
   function create$2(opt, c){
    if(opt) var sth = opt[1], opts = sth; else var opts = Jv[5];
    return new Jv[12]["AudioBufferSourceNode"](c, opts);
   }
   function buffer(n){
    return caml_call3(Jv[14], function(_K_){return _K_;}, n, cst_buffer$0);
   }
   function set_buffer(n, v){
    return n[cst_buffer$3] =
            caml_call3(Jv[11], Jv[4], function(_J_){return _J_;}, v);
   }
   function playback_rate(n){return n[cst_playbackRate$0];}
   function detune$0(n){return n[cst_detune$2];}
   function loop(n){return caml_call2(Jv[19][2], n, cst_loop$0);}
   function set_loop(n, b){return caml_call3(Jv[19][3], n, cst_loop$1, b);}
   function loop_start(n){return caml_call2(Jv[21][2], n, cst_loopStart);}
   function set_loop_start(n, v){
    return caml_call3(Jv[21][3], n, cst_loopStart$0, v);
   }
   function loop_end(n){return caml_call2(Jv[21][2], n, cst_loopEnd);}
   function set_loop_end(n, v){
    return caml_call3(Jv[21][3], n, cst_loopEnd$0, v);
   }
   function start(t, o, d, n){
    var
     t$0 = caml_call3(Jv[11], Jv[5], function(_I_){return _I_;}, t),
     o$0 = caml_call3(Jv[11], Jv[5], function(_H_){return _H_;}, o),
     d$0 = caml_call3(Jv[11], Jv[5], function(_G_){return _G_;}, d);
    n.start(t$0, o$0, d$0);
    return 0;
   }
   function stop(t, n){
    var t$0 = caml_call3(Jv[11], Jv[5], function(_F_){return _F_;}, t);
    n.stop(t$0);
    return 0;
   }
   var
    Buffer_source =
      [0,
       opts$2,
       create$2,
       buffer,
       set_buffer,
       playback_rate,
       detune$0,
       loop,
       set_loop,
       loop_start,
       set_loop_start,
       loop_end,
       set_loop_end,
       start,
       stop],
    cst_channelCount$3 = cst_channelCount$16,
    cst_channelCountMode$3 = cst_channelCountMode$16,
    cst_channelInterpretation$3 = cst_channelInterpretation$16,
    cst_numberOfInputs$0 = cst_numberOfInputs$2;
   function opts$3
   (channel_count,
    channel_count_mode,
    channel_interpretation,
    input_count,
    param){
    var o = {};
    caml_call3(Jv[20][4], o, cst_channelCount$3, channel_count);
    caml_call3(Jv[23][4], o, cst_channelCountMode$3, channel_count_mode);
    caml_call3
     (Jv[23][4], o, cst_channelInterpretation$3, channel_interpretation);
    caml_call3(Jv[20][4], o, cst_numberOfInputs$0, input_count);
    return o;
   }
   function create$3(opt, c){
    if(opt) var sth = opt[1], opts = sth; else var opts = Jv[5];
    return new Jv[12]["ChannelMergerNode"](c, opts);
   }
   var
    Channel_merger = [0, opts$3, create$3],
    cst_channelCount$4 = cst_channelCount$16,
    cst_channelCountMode$4 = cst_channelCountMode$16,
    cst_channelInterpretation$4 = cst_channelInterpretation$16,
    cst_numberOfOutput = "numberOfOutput";
   function opts$4
   (channel_count,
    channel_count_mode,
    channel_interpretation,
    output_count,
    param){
    var o = {};
    caml_call3(Jv[20][4], o, cst_channelCount$4, channel_count);
    caml_call3(Jv[23][4], o, cst_channelCountMode$4, channel_count_mode);
    caml_call3
     (Jv[23][4], o, cst_channelInterpretation$4, channel_interpretation);
    caml_call3(Jv[20][4], o, cst_numberOfOutput, output_count);
    return o;
   }
   function create$4(opt, c){
    if(opt) var sth = opt[1], opts = sth; else var opts = Jv[5];
    return new Jv[12]["ChannelSplitterNode"](c, opts);
   }
   var Channel_splitter = [0, opts$4, create$4], cst_offset = cst_offset$0;
   function opts$5(offset, param){
    var o = {};
    caml_call3(Jv[21][4], o, cst_offset, offset);
    return o;
   }
   function create$5(opt, c){
    if(opt) var sth = opt[1], opts = sth; else var opts = Jv[5];
    return new Jv[12]["ConstantSourceNode"](c, opts);
   }
   function offset(n){return n[cst_offset$0];}
   function start$0(t, n){
    var t$0 = caml_call3(Jv[11], Jv[5], function(_E_){return _E_;}, t);
    n.start(t$0);
    return 0;
   }
   function stop$0(t, n){
    var t$0 = caml_call3(Jv[11], Jv[5], function(_D_){return _D_;}, t);
    n.stop(t$0);
    return 0;
   }
   var
    Constant_source = [0, opts$5, create$5, offset, start$0, stop$0],
    cst_channelCount$5 = cst_channelCount$16,
    cst_channelCountMode$5 = cst_channelCountMode$16,
    cst_channelInterpretation$5 = cst_channelInterpretation$16,
    cst_buffer$1 = cst_buffer$3,
    cst_disableNormalization = cst_disableNormalization$1,
    cst_buffer$2 = cst_buffer$3,
    cst_normalize = cst_normalize$1,
    cst_normalize$0 = cst_normalize$1;
   function opts$6
   (channel_count,
    channel_count_mode,
    channel_interpretation,
    buffer,
    disable_normalization,
    param){
    var o = {};
    caml_call3(Jv[20][4], o, cst_channelCount$5, channel_count);
    caml_call3(Jv[23][4], o, cst_channelCountMode$5, channel_count_mode);
    caml_call3
     (Jv[23][4], o, cst_channelInterpretation$5, channel_interpretation);
    caml_call3(Jv[16], o, cst_buffer$1, buffer);
    caml_call3(Jv[19][4], o, cst_disableNormalization, disable_normalization);
    return o;
   }
   function create$6(opt, c){
    if(opt) var sth = opt[1], opts = sth; else var opts = Jv[5];
    return new Jv[12]["ConvolverNode"](c, opts);
   }
   function buffer$0(n){
    return caml_call3(Jv[14], function(_C_){return _C_;}, n, cst_buffer$2);
   }
   function set_buffer$0(n, v){
    return n[cst_buffer$3] =
            caml_call3(Jv[11], Jv[4], function(_B_){return _B_;}, v);
   }
   function normalize(n){return caml_call2(Jv[19][2], n, cst_normalize);}
   function set_normalize(n, b){
    return caml_call3(Jv[19][3], n, cst_normalize$0, b);
   }
   var
    Convolver =
      [0, opts$6, create$6, buffer$0, set_buffer$0, normalize, set_normalize],
    cst_channelCount$6 = cst_channelCount$16,
    cst_channelCountMode$6 = cst_channelCountMode$16,
    cst_channelInterpretation$6 = cst_channelInterpretation$16,
    cst_delayTime = cst_delayTime$0,
    cst_maxDelayTime = "maxDelayTime";
   function opts$7
   (channel_count,
    channel_count_mode,
    channel_interpretation,
    delay_time,
    max_delay_time,
    param){
    var o = {};
    caml_call3(Jv[20][4], o, cst_channelCount$6, channel_count);
    caml_call3(Jv[23][4], o, cst_channelCountMode$6, channel_count_mode);
    caml_call3
     (Jv[23][4], o, cst_channelInterpretation$6, channel_interpretation);
    caml_call3(Jv[21][4], o, cst_delayTime, delay_time);
    caml_call3(Jv[21][4], o, cst_maxDelayTime, max_delay_time);
    return o;
   }
   function create$7(opt, c){
    if(opt) var sth = opt[1], opts = sth; else var opts = Jv[5];
    return new Jv[12]["DelayNode"](c, opts);
   }
   function delay_time(n){return n[cst_delayTime$0];}
   var
    Delay = [0, opts$7, create$7, delay_time],
    cst_maxChannelCount = "maxChannelCount";
   function max_channel_count(n){
    return caml_call2(Jv[20][2], n, cst_maxChannelCount);
   }
   var
    Destination = [0, max_channel_count],
    cst_channelCount$7 = cst_channelCount$16,
    cst_channelCountMode$7 = cst_channelCountMode$16,
    cst_channelInterpretation$7 = cst_channelInterpretation$16,
    cst_attack = cst_attack$0,
    cst_knee = cst_knee$0,
    cst_ratio = cst_ratio$0,
    cst_release = cst_release$0,
    cst_threshold = cst_threshold$0,
    cst_reduction = "reduction";
   function opts$8
   (channel_count,
    channel_count_mode,
    channel_interpretation,
    attack,
    knee,
    ratio,
    release,
    threshold,
    param){
    var o = {};
    caml_call3(Jv[20][4], o, cst_channelCount$7, channel_count);
    caml_call3(Jv[23][4], o, cst_channelCountMode$7, channel_count_mode);
    caml_call3
     (Jv[23][4], o, cst_channelInterpretation$7, channel_interpretation);
    caml_call3(Jv[21][4], o, cst_attack, attack);
    caml_call3(Jv[21][4], o, cst_knee, knee);
    caml_call3(Jv[21][4], o, cst_ratio, ratio);
    caml_call3(Jv[21][4], o, cst_release, release);
    caml_call3(Jv[21][4], o, cst_threshold, threshold);
    return o;
   }
   function create$8(opt, c){
    if(opt) var sth = opt[1], opts = sth; else var opts = Jv[5];
    return new Jv[12]["DynamicsCompressorNode"](c, opts);
   }
   function attack(n){return n[cst_attack$0];}
   function knee(n){return n[cst_knee$0];}
   function ratio(n){return n[cst_ratio$0];}
   function reduction(n){return caml_call2(Jv[21][2], n, cst_reduction);}
   function release(n){return n[cst_release$0];}
   function threshold(n){return n[cst_threshold$0];}
   var
    Dynamics_compressor =
      [0,
       opts$8,
       create$8,
       attack,
       knee,
       ratio,
       reduction,
       release,
       threshold],
    cst_channelCount$8 = cst_channelCount$16,
    cst_channelCountMode$8 = cst_channelCountMode$16,
    cst_channelInterpretation$8 = cst_channelInterpretation$16,
    cst_gain$0 = cst_gain$1;
   function opts$9
   (channel_count, channel_count_mode, channel_interpretation, gain, param){
    var o = {};
    caml_call3(Jv[20][4], o, cst_channelCount$8, channel_count);
    caml_call3(Jv[23][4], o, cst_channelCountMode$8, channel_count_mode);
    caml_call3
     (Jv[23][4], o, cst_channelInterpretation$8, channel_interpretation);
    caml_call3(Jv[21][4], o, cst_gain$0, gain);
    return o;
   }
   function create$9(opt, c){
    if(opt) var sth = opt[1], opts = sth; else var opts = Jv[5];
    return new Jv[12]["GainNode"](c, opts);
   }
   function gain$0(n){return n[cst_gain$1];}
   var
    Gain = [0, opts$9, create$9, gain$0],
    cst_channelCount$9 = cst_channelCount$16,
    cst_channelCountMode$9 = cst_channelCountMode$16,
    cst_channelInterpretation$9 = cst_channelInterpretation$16;
   function opts$10
   (channel_count,
    channel_count_mode,
    channel_interpretation,
    feedforward,
    feedback,
    param){
    var o = {};
    caml_call3(Jv[20][4], o, cst_channelCount$9, channel_count);
    caml_call3(Jv[23][4], o, cst_channelCountMode$9, channel_count_mode);
    caml_call3
     (Jv[23][4], o, cst_channelInterpretation$9, channel_interpretation);
    o["feedforward"] = feedforward;
    o["feedback"] = feedback;
    return o;
   }
   function create$10(c, opts){return new Jv[12]["IIRFilterNode"](c, opts);}
   function get_frequency_response$0(n, f, m, p){n.getFrequencyResponse(f, m, p); return 0;
   }
   var Iir_filter = [0, opts$10, create$10, get_frequency_response$0];
   function opts$11(el, param){
    var o = {};
    o[cst_mediaElement] = el;
    return o;
   }
   function create$11(c, opts){
    return new Jv[12]["MediaElementAudioSourceNode"](c, opts);
   }
   function media_element(n){return n[cst_mediaElement];}
   var
    Media_element_source = [0, opts$11, create$11, media_element],
    cst_channelCount$10 = cst_channelCount$16,
    cst_channelCountMode$10 = cst_channelCountMode$16,
    cst_channelInterpretation$10 = cst_channelInterpretation$16;
   function opts$12
   (channel_count, channel_count_mode, channel_interpretation, param){
    var o = {};
    caml_call3(Jv[20][4], o, cst_channelCount$10, channel_count);
    caml_call3(Jv[23][4], o, cst_channelCountMode$10, channel_count_mode);
    caml_call3
     (Jv[23][4], o, cst_channelInterpretation$10, channel_interpretation);
    return o;
   }
   function create$12(opt, c){
    if(opt) var sth = opt[1], opts = sth; else var opts = Jv[5];
    return new Jv[12]["MediaStreamAudioDestinationNode"](c, opts);
   }
   function stream(n){return n["stream"];}
   var Media_stream_destination = [0, opts$12, create$12, stream];
   function opts$13(stream, param){
    var o = {};
    o[cst_mediaStream] = stream;
    return o;
   }
   function create$13(c, opts){
    return new Jv[12]["MediaStreamAudioSourceNode"](c, opts);
   }
   function media_stream(n){return n[cst_mediaStream];}
   var Media_stream_source = [0, opts$13, create$13, media_stream];
   function opts$14(stream, param){
    var o = {};
    o["mediaStreamTrack"] = stream;
    return o;
   }
   function create$14(c, opts){
    return new Jv[12]["MediaStreamTrackAudioSourceNode "](c, opts);
   }
   var
    Media_stream_track_source = [0, opts$14, create$14],
    cst_disableNormalization$0 = cst_disableNormalization$1;
   function opts$15(disable_normalization, real, imag, param){
    var o = {};
    caml_call3
     (Jv[19][4], o, cst_disableNormalization$0, disable_normalization);
    o["real"] = caml_call3(Jv[11], Jv[5], function(_A_){return _A_;}, real);
    o["imag"] = caml_call3(Jv[11], Jv[5], function(_z_){return _z_;}, imag);
    return o;
   }
   function create$15(opt, c){
    if(opt) var sth = opt[1], opts = sth; else var opts = Jv[5];
    return new Jv[12]["PeriodicWave"](c, opts);
   }
   var
    Periodic_wave = [0, opts$15, create$15],
    sine = "sine",
    square = "square",
    sawtooth = "sawtooth",
    triangle = "triangle",
    custom = "custom",
    Type$0 = [0, sine, square, sawtooth, triangle, custom],
    cst_channelCount$11 = cst_channelCount$16,
    cst_channelCountMode$11 = cst_channelCountMode$16,
    cst_channelInterpretation$11 = cst_channelInterpretation$16,
    cst_type$2 = cst_type$5,
    cst_frequency$0 = cst_frequency$1,
    cst_detune$1 = cst_detune$2,
    cst_periodicWave = "periodicWave",
    cst_type$3 = cst_type$5,
    cst_type$4 = cst_type$5;
   function opts$16
   (channel_count,
    channel_count_mode,
    channel_interpretation,
    type,
    frequency,
    detune,
    periodic_wave,
    param){
    var o = {};
    caml_call3(Jv[20][4], o, cst_channelCount$11, channel_count);
    caml_call3(Jv[23][4], o, cst_channelCountMode$11, channel_count_mode);
    caml_call3
     (Jv[23][4], o, cst_channelInterpretation$11, channel_interpretation);
    caml_call3(Jv[23][4], o, cst_type$2, type);
    caml_call3(Jv[21][4], o, cst_frequency$0, frequency);
    caml_call3(Jv[21][4], o, cst_detune$1, detune);
    caml_call3(Jv[16], o, cst_periodicWave, periodic_wave);
    return o;
   }
   function create$16(opt, c){
    if(opt) var sth = opt[1], opts = sth; else var opts = Jv[5];
    return new Jv[12]["OscillatorNode"](c, opts);
   }
   function type$0(n){return caml_call2(Jv[23][2], n, cst_type$3);}
   function set_type$0(n, v){return caml_call3(Jv[23][3], n, cst_type$4, v);}
   function detune$1(n){return n.detune();}
   function frequency$0(n){return n.frequency();}
   function set_periodic_wave(n, w){n.setPeriodicWave(w); return 0;}
   function start$1(t, n){
    var t$0 = caml_call3(Jv[11], Jv[5], function(_y_){return _y_;}, t);
    n.start(t$0);
    return 0;
   }
   function stop$1(t, n){
    var t$0 = caml_call3(Jv[11], Jv[5], function(_x_){return _x_;}, t);
    n.stop(t$0);
    return 0;
   }
   var
    Oscillator =
      [0,
       Periodic_wave,
       Type$0,
       opts$16,
       create$16,
       type$0,
       set_type$0,
       detune$1,
       frequency$0,
       set_periodic_wave,
       start$1,
       stop$1],
    equalpower = "equalpower",
    hrtf = "HRTF",
    Panning_model = [0, equalpower, hrtf],
    linear = "linear",
    inverse = "inverse",
    exponential = "exponential",
    Distance_model = [0, linear, inverse, exponential],
    cst_channelCount$12 = cst_channelCount$16,
    cst_channelCountMode$12 = cst_channelCountMode$16,
    cst_channelInterpretation$12 = cst_channelInterpretation$16,
    cst_panningModel = cst_panningModel$2,
    cst_distanceModel = cst_distanceModel$2,
    cst_positionX = cst_positionX$0,
    cst_positionY = cst_positionY$0,
    cst_positionZ = cst_positionZ$0,
    cst_orientationX = cst_orientationX$0,
    cst_orientationY = cst_orientationY$0,
    cst_orientationZ = cst_orientationZ$0,
    cst_refDistance = cst_refDistance$2,
    cst_maxDistance = cst_maxDistance$2,
    cst_rolloff_factor = "rolloff_factor",
    cst_cone_inner_angle = "cone_inner_angle",
    cst_cone_outer_angle = "cone_outer_angle",
    cst_cone_outer_gain = "cone_outer_gain",
    cst_panningModel$0 = cst_panningModel$2,
    cst_panningModel$1 = cst_panningModel$2,
    cst_distanceModel$0 = cst_distanceModel$2,
    cst_distanceModel$1 = cst_distanceModel$2,
    cst_refDistance$0 = cst_refDistance$2,
    cst_refDistance$1 = cst_refDistance$2,
    cst_maxDistance$0 = cst_maxDistance$2,
    cst_maxDistance$1 = cst_maxDistance$2,
    cst_coneInnerAngle = cst_coneInnerAngle$1,
    cst_coneInnerAngle$0 = cst_coneInnerAngle$1,
    cst_coneOuterAngle = cst_coneOuterAngle$1,
    cst_coneOuterAngle$0 = cst_coneOuterAngle$1,
    cst_coneOuterGain = cst_coneOuterGain$1,
    cst_coneOuterGain$0 = cst_coneOuterGain$1;
   function opts$17
   (channel_count,
    channel_count_mode,
    channel_interpretation,
    panning_model,
    distance_model,
    position_x,
    position_y,
    position_z,
    orientation_x,
    orientation_y,
    orientation_z,
    ref_distance,
    max_distance,
    rolloff_factor,
    cone_inner_angle,
    cone_outer_angle,
    cone_outer_gain,
    param){
    var o = {};
    caml_call3(Jv[20][4], o, cst_channelCount$12, channel_count);
    caml_call3(Jv[23][4], o, cst_channelCountMode$12, channel_count_mode);
    caml_call3
     (Jv[23][4], o, cst_channelInterpretation$12, channel_interpretation);
    caml_call3(Jv[23][4], o, cst_panningModel, panning_model);
    caml_call3(Jv[23][4], o, cst_distanceModel, distance_model);
    caml_call3(Jv[21][4], o, cst_positionX, position_x);
    caml_call3(Jv[21][4], o, cst_positionY, position_y);
    caml_call3(Jv[21][4], o, cst_positionZ, position_z);
    caml_call3(Jv[21][4], o, cst_orientationX, orientation_x);
    caml_call3(Jv[21][4], o, cst_orientationY, orientation_y);
    caml_call3(Jv[21][4], o, cst_orientationZ, orientation_z);
    caml_call3(Jv[21][4], o, cst_refDistance, ref_distance);
    caml_call3(Jv[21][4], o, cst_maxDistance, max_distance);
    caml_call3(Jv[21][4], o, cst_rolloff_factor, rolloff_factor);
    caml_call3(Jv[21][4], o, cst_cone_inner_angle, cone_inner_angle);
    caml_call3(Jv[21][4], o, cst_cone_outer_angle, cone_outer_angle);
    caml_call3(Jv[21][4], o, cst_cone_outer_gain, cone_outer_gain);
    return o;
   }
   function create$17(opt, c){
    if(opt) var sth = opt[1], opts = sth; else var opts = Jv[5];
    return new Jv[12]["PannerNode"](c, opts);
   }
   function panning_model(n){
    return caml_call2(Jv[23][2], n, cst_panningModel$0);
   }
   function set_panning_model(n, v){
    return caml_call3(Jv[23][3], n, cst_panningModel$1, v);
   }
   function distance_model(n){
    return caml_call2(Jv[23][2], n, cst_distanceModel$0);
   }
   function set_distance_model(n, v){
    return caml_call3(Jv[23][3], n, cst_distanceModel$1, v);
   }
   function position_x$0(n){return n[cst_positionX$0];}
   function position_y$0(n){return n[cst_positionY$0];}
   function position_z$0(n){return n[cst_positionZ$0];}
   function orientation_x(n){return n[cst_orientationX$0];}
   function orientation_y(n){return n[cst_orientationY$0];}
   function orientation_z(n){return n[cst_orientationZ$0];}
   function ref_distance(n){
    return caml_call2(Jv[21][2], n, cst_refDistance$0);
   }
   function set_ref_distance(n, v){
    return caml_call3(Jv[21][3], n, cst_refDistance$1, v);
   }
   function max_distance(n){
    return caml_call2(Jv[21][2], n, cst_maxDistance$0);
   }
   function set_max_distance(n, v){
    return caml_call3(Jv[21][3], n, cst_maxDistance$1, v);
   }
   function cone_inner_angle(n){
    return caml_call2(Jv[21][2], n, cst_coneInnerAngle);
   }
   function set_cone_inner_angle(n, v){
    return caml_call3(Jv[21][3], n, cst_coneInnerAngle$0, v);
   }
   function cone_outer_angle(n){
    return caml_call2(Jv[21][2], n, cst_coneOuterAngle);
   }
   function set_cone_outer_angle(n, v){
    return caml_call3(Jv[21][3], n, cst_coneOuterAngle$0, v);
   }
   function cone_outer_gain(n){
    return caml_call2(Jv[21][2], n, cst_coneOuterGain);
   }
   function set_cone_outer_gain(n, v){
    return caml_call3(Jv[21][3], n, cst_coneOuterGain$0, v);
   }
   var
    Panner =
      [0,
       Panning_model,
       Distance_model,
       opts$17,
       create$17,
       panning_model,
       set_panning_model,
       distance_model,
       set_distance_model,
       position_x$0,
       position_y$0,
       position_z$0,
       orientation_x,
       orientation_y,
       orientation_z,
       ref_distance,
       set_ref_distance,
       max_distance,
       set_max_distance,
       cone_inner_angle,
       set_cone_inner_angle,
       cone_outer_angle,
       set_cone_outer_angle,
       cone_outer_gain,
       set_cone_outer_gain],
    cst_channelCount$13 = cst_channelCount$16,
    cst_channelCountMode$13 = cst_channelCountMode$16,
    cst_channelInterpretation$13 = cst_channelInterpretation$16,
    cst_pan = cst_pan$0;
   function opts$18
   (channel_count, channel_count_mode, channel_interpretation, pan, param){
    var o = {};
    caml_call3(Jv[20][4], o, cst_channelCount$13, channel_count);
    caml_call3(Jv[23][4], o, cst_channelCountMode$13, channel_count_mode);
    caml_call3
     (Jv[23][4], o, cst_channelInterpretation$13, channel_interpretation);
    caml_call3(Jv[21][4], o, cst_pan, pan);
    return o;
   }
   function create$18(opt, c){
    if(opt) var sth = opt[1], opts = sth; else var opts = Jv[5];
    return new Jv[12]["StereoPannerNode"](c, opts);
   }
   function pan(n){return n[cst_pan$0];}
   var
    Stereo_panner = [0, opts$18, create$18, pan],
    none = "none",
    mul_2x = "2x",
    mul_4x = "4x",
    Oversample = [0, none, mul_2x, mul_4x],
    cst_channelCount$14 = cst_channelCount$16,
    cst_channelCountMode$14 = cst_channelCountMode$16,
    cst_channelInterpretation$14 = cst_channelInterpretation$16,
    cst_oversample = cst_oversample$2,
    cst_oversample$0 = cst_oversample$2,
    cst_oversample$1 = cst_oversample$2;
   function opts$19
   (channel_count,
    channel_count_mode,
    channel_interpretation,
    curve,
    oversample,
    param){
    var o = {};
    caml_call3(Jv[20][4], o, cst_channelCount$14, channel_count);
    caml_call3(Jv[23][4], o, cst_channelCountMode$14, channel_count_mode);
    caml_call3
     (Jv[23][4], o, cst_channelInterpretation$14, channel_interpretation);
    o[cst_curve] =
     caml_call3(Jv[11], Jv[5], function(_w_){return _w_;}, curve);
    caml_call3(Jv[23][4], o, cst_oversample, oversample);
    return o;
   }
   function create$19(opt, c){
    if(opt) var sth = opt[1], opts = sth; else var opts = Jv[5];
    return new Jv[12]["WaveShaperNode"](c, opts);
   }
   function curve(n){
    var _u_ = n[cst_curve];
    return caml_call1(caml_call1(Jv[10], function(_v_){return _v_;}), _u_);
   }
   function set_curve(n, v){
    return n[cst_curve] =
            caml_call3(Jv[11], Jv[4], function(_t_){return _t_;}, v);
   }
   function oversample(n){return caml_call2(Jv[23][2], n, cst_oversample$0);}
   function set_oversample(n, v){
    return caml_call3(Jv[23][3], n, cst_oversample$1, v);
   }
   var
    Wave_shaper =
      [0,
       Oversample,
       opts$19,
       create$19,
       curve,
       set_curve,
       oversample,
       set_oversample],
    cst_channelCount$15 = cst_channelCount$16,
    cst_channelCountMode$15 = cst_channelCountMode$16,
    cst_channelInterpretation$15 = cst_channelInterpretation$16,
    cst_numberOfInputs$1 = cst_numberOfInputs$2,
    cst_numberOfOutputs$0 = cst_numberOfOutputs$1,
    cst_outputChannelCount = "outputChannelCount",
    cst_parameterData = "parameterData",
    cst_processorOptions = "processorOptions";
   function opts$20
   (channel_count,
    channel_count_mode,
    channel_interpretation,
    input_count,
    output_count,
    output_channel_count,
    parameters,
    processor_options,
    param){
    var o = {};
    caml_call3(Jv[20][4], o, cst_channelCount$15, channel_count);
    caml_call3(Jv[23][4], o, cst_channelCountMode$15, channel_count_mode);
    caml_call3
     (Jv[23][4], o, cst_channelInterpretation$15, channel_interpretation);
    caml_call3(Jv[20][4], o, cst_numberOfInputs$1, input_count);
    caml_call3(Jv[20][4], o, cst_numberOfOutputs$0, output_count);
    var
     _q_ = caml_call1(Jv[30], function(_s_){return _s_;}),
     _r_ = caml_call2(Stdlib_Option[7], _q_, output_channel_count);
    caml_call3(Jv[16], o, cst_outputChannelCount, _r_);
    caml_call3(Jv[16], o, cst_parameterData, parameters);
    caml_call3(Jv[16], o, cst_processorOptions, processor_options);
    return o;
   }
   function create$20(opt, c, name){
    if(opt) var sth = opt[1], opts = sth; else var opts = Jv[5];
    return new Jv[12]["AudioWorkletNode"](c, name, opts);
   }
   function parameter(n, k){
    var p = n["parameters"].get(k);
    if(! caml_call1(Jv[8], p)) return p;
    var _p_ = caml_call2(Jstr[8], "no parameter named ", k);
    return caml_call2(Jv[34], 0, _p_);
   }
   function port$0(n){return n[cst_port];}
   var
    Worklet$0 = [0, opts$20, create$20, parameter, port$0],
    Node =
      [0,
       Channel_count_mode,
       Channel_interpretation,
       context,
       input_count,
       output_count,
       channel_count$0,
       set_channel_count,
       channel_count_mode,
       set_channel_count_mode,
       channel_interpretation,
       set_channel_interpretation,
       connect_node,
       connect_param,
       disconnect,
       disconnect_node,
       disconnect_param,
       Analyser,
       Biquad_filter,
       Buffer_source,
       Channel_merger,
       Channel_splitter,
       Constant_source,
       Convolver,
       Delay,
       Destination,
       Dynamics_compressor,
       Gain,
       Iir_filter,
       Media_element_source,
       Media_stream_destination,
       Media_stream_source,
       Media_stream_track_source,
       Oscillator,
       Panner,
       Stereo_panner,
       Wave_shaper,
       Worklet$0],
    cst_contextTime = "contextTime",
    cst_performanceTime = "performanceTime";
   function context_time(t){return caml_call2(Jv[21][2], t, cst_contextTime);}
   function performance_time(t){
    return caml_call2(Jv[21][2], t, cst_performanceTime);
   }
   var
    Timestamp = [0, context_time, performance_time],
    suspended = "suspended",
    running = "running",
    closed = "closed",
    State = [0, suspended, running, closed],
    cst_sampleRate$1 = cst_sampleRate$3,
    cst_currentTime$0 = cst_currentTime$1,
    cst_state = "state";
   function decode_audio_data(c, b){
    var _n_ = c.decodeAudioData(b);
    return caml_call1(caml_call1(Fut[11], function(_o_){return _o_;}), _n_);
   }
   function destination(c){return c["destination"];}
   function sample_rate$1(c){
    return caml_call2(Jv[21][2], c, cst_sampleRate$1);
   }
   function current_time$0(c){
    return caml_call2(Jv[21][2], c, cst_currentTime$0);
   }
   function listener(c){return c["listener"];}
   function state(c){return caml_call2(Jv[23][2], c, cst_state);}
   function audio_worklet(c){return c["audioWorklet"];}
   var
    Base =
      [0,
       decode_audio_data,
       destination,
       sample_rate$1,
       current_time$0,
       listener,
       state,
       audio_worklet],
    balanced = "balanced",
    interactive = "interactive",
    playback = "playback",
    Latency_category = [0, balanced, interactive, playback],
    cst_latencyHint = "latencyHint",
    cst_sampleRate$2 = cst_sampleRate$3,
    cst_baseLatency = "baseLatency",
    cst_outputLatency = "outputLatency",
    cst_length$1 = cst_length$2;
   function opts$21(latency_hint, sample_rate_hz, param){
    var o = {};
    if(latency_hint){
     var match = latency_hint[1];
     if(925478882 <= match[1])
      var s = match[2], _m_ = [0, s];
     else
      var c = match[2], _m_ = [0, c];
     var latency_hint$0 = _m_;
    }
    else
     var latency_hint$0 = 0;
    caml_call3(Jv[16], o, cst_latencyHint, latency_hint$0);
    caml_call3(Jv[21][4], o, cst_sampleRate$2, sample_rate_hz);
    return o;
   }
   function create$21(opt, param){
    if(opt) var sth = opt[1], opts = sth; else var opts = Jv[5];
    return new Jv[12]["AudioContext"](opts);
   }
   function base_latency(c){return caml_call2(Jv[21][2], c, cst_baseLatency);}
   function output_latency(c){
    return caml_call2(Jv[21][2], c, cst_outputLatency);
   }
   function get_output_timestamp(c){return c.getOutputTimestamp();}
   function resume(c){
    var _k_ = c.resume();
    return caml_call1(caml_call1(Fut[11], function(_l_){return 0;}), _k_);
   }
   function suspend(c){
    var _i_ = c.suspend();
    return caml_call1(caml_call1(Fut[11], function(_j_){return 0;}), _i_);
   }
   function close(c){
    var _g_ = c.close();
    return caml_call1(caml_call1(Fut[11], function(_h_){return 0;}), _g_);
   }
   function opts$22(cc, l, r, param){
    return {numberOfChannels: cc, length: l, sampleRate: r};
   }
   function length$0(c){return caml_call2(Jv[20][2], c, cst_length$1);}
   function create$22(opts){return new Jv[12]["OfflineAudioContext"](opts);}
   function start_rendering(c){
    var _e_ = c.startRenderig();
    return caml_call1(caml_call1(Fut[11], function(_f_){return _f_;}), _e_);
   }
   function suspend$0(c, secs){
    var _c_ = c.suspend(secs);
    return caml_call1(caml_call1(Fut[11], function(_d_){return 0;}), _c_);
   }
   function resume$0(c){
    var _a_ = c.resume();
    return caml_call1(caml_call1(Fut[11], function(_b_){return 0;}), _a_);
   }
   var
    Brr_webaudio =
      [0,
       [0,
        Param,
        Listener,
        Worklet,
        Buffer,
        Node,
        Timestamp,
        [0,
         State,
         Base,
         Latency_category,
         opts$21,
         create$21,
         base_latency,
         output_latency,
         get_output_timestamp,
         resume,
         suspend,
         close,
         [0,
          opts$22,
          create$22,
          length$0,
          start_rendering,
          suspend$0,
          resume$0]]]];
   runtime.caml_register_global(339, Brr_webaudio, "Brr_webaudio");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Brr_webcrypto
//# unitInfo: Requires: Fut, Jstr, Jv
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_additionalData$0 = "additionalData",
    cst_counter = "counter",
    cst_decrypt = "decrypt",
    cst_deriveBits = "deriveBits",
    cst_deriveKey = "deriveKey",
    cst_encrypt = "encrypt",
    cst_hash$5 = "hash",
    cst_info = "info",
    cst_iterations$0 = "iterations",
    cst_iv = "iv",
    cst_label = "label",
    cst_length$2 = "length",
    cst_modulusLength$0 = "modulusLength",
    cst_name$15 = "name",
    cst_namedCurve$1 = "namedCurve",
    cst_public = "public",
    cst_publicExponent = "publicExponent",
    cst_salt = "salt",
    cst_saltLength$0 = "saltLength",
    cst_sign = "sign",
    cst_tagLength$0 = "tagLength",
    cst_unwrapKey = "unwrapKey",
    cst_verify = "verify",
    cst_wrapKey = "wrapKey",
    caml_list_of_js_array = runtime.caml_list_of_js_array,
    caml_list_to_js_array = runtime.caml_list_to_js_array;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Fut = global_data.Fut,
    Jstr = global_data.Jstr,
    Jv = global_data.Jv,
    public$0 = cst_public,
    private$0 = "private",
    secret = "secret",
    Type = [0, public$0, private$0, secret],
    encrypt = cst_encrypt,
    decrypt = cst_decrypt,
    sign = cst_sign,
    verify = cst_verify,
    derive_key = cst_deriveKey,
    derive_bits = cst_deriveBits,
    wrap_key = cst_wrapKey,
    unwrap_key = cst_unwrapKey,
    Usage =
      [0,
       encrypt,
       decrypt,
       sign,
       verify,
       derive_key,
       derive_bits,
       wrap_key,
       unwrap_key],
    raw = "raw",
    pkcs8 = "pkcs8",
    spki = "spki",
    jwk = "jwk",
    Format = [0, raw, pkcs8, spki, jwk],
    cst_type = "type",
    cst_extractable = "extractable";
   function type(k){return caml_call2(Jv[23][2], k, cst_type);}
   function extractable(k){return caml_call2(Jv[19][2], k, cst_extractable);}
   function algorithm(k){return k["algorithm"];}
   function usages(k){return caml_list_of_js_array(k["usages"]);}
   function public$1(p){return p["publicKey"];}
   function private$1(p){return p["privateKey"];}
   var
    Crypto_key =
      [0,
       Type,
       Usage,
       Format,
       type,
       extractable,
       algorithm,
       usages,
       public$1,
       private$1],
    cst_name = cst_name$15;
   function v(n){return {name: n};}
   function name(a){return caml_call2(Jv[23][2], a, cst_name);}
   var
    rsassa_pkcs1_v1_5 = "RSASSA-PKCS1-v1_5",
    cst_name$0 = cst_name$15,
    cst_modulusLength = cst_modulusLength$0,
    cst_hash = cst_hash$5;
   function v$0(name, modulus_length, public_exponent, hash, param){
    return {name: name,
            modulusLength: modulus_length,
            publicExponent: public_exponent,
            hash: hash};
   }
   function of_algo(_R_){return _R_;}
   function name$0(a){return caml_call2(Jv[23][2], a, cst_name$0);}
   function modulus_length(a){
    return caml_call2(Jv[20][2], a, cst_modulusLength);
   }
   function public_exponent(a){return a[cst_publicExponent];}
   function hash(a){return caml_call2(Jv[23][2], a, cst_hash);}
   var
    Rsa_hashed_key_gen_params =
      [0, v$0, of_algo, name$0, modulus_length, public_exponent, hash],
    cst_name$1 = cst_name$15,
    cst_hash$0 = cst_hash$5;
   function v$1(name, hash, param){return {name: name, hash: hash};}
   function of_algo$0(_Q_){return _Q_;}
   function name$1(a){return caml_call2(Jv[23][2], a, cst_name$1);}
   function hash$0(a){return caml_call2(Jv[23][2], a, cst_hash$0);}
   var
    Rsa_hashed_import_params = [0, v$1, of_algo$0, name$1, hash$0],
    rsa_pss = "RSA-PSS",
    cst_name$2 = cst_name$15,
    cst_saltLength = cst_saltLength$0;
   function v$2(opt, salt_length, param){
    if(opt) var sth = opt[1], name = sth; else var name = rsa_pss;
    return {name: name, saltLength: salt_length};
   }
   function of_algo$1(_P_){return _P_;}
   function name$2(a){return caml_call2(Jv[23][2], a, cst_name$2);}
   function salt_length(a){return caml_call2(Jv[20][2], a, cst_saltLength);}
   var
    Rsa_pss_params = [0, v$2, of_algo$1, name$2, salt_length],
    rsa_oaep = "RSA-OAEP",
    cst_name$3 = cst_name$15;
   function v$3(opt, label, param){
    if(opt) var sth = opt[1], name = sth; else var name = rsa_oaep;
    if(label) var l = label[1], label$0 = l; else var label$0 = Jv[5];
    return {name: name, label: label$0};
   }
   function of_algo$2(_O_){return _O_;}
   function name$3(a){return caml_call2(Jv[23][2], a, cst_name$3);}
   function label(a){
    var _M_ = a[cst_label];
    return caml_call2(Jv[10], function(_N_){return _N_;}, _M_);
   }
   var
    Rsa_oaep_params = [0, v$3, of_algo$2, name$3, label],
    ecdsa = "ECDSA",
    cst_name$4 = cst_name$15,
    cst_namedCurve = cst_namedCurve$1;
   function v$4(name, named_curve, param){
    return {name: name, namedCurve: named_curve};
   }
   function of_algo$3(_L_){return _L_;}
   function name$4(a){return caml_call2(Jv[23][2], a, cst_name$4);}
   function named_curve(a){return caml_call2(Jv[23][2], a, cst_namedCurve);}
   var
    Ec_key_gen_params = [0, v$4, of_algo$3, name$4, named_curve],
    cst_name$5 = cst_name$15,
    cst_namedCurve$0 = cst_namedCurve$1;
   function v$5(name, named_curve, param){
    return {name: name, namedCurve: named_curve};
   }
   function of_algo$4(_K_){return _K_;}
   function name$5(a){return caml_call2(Jv[23][2], a, cst_name$5);}
   function named_curve$0(a){
    return caml_call2(Jv[23][2], a, cst_namedCurve$0);
   }
   var
    Ec_key_import_params = [0, v$5, of_algo$4, name$5, named_curve$0],
    cst_name$6 = cst_name$15,
    cst_hash$1 = cst_hash$5;
   function v$6(name, hash, param){return {name: name, hash: hash};}
   function of_algo$5(_J_){return _J_;}
   function name$6(a){return caml_call2(Jv[23][2], a, cst_name$6);}
   function hash$1(a){return caml_call2(Jv[23][2], a, cst_hash$1);}
   var
    Ecdsa_params = [0, v$6, of_algo$5, name$6, hash$1],
    ecdh = "ECDH",
    cst_name$7 = cst_name$15;
   function v$7(name, public$0, param){return {name: name, public: public$0};}
   function of_algo$6(_I_){return _I_;}
   function name$7(a){return caml_call2(Jv[23][2], a, cst_name$7);}
   function public$2(a){return a[cst_public];}
   var
    Ecdh_key_derive_params = [0, v$7, of_algo$6, name$7, public$2],
    aes_ctr = "AES-CTR",
    cst_name$8 = cst_name$15,
    cst_length = cst_length$2;
   function v$8(name, length, param){return {name: name, length: length};}
   function of_algo$7(_H_){return _H_;}
   function name$8(a){return caml_call2(Jv[23][2], a, cst_name$8);}
   function length(a){return caml_call2(Jv[20][2], a, cst_length);}
   var
    Aes_key_gen_params = [0, v$8, of_algo$7, name$8, length],
    cst_name$9 = cst_name$15,
    cst_length$0 = cst_length$2;
   function v$9(opt, counter, length, param){
    if(opt) var sth = opt[1], name = sth; else var name = aes_ctr;
    return {name: name, counter: counter, length: length};
   }
   function of_algo$8(_G_){return _G_;}
   function name$9(a){return caml_call2(Jv[23][2], a, cst_name$9);}
   function counter(a){return a[cst_counter];}
   function length$0(a){return caml_call2(Jv[20][2], a, cst_length$0);}
   var
    Aes_ctr_params = [0, v$9, of_algo$8, name$9, counter, length$0],
    aes_cbc = "AES-CBC",
    cst_name$10 = cst_name$15;
   function v$10(opt, iv, param){
    if(opt) var sth = opt[1], name = sth; else var name = aes_cbc;
    return {name: name, iv: iv};
   }
   function of_algo$9(_F_){return _F_;}
   function name$10(a){return caml_call2(Jv[23][2], a, cst_name$10);}
   function iv(a){return a[cst_iv];}
   var
    Aes_cbc_params = [0, v$10, of_algo$9, name$10, iv],
    aes_gcm = "AES-GCM",
    cst_name$11 = cst_name$15,
    cst_additionalData = cst_additionalData$0,
    cst_tagLength = cst_tagLength$0;
   function v$11(opt, iv, additional_data, tag_length, param){
    if(opt) var sth = opt[1], name = sth; else var name = aes_cbc;
    if(additional_data)
     var a = additional_data[1], add = a;
    else
     var add = Jv[5];
    if(tag_length) var l = tag_length[1], tlen = l; else var tlen = Jv[5];
    return {name: name, iv: iv, additionalData: add, tagLength: tlen};
   }
   function of_algo$10(_E_){return _E_;}
   function name$11(a){return caml_call2(Jv[23][2], a, cst_name$11);}
   function iv$0(a){return a[cst_iv];}
   function additional_data(a){
    return caml_call3
            (Jv[14], function(_D_){return _D_;}, a, cst_additionalData);
   }
   function tag_length(a){
    return caml_call3(Jv[14], function(_C_){return _C_;}, a, cst_tagLength);
   }
   var
    Aes_gcm_params =
      [0, v$11, of_algo$10, name$11, iv$0, additional_data, tag_length],
    aes_kw = "AES-KW",
    hmac = "HMAC",
    cst_name$12 = cst_name$15,
    cst_hash$2 = cst_hash$5,
    cst_length$1 = cst_length$2;
   function v$12(opt, length, hash, param){
    if(opt) var sth = opt[1], name = sth; else var name = hmac;
    if(length) var l = length[1], l$0 = l; else var l$0 = Jv[5];
    return {name: name, hash: hash, length: l$0};
   }
   function of_algo$11(_B_){return _B_;}
   function name$12(a){return caml_call2(Jv[23][2], a, cst_name$12);}
   function hash$2(a){return caml_call2(Jv[23][2], a, cst_hash$2);}
   function length$1(a){
    return caml_call3(Jv[14], function(_A_){return _A_;}, a, cst_length$1);
   }
   var
    Hmac_key_gen_params = [0, v$12, of_algo$11, name$12, hash$2, length$1],
    sha_1 = "SHA-1",
    sha_256 = "SHA-256",
    sha_384 = "SHA-384",
    sha_512 = "SHA-512",
    hkdf = "HKDF",
    cst_name$13 = cst_name$15,
    cst_hash$3 = cst_hash$5;
   function v$13(opt, hash, salt, info, param){
    if(opt) var sth = opt[1], name = sth; else var name = hkdf;
    return {name: name, hash: hash, salt: salt, info: info};
   }
   function of_algo$12(_z_){return _z_;}
   function name$13(a){return caml_call2(Jv[23][2], a, cst_name$13);}
   function hash$3(a){return caml_call2(Jv[23][2], a, cst_hash$3);}
   function salt(a){return a[cst_salt];}
   function info(a){return a[cst_info];}
   var
    Hkdf_params = [0, v$13, of_algo$12, name$13, hash$3, salt, info],
    pbkdf2 = "PBKDF2",
    cst_name$14 = cst_name$15,
    cst_hash$4 = cst_hash$5,
    cst_iterations = cst_iterations$0;
   function v$14(opt, hash, salt, iterations, param){
    if(opt) var sth = opt[1], name = sth; else var name = pbkdf2;
    return {name: name, hash: hash, salt: salt, iterations: iterations};
   }
   function of_algo$13(_y_){return _y_;}
   function name$14(a){return caml_call2(Jv[23][2], a, cst_name$14);}
   function hash$4(a){return caml_call2(Jv[23][2], a, cst_hash$4);}
   function salt$0(a){return a[cst_salt];}
   function iterations(a){return caml_call2(Jv[20][2], a, cst_iterations);}
   var
    Pbkdf2_params = [0, v$14, of_algo$13, name$14, hash$4, salt$0, iterations];
   function encrypt$0(s, a, k, d){
    var _w_ = s.encrypt(a, k, d);
    return caml_call1(caml_call1(Fut[11], function(_x_){return _x_;}), _w_);
   }
   function decrypt$0(s, a, k, d){
    var _u_ = s.decrypt(a, k, d);
    return caml_call1(caml_call1(Fut[11], function(_v_){return _v_;}), _u_);
   }
   function digest(s, a, d){
    var _s_ = s.digest(a, d);
    return caml_call1(caml_call1(Fut[11], function(_t_){return _t_;}), _s_);
   }
   function sign$0(s, a, k, d){
    var _q_ = s.sign(a, k, d);
    return caml_call1(caml_call1(Fut[11], function(_r_){return _r_;}), _q_);
   }
   function verify$0(s, a, k, sig, d){
    var _p_ = s.verify(a, k, sig, d);
    return caml_call1(caml_call1(Fut[11], runtime.caml_js_to_bool), _p_);
   }
   function generate_key(s, a, extractable, usages){
    var
     _n_ = s.generateKey(a, ! ! extractable, caml_list_to_js_array(usages));
    return caml_call1(caml_call1(Fut[11], function(_o_){return _o_;}), _n_);
   }
   function generate_key_pair(s, a, extractable, usages){
    var
     _l_ = s.generateKey(a, ! ! extractable, caml_list_to_js_array(usages));
    return caml_call1(caml_call1(Fut[11], function(_m_){return _m_;}), _l_);
   }
   function derive_bits$0(s, a, k, l){
    var _j_ = s.deriveBits(a, k, l);
    return caml_call1(caml_call1(Fut[11], function(_k_){return _k_;}), _j_);
   }
   function derive_key$0(s, a, k, derived, extractable, usages){
    var
     _h_ =
       s.deriveKey
        (a, k, derived, ! ! extractable, caml_list_to_js_array(usages));
    return caml_call1(caml_call1(Fut[11], function(_i_){return _i_;}), _h_);
   }
   function import_key(s, f, k, a, extractable, usages){
    if(98868477 <= k[1])
     var k$0 = k[2], k$1 = k$0;
    else
     var b = k[2], k$1 = b;
    var
     _f_ =
       s.importKey(f, k$1, a, ! ! extractable, caml_list_to_js_array(usages));
    return caml_call1(caml_call1(Fut[11], function(_g_){return _g_;}), _f_);
   }
   function export_key(s, f, k){
    var
     ok =
       caml_call2(Jstr[28], Crypto_key[3][4], f)
        ? function(v){return [0, 98868477, v];}
        : function(v){return [0, 86585632, v];},
     _e_ = s.exportKey(f, k);
    return caml_call1(caml_call1(Fut[11], ok), _e_);
   }
   function wrap_key$0(s, f, k, wrap_key, wrapper){
    var _c_ = s.wrapKey(f, k, wrap_key, wrapper);
    return caml_call1(caml_call1(Fut[11], function(_d_){return _d_;}), _c_);
   }
   function unwrap_key$0
   (s, f, k, wrap_key, wrapper, unwrapped, extractable, usages){
    var
     _a_ =
       s.unwrapKey
        (f,
         k,
         wrap_key,
         wrapper,
         unwrapped,
         ! ! extractable,
         caml_list_to_js_array(usages));
    return caml_call1(caml_call1(Fut[11], function(_b_){return _b_;}), _a_);
   }
   var crypto = Jv[12]["crypto"];
   function subtle(c){return c["subtle"];}
   function set_random_values(c, a){c.getRandomValues(a); return 0;}
   var
    Crypto = [0, crypto, subtle, set_random_values],
    Brr_webcrypto =
      [0,
       Crypto_key,
       [0,
        v,
        name,
        rsassa_pkcs1_v1_5,
        Rsa_hashed_key_gen_params,
        Rsa_hashed_import_params,
        rsa_pss,
        Rsa_pss_params,
        rsa_oaep,
        Rsa_oaep_params,
        ecdsa,
        Ec_key_gen_params,
        Ec_key_import_params,
        Ecdsa_params,
        ecdh,
        Ecdh_key_derive_params,
        aes_ctr,
        Aes_key_gen_params,
        Aes_ctr_params,
        aes_cbc,
        Aes_cbc_params,
        aes_gcm,
        Aes_gcm_params,
        aes_kw,
        hmac,
        Hmac_key_gen_params,
        Hmac_key_gen_params,
        sha_1,
        sha_256,
        sha_384,
        sha_512,
        hkdf,
        Hkdf_params,
        pbkdf2,
        Pbkdf2_params],
       [0,
        encrypt$0,
        decrypt$0,
        digest,
        sign$0,
        verify$0,
        generate_key,
        generate_key_pair,
        derive_bits$0,
        derive_key$0,
        export_key,
        import_key,
        wrap_key$0,
        unwrap_key$0],
       Crypto];
   runtime.caml_register_global(138, Brr_webcrypto, "Brr_webcrypto");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Brr_webmidi
//# unitInfo: Requires: Fut, Jstr, Jv
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_js_meth_call = runtime.caml_js_meth_call,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) === 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Fut = global_data.Fut,
    Jv = global_data.Jv,
    Jstr = global_data.Jstr,
    cst_id = "id",
    cst_name = "name",
    cst_manufacturer = "manufacturer",
    cst_version = "version",
    cst_type = "type'",
    cst_state = "state",
    cst_connection = "connection";
   function as_target(_u_){return _u_;}
   function open(p){
    var _s_ = p.open();
    return caml_call1(caml_call1(Fut[11], function(_t_){return 0;}), _s_);
   }
   function close(p){
    var _q_ = p.close();
    return caml_call1(caml_call1(Fut[11], function(_r_){return 0;}), _q_);
   }
   function get_nullable(p, prop){
    var v = p[prop];
    return caml_call1(Jv[8], v) ? Jstr[4] : v;
   }
   function id(p){return caml_call2(Jv[23][2], p, cst_id);}
   function name(p){return get_nullable(p, cst_name);}
   function manufacturer(p){return get_nullable(p, cst_manufacturer);}
   function version(p){return get_nullable(p, cst_version);}
   function type(p){return caml_call2(Jv[23][2], p, cst_type);}
   function state(p){return caml_call2(Jv[23][2], p, cst_state);}
   function connection(p){return caml_call2(Jv[23][2], p, cst_connection);}
   function sub_of_port(subp, p){
    var t = type(p);
    if(caml_call2(Jstr[28], t, subp)) return p;
    var
     _n_ = caml_call2(Jstr[8], "Excepted ", subp),
     _o_ = caml_call2(Jstr[8], _n_, " port but found: "),
     exp = caml_call2(Jstr[8], _o_, t),
     _p_ = caml_call2(Jstr[7], exp, t);
    return caml_call2(Jv[34], 0, _p_);
   }
   function as_target$0(_m_){return _m_;}
   function as_port(_l_){return _l_;}
   function of_port(p){return sub_of_port("input", p);}
   var Input = [0, as_target$0, as_port, of_port], _a_ = [0, 0];
   function as_target$1(_k_){return _k_;}
   function as_port$0(_j_){return _j_;}
   function of_port$0(p){return sub_of_port("output", p);}
   function send(timestamp_ms, o, msg){
    if(timestamp_ms)
     var t = timestamp_ms[1], args = [0, msg, t];
    else
     var args = [0, msg];
    try{caml_js_meth_call(o, "send", args); return _a_;}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn[1] !== Jv[33]) throw caml_maybe_attach_backtrace(exn, 0);
     var e = exn[2];
     return [1, e];
    }
   }
   function clear(o){o.clear(); return 0;}
   var
    Output = [0, as_target$1, as_port$0, of_port$0, send, clear],
    cst_sysex = "sysex",
    cst_software = "software";
   function inputs(a, f, acc){
    var _g_ = a["inputs"], it = caml_call1(Jv[35][5], _g_);
    function f$0(param, v, acc){return caml_call2(f, v, acc);}
    return caml_call5
            (Jv[35][8],
             function(_i_){return _i_;},
             function(_h_){return _h_;},
             f$0,
             it,
             acc);
   }
   function outputs(a, f, acc){
    var _d_ = a["outputs"], it = caml_call1(Jv[35][5], _d_);
    function f$0(param, v, acc){return caml_call2(f, v, acc);}
    return caml_call5
            (Jv[35][8],
             function(_f_){return _f_;},
             function(_e_){return _e_;},
             f$0,
             it,
             acc);
   }
   function opts(sysex, software, param){
    var o = {};
    caml_call3(Jv[19][4], o, cst_sysex, sysex);
    caml_call3(Jv[19][4], o, cst_software, software);
    return o;
   }
   function of_navigator(opts, n){
    if(opts) var opts$0 = opts[1], args = [0, opts$0]; else var args = [0];
    var _b_ = caml_js_meth_call(n, "requestMIDIAccess", args);
    return caml_call1(caml_call1(Fut[11], function(_c_){return _c_;}), _b_);
   }
   var Access = [0, inputs, outputs, opts, of_navigator];
   function data(e){return e["data"];}
   var Message = [0, data], midimessage = "midimessage";
   function port(e){return e["port"];}
   var
    Connection = [0, port],
    statechange = "statechange",
    Ev = [0, Message, midimessage, Connection, statechange],
    Brr_webmidi =
      [0,
       [0,
        [0,
         as_target,
         open,
         close,
         id,
         manufacturer,
         name,
         version,
         type,
         state,
         connection],
        Input,
        Output,
        Access,
        Ev]];
   runtime.caml_register_global(28, Brr_webmidi, "Brr_webmidi");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Brr_webworkers
//# unitInfo: Requires: Fut, Jstr, Jv
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_all = "all",
    cst_installing = "installing",
    cst_none = "none",
    cst_scope$1 = "scope",
    cst_serviceWorker = "serviceWorker",
    cst_type$3 = "type",
    cst_updateViaCache$1 = "updateViaCache";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Jv = global_data.Jv,
    Fut = global_data.Fut,
    classic = "classic",
    module = "module",
    Type = [0, classic, module],
    cst_type = cst_type$3,
    cst_credentials = "credentials",
    cst_name = "name";
   function opts(type, credentials, name, param){
    var o = caml_call1(Jv[39], [0]);
    caml_call3(Jv[23][4], o, cst_type, type);
    caml_call3(Jv[23][4], o, cst_credentials, credentials);
    caml_call3(Jv[23][4], o, cst_name, name);
    return o;
   }
   var worker = Jv[12]["Worker"];
   function create(opt, uri){
    if(opt) var sth = opt[1], opts = sth; else var opts = Jv[5];
    return new worker(uri, opts);
   }
   function terminate(w){w.terminate(); return 0;}
   function post(opts, w, v){
    if(opts) var o = opts[1], opts$0 = o; else var opts$0 = Jv[5];
    w.postMessage(v, opts$0);
    return 0;
   }
   var
    shared = Jv[12]["SharedWorker"],
    cst_WorkerGlobalScope = "WorkerGlobalScope";
   function create$0(opt, uri){
    if(opt) var sth = opt[1], opts = sth; else var opts = Jv[5];
    return new shared(uri, opts);
   }
   function port(w){return w["port"];}
   function ami(param){
    return caml_call2(Jv[41], cst_WorkerGlobalScope, Jv[12]);
   }
   function import_scripts(uris){
    Jv[12].importScripts(runtime.caml_list_to_js_array(uris));
    return 0;
   }
   function post$0(opts, v){
    if(opts) var o = opts[1], opts$0 = o; else var opts$0 = Jv[5];
    Jv[12].postMessage(v, opts$0);
    return 0;
   }
   function close(param){Jv[12].close(); return 0;}
   var
    G = [0, import_scripts, post$0, close],
    imports = "imports",
    all = cst_all,
    none = cst_none,
    Update_via_cache = [0, imports, all, none],
    parsed = "parsed",
    installing = cst_installing,
    installed = "installed",
    activating = "activating",
    activated = "activated",
    redundant = "redundant",
    State =
      [0, parsed, installing, installed, activating, activated, redundant],
    cst_headerValue = "headerValue",
    cst_enabled = "enabled";
   function script_url(w){return w.scriptURL();}
   function state(w){return w.state();}
   function enable(p){
    var _$_ = p.enable();
    return caml_call1(caml_call1(Fut[11], function(_aa_){return 0;}), _$_);
   }
   function disable(p){
    var _Z_ = p.disable();
    return caml_call1(caml_call1(Fut[11], function(___){return 0;}), _Z_);
   }
   function set_header_value(p, v){
    var _X_ = p.setHeaderValue(v);
    return caml_call1(caml_call1(Fut[11], function(_Y_){return 0;}), _X_);
   }
   function get_state(p){
    function extract(s){
     var _W_ = caml_call2(Jv[23][2], s, cst_headerValue);
     return [0, caml_call2(Jv[19][2], s, cst_enabled), _W_];
    }
    var _V_ = p.getState();
    return caml_call1(caml_call1(Fut[11], extract), _V_);
   }
   var
    Navigation_preload_manager =
      [0, enable, disable, set_header_value, get_state],
    cst_scope = cst_scope$1,
    cst_updateViaCache = cst_updateViaCache$1,
    cst_scope$0 = cst_scope$1,
    cst_type$0 = cst_type$3,
    cst_updateViaCache$0 = cst_updateViaCache$1;
   function installing$0(r){
    var _T_ = r[cst_installing];
    return caml_call1(caml_call1(Jv[10], function(_U_){return _U_;}), _T_);
   }
   function waiting(r){
    var _R_ = r["waiting"];
    return caml_call1(caml_call1(Jv[10], function(_S_){return _S_;}), _R_);
   }
   function active(r){
    var _P_ = r["active"];
    return caml_call1(caml_call1(Jv[10], function(_Q_){return _Q_;}), _P_);
   }
   function navigation_preload(r){return r["navigationPreload"];}
   function scope(r){return caml_call2(Jv[23][2], r, cst_scope);}
   function update_via_cache(r){
    return caml_call2(Jv[23][2], r, cst_updateViaCache);
   }
   function update(r){
    var _N_ = r.update();
    return caml_call1(caml_call1(Fut[11], function(_O_){return 0;}), _N_);
   }
   function unregister(r){
    var _M_ = r.unregister();
    return caml_call1(caml_call1(Fut[11], runtime.caml_js_to_bool), _M_);
   }
   function show_notification(opts, r, title){
    var
     opts$0 = caml_call3(Jv[11], Jv[5], function(_L_){return _L_;}, opts),
     _J_ = r.showNotification(title, opts$0);
    return caml_call1(caml_call1(Fut[11], function(_K_){return 0;}), _J_);
   }
   function get_notifications(tag, r){
    if(tag) var tag$0 = tag[1], opts = {tag: tag$0}; else var opts = Jv[5];
    var
     _G_ = r.getNotifications(opts),
     _H_ = caml_call1(Jv[29], function(_I_){return _I_;});
    return caml_call1(caml_call1(Fut[11], _H_), _G_);
   }
   function of_navigator(n){return n[cst_serviceWorker];}
   function controller(c){
    var _E_ = c["controller"];
    return caml_call2(Jv[10], function(_F_){return _F_;}, _E_);
   }
   function ready(c){
    var _C_ = c["ready"];
    return caml_call1(caml_call1(Fut[11], function(_D_){return _D_;}), _C_);
   }
   function register_opts(scope, type, update_via_cache, param){
    var o = {};
    caml_call3(Jv[23][4], o, cst_scope$0, scope);
    caml_call3(Jv[23][4], o, cst_type$0, type);
    caml_call3(Jv[23][4], o, cst_updateViaCache$0, update_via_cache);
    return o;
   }
   function register(opt, c, uri){
    if(opt)
     var sth = opt[1], register_opts = sth;
    else
     var register_opts = Jv[5];
    var _A_ = c.register(uri, register_opts);
    return caml_call1(caml_call1(Fut[11], function(_B_){return _B_;}), _A_);
   }
   function get_registration(c, uri){
    var
     uri$0 = caml_call3(Jv[11], Jv[5], function(_z_){return _z_;}, uri),
     _w_ = c.getRegistration(uri$0),
     _x_ = caml_call1(Jv[10], function(_y_){return _y_;});
    return caml_call1(caml_call1(Fut[11], _x_), _w_);
   }
   function get_registrations(c){
    var
     _t_ = c.getRegistrations(),
     _u_ = caml_call1(Jv[29], function(_v_){return _v_;});
    return caml_call1(caml_call1(Fut[11], _u_), _t_);
   }
   function start_messages(c){c.startMessages(); return 0;}
   var
    Container =
      [0,
       of_navigator,
       controller,
       ready,
       register_opts,
       register,
       get_registration,
       get_registrations,
       start_messages],
    hidden = "hidden",
    visible = "visible",
    Visibility_state = [0, hidden, visible],
    window = "window",
    worker$0 = "worker",
    sharedworker = "sharedworker",
    all$0 = cst_all,
    Type$0 = [0, window, worker$0, sharedworker, all$0],
    auxiliary = "auxiliary",
    top_level = "top-level",
    nested = "nested",
    none$0 = cst_none,
    Frame_type = [0, auxiliary, top_level, nested, none$0],
    cst_url = "url",
    cst_frameType = "frameType",
    cst_id = "id",
    cst_type$1 = cst_type$3,
    cst_visibilityState = "visibilityState",
    cst_focused = "focused";
   function url(c){return caml_call2(Jv[23][2], c, cst_url);}
   function frame_type(c){return caml_call2(Jv[23][2], c, cst_frameType);}
   function id(c){return caml_call2(Jv[23][2], c, cst_id);}
   function type(c){return caml_call2(Jv[23][2], c, cst_type$1);}
   function post$1(opts, c, v){
    if(opts) var o = opts[1], opts$0 = o; else var opts$0 = Jv[5];
    c.postMessage(v, opts$0);
    return 0;
   }
   function visibility_state(w){
    return caml_call2(Jv[23][2], w, cst_visibilityState);
   }
   function focused(w){return caml_call2(Jv[19][2], w, cst_focused);}
   function ancestor_origins(w){
    var _r_ = w["ancestorOrigins"];
    return caml_call1(caml_call1(Jv[29], function(_s_){return _s_;}), _r_);
   }
   function focus(w){
    var _p_ = w.focus();
    return caml_call1(caml_call1(Fut[11], function(_q_){return _q_;}), _p_);
   }
   function navigate(w, url){
    var _n_ = w.focus(url);
    return caml_call1(caml_call1(Fut[11], function(_o_){return _o_;}), _n_);
   }
   var
    Window = [0, visibility_state, focused, ancestor_origins, focus, navigate],
    Client =
      [0,
       Visibility_state,
       Type$0,
       Frame_type,
       url,
       frame_type,
       id,
       type,
       post$1,
       Window],
    cst_includeUncontrolled = "includeUncontrolled",
    cst_type$2 = cst_type$3;
   function query_opts(include_uncontrolled, type, param){
    var o = {};
    caml_call3(Jv[19][4], o, cst_includeUncontrolled, include_uncontrolled);
    caml_call3(Jv[23][4], o, cst_type$2, type);
    return o;
   }
   function get(cs, id){
    var
     _k_ = cs.get(id),
     _l_ = caml_call1(Jv[10], function(_m_){return _m_;});
    return caml_call1(caml_call1(Fut[11], _l_), _k_);
   }
   function match_all(opt, cs){
    if(opt) var sth = opt[1], query_opts = sth; else var query_opts = Jv[5];
    var
     _h_ = cs.matchAll(query_opts),
     _i_ = caml_call1(Jv[29], function(_j_){return _j_;});
    return caml_call1(caml_call1(Fut[11], _i_), _h_);
   }
   function open_window(cs, url){
    var
     _e_ = cs.openWindow(url),
     _f_ = caml_call1(Jv[10], function(_g_){return _g_;});
    return caml_call1(caml_call1(Fut[11], _f_), _e_);
   }
   function claim(cs){
    var _c_ = cs.claim();
    return caml_call1(caml_call1(Fut[11], function(_d_){return 0;}), _c_);
   }
   var
    Clients = [0, query_opts, get, match_all, open_window, claim],
    clients = Jv[12]["clients"],
    registration = Jv[12]["registration"],
    service_worker = Jv[12][cst_serviceWorker];
   function skip_waiting(param){
    var _a_ = Jv[12].skipWaiting();
    return caml_call1(caml_call1(Fut[11], function(_b_){return 0;}), _a_);
   }
   var
    G$0 = [0, clients, registration, service_worker, skip_waiting],
    Brr_webworkers =
      [0,
       [0, Type, opts, create, terminate, post, [0, create$0, port], ami, G],
       [0,
        Update_via_cache,
        State,
        script_url,
        state,
        Navigation_preload_manager,
        [0,
         update,
         unregister,
         show_notification,
         get_notifications,
         installing$0,
         waiting,
         active,
         navigation_preload,
         scope,
         update_via_cache],
        Container,
        Client,
        Clients,
        G$0]];
   runtime.caml_register_global(84, Brr_webworkers, "Brr_webworkers");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
