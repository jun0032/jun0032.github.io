// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.9.1

//# unitInfo: Provides: Camlboy_lib
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Camlboy_lib = [0];
   runtime.caml_register_global(0, Camlboy_lib, "Camlboy_lib");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Camlboy_lib__Uints_intf
(function(globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Camlboy_lib_Uints_intf = [0];
   runtime.caml_register_global
    (0, Camlboy_lib_Uints_intf, "Camlboy_lib__Uints_intf");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Camlboy_lib__Uints
//# unitInfo: Requires: Stdlib__Int, Stdlib__Printf
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_div = runtime.caml_div,
    caml_lessequal = runtime.caml_lessequal,
    caml_mod = runtime.caml_mod,
    caml_mul = runtime.caml_mul;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib_Int = global_data.Stdlib__Int,
    Stdlib_Printf = global_data.Stdlib__Printf;
   function MakeInfix(B){
    var
     symbol = B[8],
     symbol$0 = B[9],
     symbol$1 = B[10],
     symbol$2 = B[11],
     symbol$3 = B[6];
    function symbol$4(a, b){return 1 - caml_call2(B[6], a, b);}
    var
     symbol$5 = B[7],
     mod = B[12],
     land = B[15],
     lor = B[16],
     lxor = B[17],
     lsl = B[18],
     lsr = B[19];
    return [0,
            symbol,
            symbol$0,
            symbol$1,
            symbol$2,
            symbol$3,
            symbol$4,
            symbol$5,
            mod,
            land,
            lor,
            lxor,
            lsl,
            lsr];
   }
   var max_int = 255, zero = 0, one = 1, compare = Stdlib_Int[9];
   function equal(x, y){return 0 === caml_call2(compare, x, y) ? 1 : 0;}
   var le = caml_lessequal;
   function add(x, y){return (x + y | 0) & 255;}
   function sub(x, y){return (x - y | 0) & 255;}
   function mul(x, y){return caml_mul(x, y) & 255;}
   function div(x, y){return caml_div(x, y) & 255;}
   function rem(x, y){return caml_mod(x, y) & 255;}
   function succ(x){return add(x, one);}
   function pred(x){return sub(x, one);}
   function logand(x, y){return x & y;}
   function logor(x, y){return x | y;}
   function logxor(_o_, _n_){return _o_ ^ _n_;}
   function shift_left(x, y){return x << y & 255;}
   function shift_right(_m_, _l_){return _m_ >>> _l_ | 0;}
   function of_int(x){return x & 255;}
   function of_char(c){return c;}
   function to_char(t){return t;}
   var
    show =
      caml_call1
       (Stdlib_Printf[4], [0, [12, 36, [4, 8, [0, 2, 2], 0, 0]], "$%02X"]),
    Infix =
      MakeInfix
       ([0,
         show,
         max_int,
         zero,
         one,
         compare,
         equal,
         le,
         add,
         sub,
         mul,
         div,
         rem,
         succ,
         pred,
         logand,
         logor,
         logxor,
         shift_left,
         shift_right,
         of_int,
         function(_k_){return _k_;}]),
    symbol = Infix[1],
    symbol$0 = Infix[2],
    symbol$1 = Infix[3],
    symbol$2 = Infix[4],
    symbol$3 = Infix[5],
    symbol$4 = Infix[6],
    symbol$5 = Infix[7],
    mod = Infix[8],
    land = Infix[9],
    lor = Infix[10],
    lxor = Infix[11],
    lsl = Infix[12],
    lsr = Infix[13],
    max_int$0 = 65535,
    zero$0 = 0,
    one$0 = 1,
    compare$0 = Stdlib_Int[9];
   function equal$0(x, y){return 0 === caml_call2(compare$0, x, y) ? 1 : 0;}
   var le$0 = caml_lessequal;
   function add$0(x, y){return (x + y | 0) & 65535;}
   function sub$0(x, y){return (x - y | 0) & 65535;}
   function mul$0(x, y){return caml_mul(x, y) & 65535;}
   function div$0(x, y){return caml_div(x, y) & 65535;}
   function rem$0(x, y){return caml_mod(x, y) & 65535;}
   function succ$0(x){return add$0(x, one$0);}
   function pred$0(x){return sub$0(x, one$0);}
   function logand$0(x, y){return x & y;}
   function logor$0(x, y){return x | y;}
   function logxor$0(_j_, _i_){return _j_ ^ _i_;}
   function shift_left$0(x, y){return x << y & 65535;}
   function shift_right$0(_h_, _g_){return _h_ >>> _g_ | 0;}
   function of_int$0(x){return x & 65535;}
   var
    show$0 =
      caml_call1
       (Stdlib_Printf[4], [0, [12, 36, [4, 8, [0, 2, 4], 0, 0]], "$%04X"]),
    Infix$0 =
      MakeInfix
       ([0,
         show$0,
         max_int$0,
         zero$0,
         one$0,
         compare$0,
         equal$0,
         le$0,
         add$0,
         sub$0,
         mul$0,
         div$0,
         rem$0,
         succ$0,
         pred$0,
         logand$0,
         logor$0,
         logxor$0,
         shift_left$0,
         shift_right$0,
         of_int$0,
         function(_f_){return _f_;}]),
    symbol$6 = Infix$0[1],
    symbol$7 = Infix$0[2],
    symbol$8 = Infix$0[3],
    symbol$9 = Infix$0[4],
    symbol$10 = Infix$0[5],
    symbol$11 = Infix$0[6],
    symbol$12 = Infix$0[7],
    mod$0 = Infix$0[8],
    land$0 = Infix$0[9],
    lor$0 = Infix$0[10],
    lxor$0 = Infix$0[11],
    lsl$0 = Infix$0[12],
    lsr$0 = Infix$0[13],
    _a_ = [0, [4, 0, 0, 0, 0], "%d"],
    _b_ = [0, [12, 45, [4, 0, 0, 0, 0]], "-%d"];
   function of_uint8(x){return x & 65535;}
   function to_uint8(x){return x & 255;}
   function of_byte(b){return b;}
   function of_int$1(x){return 0 <= x ? x & 255 : x & 255 | 128;}
   function is_neg(t){return 0 !== (t & 128) ? 1 : 0;}
   function abs(t){return is_neg(t) ? (t - 1 | 0) ^ 255 : t;}
   function to_int(t){return is_neg(t) ? - abs(t) | 0 : t;}
   function show$1(t){
    if(0 === (t & 128)) return caml_call2(Stdlib_Printf[4], _a_, t);
    var _e_ = caml_call1(Stdlib_Int[4], t - 256 | 0);
    return caml_call2(Stdlib_Printf[4], _b_, _e_);
   }
   var
    Camlboy_lib_Uints =
      [0,
       [0,
        show,
        max_int,
        zero,
        one,
        compare,
        equal,
        le,
        add,
        sub,
        mul,
        div,
        rem,
        succ,
        pred,
        logand,
        logor,
        logxor,
        shift_left,
        shift_right,
        of_int,
        function(_d_){return _d_;},
        Infix,
        symbol,
        symbol$0,
        symbol$1,
        symbol$2,
        symbol$3,
        symbol$4,
        symbol$5,
        mod,
        land,
        lor,
        lxor,
        lsl,
        lsr,
        of_char,
        to_char],
       [0,
        show$0,
        max_int$0,
        zero$0,
        one$0,
        compare$0,
        equal$0,
        le$0,
        add$0,
        sub$0,
        mul$0,
        div$0,
        rem$0,
        succ$0,
        pred$0,
        logand$0,
        logor$0,
        logxor$0,
        shift_left$0,
        shift_right$0,
        of_int$0,
        function(_c_){return _c_;},
        Infix$0,
        symbol$6,
        symbol$7,
        symbol$8,
        symbol$9,
        symbol$10,
        symbol$11,
        symbol$12,
        mod$0,
        land$0,
        lor$0,
        lxor$0,
        lsl$0,
        lsr$0,
        of_uint8,
        to_uint8],
       [0, of_byte, of_int$1, to_int, is_neg, abs, show$1]];
   runtime.caml_register_global(6, Camlboy_lib_Uints, "Camlboy_lib__Uints");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Camlboy_lib__Addressable_intf
(function(globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Camlboy_lib_Addressable_intf = [0];
   runtime.caml_register_global
    (0, Camlboy_lib_Addressable_intf, "Camlboy_lib__Addressable_intf");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Camlboy_lib__Word_addressable_intf
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    Camlboy_lib_Word_addressable_i = [0];
   runtime.caml_register_global
    (0, Camlboy_lib_Word_addressable_i, "Camlboy_lib__Word_addressable_intf");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Camlboy_lib__Interrupt_controller
//# unitInfo: Requires: Assert_failure, Camlboy_lib__Uints, Stdlib__Bool, Stdlib__List, Stdlib__Printf
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_joypad = ", joypad:",
    cst_lcd_stat = ", lcd_stat:",
    cst_serial_port = ", serial_port:",
    cst_timer = ", timer:",
    cst_lib_interrupt_controller_i =
      "lib/interrupt_controller/interrupt_controller.ml",
    caml_equal = runtime.caml_equal,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call11(f, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10){
    return (f.l >= 0 ? f.l : f.l = f.length) === 11
            ? f(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10)
            : runtime.caml_call_gen
              (f, [a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    partial =
      [11,
       "), if:(vblank:",
       [4,
        0,
        0,
        0,
        [11,
         cst_lcd_stat,
         [4,
          0,
          0,
          0,
          [11,
           cst_timer,
           [4,
            0,
            0,
            0,
            [11,
             cst_serial_port,
             [4, 0, 0, 0, [11, cst_joypad, [4, 0, 0, 0, [12, 41, 0]]]]]]]]]]],
    Stdlib_Bool = global_data.Stdlib__Bool,
    Stdlib_Printf = global_data.Stdlib__Printf,
    Assert_failure = global_data.Assert_failure,
    Camlboy_lib_Uints = global_data.Camlboy_lib__Uints,
    Stdlib_List = global_data.Stdlib__List,
    _a_ = [0, 0, [0, 1, [0, 2, [0, 3, [0, 4, 0]]]]],
    _b_ = [0, 0],
    _c_ = [0, 1],
    _d_ = [0, 2],
    _e_ = [0, 3],
    _f_ = [0, 4],
    _g_ = [0, cst_lib_interrupt_controller_i, 77, 4],
    _h_ = [0, cst_lib_interrupt_controller_i, 107, 4],
    cst_VBlank = "VBlank",
    cst_LCD_stat = "LCD_stat",
    cst_Timer = "Timer",
    cst_Serial_port = "Serial_port",
    cst_Joypad = "Joypad",
    _i_ =
      [0,
       [11,
        "ie:(vblank:",
        [4,
         0,
         0,
         0,
         [11,
          cst_lcd_stat,
          [4,
           0,
           0,
           0,
           [11,
            cst_timer,
            [4,
             0,
             0,
             0,
             [11,
              cst_serial_port,
              [4, 0, 0, 0, [11, cst_joypad, [4, 0, 0, 0, partial]]]]]]]]]],
       "ie:(vblank:%d, lcd_stat:%d, timer:%d, serial_port:%d, joypad:%d), if:(vblank:%d, lcd_stat:%d, timer:%d, serial_port:%d, joypad:%d)"];
   function create(ie_addr, if_addr){
    return [0, [0, ie_addr, 0, 0, 0, 0, 0], [0, if_addr, 0, 0, 0, 0, 0]];
   }
   function update(state, type, b){
    switch(type){
      case 0:
       return [0, state[1], b, state[3], state[4], state[5], state[6]];
      case 1:
       return [0, state[1], state[2], b, state[4], state[5], state[6]];
      case 2:
       return [0, state[1], state[2], state[3], b, state[5], state[6]];
      case 3:
       return [0, state[1], state[2], state[3], state[4], b, state[6]];
      default:
       return [0, state[1], state[2], state[3], state[4], state[5], b];
    }
   }
   function request(t, type){t[2] = update(t[2], type, 1); return 0;}
   function clear(t, type){t[2] = update(t[2], type, 0); return 0;}
   function clear_all(t){
    return caml_call1
            (caml_call1
              (Stdlib_List[17], function(type){return clear(t, type);}),
             _a_);
   }
   function next(t){
    if(t[1][2] && t[2][2]) return _b_;
    if(t[1][3] && t[2][3]) return _c_;
    if(t[1][4] && t[2][4]) return _d_;
    if(t[1][5] && t[2][5]) return _e_;
    if(t[1][6] && t[2][6]) return _f_;
    return 0;
   }
   function accepts(t, addr){
    var _P_ = caml_call2(Camlboy_lib_Uints[2][27], t[1][1], addr);
    return _P_ ? _P_ : caml_call2(Camlboy_lib_Uints[2][27], t[2][1], addr);
   }
   function byte_of_state(s){
    var
     _K_ = s[6] ? 16 : 0,
     _L_ = s[5] ? 8 : 0,
     _M_ = s[4] ? 4 : 0,
     _N_ = s[3] ? 2 : 0,
     _O_ = s[2] ? 1 : 0;
    return caml_call1(Camlboy_lib_Uints[1][20], _O_ | _N_ | _M_ | _L_ | _K_);
   }
   function read_byte(t, addr){
    if(caml_call2(Camlboy_lib_Uints[2][27], addr, t[1][1]))
     return byte_of_state(t[1]);
    if(! caml_call2(Camlboy_lib_Uints[2][27], addr, t[2][1]))
     throw caml_maybe_attach_backtrace([0, Assert_failure, _g_], 1);
    var
     _I_ = byte_of_state(t[2]),
     _J_ = caml_call1(Camlboy_lib_Uints[1][20], 224);
    return caml_call2(Camlboy_lib_Uints[1][32], _J_, _I_);
   }
   function state_of_byte(b, addr){
    var
     _t_ = caml_call1(Camlboy_lib_Uints[1][20], 0),
     _u_ = caml_call1(Camlboy_lib_Uints[1][20], 1),
     _v_ = caml_call2(Camlboy_lib_Uints[1][31], b, _u_),
     b0 = caml_call2(Camlboy_lib_Uints[1][28], _v_, _t_),
     _w_ = caml_call1(Camlboy_lib_Uints[1][20], 0),
     _x_ = caml_call1(Camlboy_lib_Uints[1][20], 2),
     _y_ = caml_call2(Camlboy_lib_Uints[1][31], b, _x_),
     b1 = caml_call2(Camlboy_lib_Uints[1][28], _y_, _w_),
     _z_ = caml_call1(Camlboy_lib_Uints[1][20], 0),
     _A_ = caml_call1(Camlboy_lib_Uints[1][20], 4),
     _B_ = caml_call2(Camlboy_lib_Uints[1][31], b, _A_),
     b2 = caml_call2(Camlboy_lib_Uints[1][28], _B_, _z_),
     _C_ = caml_call1(Camlboy_lib_Uints[1][20], 0),
     _D_ = caml_call1(Camlboy_lib_Uints[1][20], 8),
     _E_ = caml_call2(Camlboy_lib_Uints[1][31], b, _D_),
     b3 = caml_call2(Camlboy_lib_Uints[1][28], _E_, _C_),
     _F_ = caml_call1(Camlboy_lib_Uints[1][20], 0),
     _G_ = caml_call1(Camlboy_lib_Uints[1][20], 16),
     _H_ = caml_call2(Camlboy_lib_Uints[1][31], b, _G_),
     b4 = caml_call2(Camlboy_lib_Uints[1][28], _H_, _F_);
    return [0, addr, b0, b1, b2, b3, b4];
   }
   function write_byte(t, addr, data){
    if(caml_equal(addr, t[1][1])){
     t[1] = state_of_byte(data, t[1][1]);
     return 0;
    }
    if(! caml_equal(addr, t[2][1]))
     throw caml_maybe_attach_backtrace([0, Assert_failure, _h_], 1);
    t[2] = state_of_byte(data, t[2][1]);
    return 0;
   }
   function show_type(param){
    switch(param){
      case 0:
       return cst_VBlank;
      case 1:
       return cst_LCD_stat;
      case 2:
       return cst_Timer;
      case 3:
       return cst_Serial_port;
      default: return cst_Joypad;
    }
   }
   function show(t){
    var
     _j_ = caml_call1(Stdlib_Bool[4], t[2][6]),
     _k_ = caml_call1(Stdlib_Bool[4], t[2][5]),
     _l_ = caml_call1(Stdlib_Bool[4], t[2][4]),
     _m_ = caml_call1(Stdlib_Bool[4], t[2][3]),
     _n_ = caml_call1(Stdlib_Bool[4], t[2][2]),
     _o_ = caml_call1(Stdlib_Bool[4], t[1][6]),
     _p_ = caml_call1(Stdlib_Bool[4], t[1][5]),
     _q_ = caml_call1(Stdlib_Bool[4], t[1][4]),
     _r_ = caml_call1(Stdlib_Bool[4], t[1][3]),
     _s_ = caml_call1(Stdlib_Bool[4], t[1][2]);
    return caml_call11
            (Stdlib_Printf[4],
             _i_,
             _s_,
             _r_,
             _q_,
             _p_,
             _o_,
             _n_,
             _m_,
             _l_,
             _k_,
             _j_);
   }
   var
    Camlboy_lib_Interrupt_controll =
      [0,
       create,
       request,
       clear,
       clear_all,
       next,
       read_byte,
       write_byte,
       accepts,
       show,
       show_type];
   runtime.caml_register_global
    (19, Camlboy_lib_Interrupt_controll, "Camlboy_lib__Interrupt_controller");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Camlboy_lib__Timer
//# unitInfo: Requires: Assert_failure, Camlboy_lib__Interrupt_controller, Camlboy_lib__Uints
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_lib_timer_timer_ml = "lib/timer/timer.ml",
    caml_div = runtime.caml_div,
    caml_equal = runtime.caml_equal,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Camlboy_lib_Uints = global_data.Camlboy_lib__Uints,
    Assert_failure = global_data.Assert_failure,
    Camlboy_lib_Interrupt_controll =
      global_data.Camlboy_lib__Interrupt_controller,
    _a_ = [0, cst_lib_timer_timer_ml, 82, 9],
    _b_ = [0, cst_lib_timer_timer_ml, 92, 11],
    _c_ = [0, cst_lib_timer_timer_ml, 106, 9];
   function create(div_addr, tima_addr, tma_addr, tac_addr, ic){
    return [0, div_addr, tima_addr, tma_addr, tac_addr, ic, 0, 0, 0, 0, 0, 0];
   }
   function run(t, mcycles){
    var
     before_mcycle_count = t[6],
     after_mcycle_count = before_mcycle_count + mcycles | 0;
    t[6] = after_mcycle_count % 65536 | 0;
    var
     quotient_diff =
       (after_mcycle_count / 64 | 0) - (before_mcycle_count / 64 | 0) | 0;
    t[7] = (t[7] + quotient_diff | 0) % 256 | 0;
    var _n_ = t[8];
    if(_n_){
     switch(t[9]){
       case 0:
        var divider = 256; break;
       case 1:
        var divider = 4; break;
       case 2:
        var divider = 16; break;
       default: var divider = 64;
     }
     var
      _o_ = caml_div(before_mcycle_count, divider),
      quotient_diff$0 = caml_div(after_mcycle_count, divider) - _o_ | 0,
      before_tima_counter = t[11];
     t[11] = (t[11] + quotient_diff$0 | 0) % 256 | 0;
     var
      after_tima_counter = t[11],
      _p_ = after_tima_counter < before_tima_counter ? 1 : 0,
      _q_ =
        _p_
         ? (caml_call2
            (Camlboy_lib_Interrupt_controll[2], t[5], 2),
           t[11] = t[10],
           0)
         : _p_,
      _r_ = _q_;
    }
    else
     var _r_ = _n_;
    return _r_;
   }
   function accepts(t, addr){
    var _j_ = caml_equal(addr, t[1]);
    if(_j_)
     var _k_ = _j_;
    else{
     var _l_ = caml_equal(addr, t[2]);
     if(_l_)
      var _k_ = _l_;
     else
      var _m_ = caml_equal(addr, t[3]), _k_ = _m_ || caml_equal(addr, t[4]);
    }
    return _k_;
   }
   function read_byte(t, addr){
    if(caml_equal(addr, t[1]))
     return caml_call1(Camlboy_lib_Uints[1][20], t[7]);
    if(caml_equal(addr, t[2]))
     return caml_call1(Camlboy_lib_Uints[1][20], t[11]);
    if(caml_equal(addr, t[3]))
     return caml_call1(Camlboy_lib_Uints[1][20], t[10]);
    if(! caml_equal(addr, t[4]))
     throw caml_maybe_attach_backtrace([0, Assert_failure, _a_], 1);
    var
     _h_ = t[8] ? 4 : 0,
     enable_bit = caml_call1(Camlboy_lib_Uints[1][20], _h_);
    switch(t[9]){
      case 0:
       var _i_ = caml_call1(Camlboy_lib_Uints[1][20], 0); break;
      case 1:
       var _i_ = caml_call1(Camlboy_lib_Uints[1][20], 1); break;
      case 2:
       var _i_ = caml_call1(Camlboy_lib_Uints[1][20], 2); break;
      default: var _i_ = caml_call1(Camlboy_lib_Uints[1][20], 3);
    }
    return caml_call2(Camlboy_lib_Uints[1][31], enable_bit, _i_);
   }
   function write_byte(t, addr, data){
    if(caml_equal(addr, t[1])){t[7] = 0; t[6] = 0; return 0;}
    if(caml_equal(addr, t[2])){
     t[11] = caml_call1(Camlboy_lib_Uints[1][21], data);
     return 0;
    }
    if(caml_equal(addr, t[3])){
     t[10] = caml_call1(Camlboy_lib_Uints[1][21], data);
     return 0;
    }
    if(! caml_equal(addr, t[4]))
     throw caml_maybe_attach_backtrace([0, Assert_failure, _c_], 1);
    var
     _d_ = Camlboy_lib_Uints[1][3],
     _e_ = caml_call1(Camlboy_lib_Uints[1][20], 4),
     _f_ = caml_call2(Camlboy_lib_Uints[1][31], data, _e_);
    if(caml_call2(Camlboy_lib_Uints[1][28], _f_, _d_)) t[8] = 1;
    var
     byte$0 = caml_call1(Camlboy_lib_Uints[1][21], data),
     match = byte$0 & 3;
    if(3 < match >>> 0)
     throw caml_maybe_attach_backtrace([0, Assert_failure, _b_], 1);
    switch(match){
      case 0:
       var _g_ = 0; break;
      case 1:
       var _g_ = 1; break;
      case 2:
       var _g_ = 2; break;
      default: var _g_ = 3;
    }
    t[9] = _g_;
    return 0;
   }
   function get_tima_count(t){
    return caml_call1(Camlboy_lib_Uints[1][20], t[11]);
   }
   var
    For_tests = [0, get_tima_count],
    Camlboy_lib_Timer =
      [0, create, run, read_byte, write_byte, accepts, For_tests];
   runtime.caml_register_global(6, Camlboy_lib_Timer, "Camlboy_lib__Timer");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Camlboy_lib__Tile_map
//# unitInfo: Requires: Camlboy_lib__Uints, Stdlib, Stdlib__Array, Stdlib__Printf
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Address_out_of_range = "Address out of range: ",
    cst_Address_out_of_range_s = "Address out of range: %s",
    caml_check_bound = runtime.caml_check_bound,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Camlboy_lib_Uints = global_data.Camlboy_lib__Uints,
    Stdlib_Printf = global_data.Stdlib__Printf,
    Stdlib = global_data.Stdlib,
    Stdlib_Array = global_data.Stdlib__Array,
    _a_ =
      [0,
       [11, cst_Address_out_of_range, [2, 0, 0]],
       cst_Address_out_of_range_s],
    _b_ =
      [0,
       [11, cst_Address_out_of_range, [2, 0, 0]],
       cst_Address_out_of_range_s];
   function create
   (area0_start_addr, area0_end_addr, area1_start_addr, area1_end_addr){
    var _A_ = caml_call3(Stdlib_Array[3], 32, 32, Camlboy_lib_Uints[1][3]);
    return [0,
            caml_call3(Stdlib_Array[3], 32, 32, Camlboy_lib_Uints[1][3]),
            _A_,
            area0_start_addr,
            area0_end_addr,
            area1_start_addr,
            area1_end_addr];
   }
   function get_tile_index(t, area, y, x){
    if(area){
     var _w_ = x / 8 | 0, _x_ = y / 8 | 0;
     return caml_check_bound(caml_check_bound(t[2], _x_)[1 + _x_], _w_)
             [1 + _w_];
    }
    var _y_ = x / 8 | 0, _z_ = y / 8 | 0;
    return caml_check_bound(caml_check_bound(t[1], _z_)[1 + _z_], _y_)
            [1 + _y_];
   }
   function accepts(t, addr){
    var
     _s_ = caml_call2(Camlboy_lib_Uints[2][29], t[3], addr),
     _t_ = _s_ ? caml_call2(Camlboy_lib_Uints[2][29], addr, t[4]) : _s_;
    if(_t_)
     var _u_ = _t_;
    else{
     var _v_ = caml_call2(Camlboy_lib_Uints[2][29], t[5], addr);
     if(_v_) return caml_call2(Camlboy_lib_Uints[2][29], addr, t[6]);
     var _u_ = _v_;
    }
    return _u_;
   }
   function read_byte(t, addr){
    if
     (caml_call2(Camlboy_lib_Uints[2][29], t[3], addr)
      && caml_call2(Camlboy_lib_Uints[2][29], addr, t[4])){
     var
      _k_ = caml_call2(Camlboy_lib_Uints[2][24], addr, t[3]),
      offset = caml_call1(Camlboy_lib_Uints[2][21], _k_),
      _l_ = offset % 32 | 0,
      _m_ = offset / 32 | 0;
     return caml_check_bound(caml_check_bound(t[1], _m_)[1 + _m_], _l_)
             [1 + _l_];
    }
    if
     (caml_call2(Camlboy_lib_Uints[2][29], t[5], addr)
      && caml_call2(Camlboy_lib_Uints[2][29], addr, t[6])){
     var
      _n_ = caml_call2(Camlboy_lib_Uints[2][24], addr, t[5]),
      offset$0 = caml_call1(Camlboy_lib_Uints[2][21], _n_),
      _o_ = offset$0 % 32 | 0,
      _p_ = offset$0 / 32 | 0;
     return caml_check_bound(caml_check_bound(t[2], _p_)[1 + _p_], _o_)
             [1 + _o_];
    }
    var
     _q_ = caml_call1(Camlboy_lib_Uints[2][1], addr),
     _r_ = caml_call2(Stdlib_Printf[4], _a_, _q_);
    throw caml_maybe_attach_backtrace([0, Stdlib[6], _r_], 1);
   }
   function write_byte(t, addr, data){
    if
     (caml_call2(Camlboy_lib_Uints[2][29], t[3], addr)
      && caml_call2(Camlboy_lib_Uints[2][29], addr, t[4])){
     var
      _c_ = caml_call2(Camlboy_lib_Uints[2][24], addr, t[3]),
      offset = caml_call1(Camlboy_lib_Uints[2][21], _c_),
      _d_ = offset % 32 | 0,
      _e_ = offset / 32 | 0;
     caml_check_bound(caml_check_bound(t[1], _e_)[1 + _e_], _d_)[1 + _d_] = data;
     return 0;
    }
    if
     (caml_call2(Camlboy_lib_Uints[2][29], t[5], addr)
      && caml_call2(Camlboy_lib_Uints[2][29], addr, t[6])){
     var
      _f_ = caml_call2(Camlboy_lib_Uints[2][24], addr, t[5]),
      offset$0 = caml_call1(Camlboy_lib_Uints[2][21], _f_),
      _g_ = offset$0 % 32 | 0,
      _h_ = offset$0 / 32 | 0;
     caml_check_bound(caml_check_bound(t[2], _h_)[1 + _h_], _g_)[1 + _g_] = data;
     return 0;
    }
    var
     _i_ = caml_call1(Camlboy_lib_Uints[2][1], addr),
     _j_ = caml_call2(Stdlib_Printf[4], _b_, _i_);
    throw caml_maybe_attach_backtrace([0, Stdlib[6], _j_], 1);
   }
   var
    Camlboy_lib_Tile_map =
      [0, create, get_tile_index, read_byte, write_byte, accepts];
   runtime.caml_register_global
    (6, Camlboy_lib_Tile_map, "Camlboy_lib__Tile_map");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Camlboy_lib__Bit_util
//# unitInfo: Requires: Camlboy_lib__Uints, Stdlib__ArrayLabels, Stdlib__Bool
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib_Bool = global_data.Stdlib__Bool,
    Stdlib_ArrayLabels = global_data.Stdlib__ArrayLabels,
    Camlboy_lib_Uints = global_data.Camlboy_lib__Uints,
    _a_ = [0, 0, 1, 2, 3, 4, 5, 6, 7];
   function bitflags_of_byte(x){
    var
     _R_ = Camlboy_lib_Uints[1][3],
     _S_ = caml_call1(Camlboy_lib_Uints[1][20], 1),
     _T_ = caml_call2(Camlboy_lib_Uints[1][31], x, _S_),
     _U_ = caml_call2(Camlboy_lib_Uints[1][28], _T_, _R_),
     _V_ = Camlboy_lib_Uints[1][3],
     _W_ = caml_call1(Camlboy_lib_Uints[1][20], 2),
     _X_ = caml_call2(Camlboy_lib_Uints[1][31], x, _W_),
     _Y_ = caml_call2(Camlboy_lib_Uints[1][28], _X_, _V_),
     _Z_ = Camlboy_lib_Uints[1][3],
     ___ = caml_call1(Camlboy_lib_Uints[1][20], 4),
     _$_ = caml_call2(Camlboy_lib_Uints[1][31], x, ___),
     _aa_ = caml_call2(Camlboy_lib_Uints[1][28], _$_, _Z_),
     _ab_ = Camlboy_lib_Uints[1][3],
     _ac_ = caml_call1(Camlboy_lib_Uints[1][20], 8),
     _ad_ = caml_call2(Camlboy_lib_Uints[1][31], x, _ac_),
     _ae_ = caml_call2(Camlboy_lib_Uints[1][28], _ad_, _ab_),
     _af_ = Camlboy_lib_Uints[1][3],
     _ag_ = caml_call1(Camlboy_lib_Uints[1][20], 16),
     _ah_ = caml_call2(Camlboy_lib_Uints[1][31], x, _ag_),
     _ai_ = caml_call2(Camlboy_lib_Uints[1][28], _ah_, _af_),
     _aj_ = Camlboy_lib_Uints[1][3],
     _ak_ = caml_call1(Camlboy_lib_Uints[1][20], 32),
     _al_ = caml_call2(Camlboy_lib_Uints[1][31], x, _ak_),
     _am_ = caml_call2(Camlboy_lib_Uints[1][28], _al_, _aj_),
     _an_ = Camlboy_lib_Uints[1][3],
     _ao_ = caml_call1(Camlboy_lib_Uints[1][20], 64),
     _ap_ = caml_call2(Camlboy_lib_Uints[1][31], x, _ao_),
     _aq_ = caml_call2(Camlboy_lib_Uints[1][28], _ap_, _an_),
     _ar_ = Camlboy_lib_Uints[1][3],
     _as_ = caml_call1(Camlboy_lib_Uints[1][20], 128),
     _at_ = caml_call2(Camlboy_lib_Uints[1][31], x, _as_);
    return [0,
            caml_call2(Camlboy_lib_Uints[1][28], _at_, _ar_),
            _aq_,
            _am_,
            _ai_,
            _ae_,
            _aa_,
            _Y_,
            _U_];
   }
   function byte_of_bitflags(b7, b6, b5, b4, b3, b2, b1, b0){
    var
     _J_ = caml_call1(Stdlib_Bool[4], b7) << 7,
     _K_ = caml_call1(Stdlib_Bool[4], b6) << 6,
     _L_ = caml_call1(Stdlib_Bool[4], b5) << 5,
     _M_ = caml_call1(Stdlib_Bool[4], b4) << 4,
     _N_ = caml_call1(Stdlib_Bool[4], b3) << 3,
     _O_ = caml_call1(Stdlib_Bool[4], b2) << 2,
     _P_ = caml_call1(Stdlib_Bool[4], b1) << 1,
     _Q_ =
       caml_call1(Stdlib_Bool[4], b0) | _P_ | _O_ | _N_ | _M_ | _L_ | _K_
       | _J_;
    return caml_call1(Camlboy_lib_Uints[1][20], _Q_);
   }
   function bitarray_of_byte(x){
    var
     _e_ = Camlboy_lib_Uints[1][3],
     _f_ = caml_call1(Camlboy_lib_Uints[1][20], 1),
     _g_ = caml_call2(Camlboy_lib_Uints[1][31], x, _f_),
     _h_ = caml_call2(Camlboy_lib_Uints[1][28], _g_, _e_),
     _i_ = Camlboy_lib_Uints[1][3],
     _j_ = caml_call1(Camlboy_lib_Uints[1][20], 2),
     _k_ = caml_call2(Camlboy_lib_Uints[1][31], x, _j_),
     _l_ = caml_call2(Camlboy_lib_Uints[1][28], _k_, _i_),
     _m_ = Camlboy_lib_Uints[1][3],
     _n_ = caml_call1(Camlboy_lib_Uints[1][20], 4),
     _o_ = caml_call2(Camlboy_lib_Uints[1][31], x, _n_),
     _p_ = caml_call2(Camlboy_lib_Uints[1][28], _o_, _m_),
     _q_ = Camlboy_lib_Uints[1][3],
     _r_ = caml_call1(Camlboy_lib_Uints[1][20], 8),
     _s_ = caml_call2(Camlboy_lib_Uints[1][31], x, _r_),
     _t_ = caml_call2(Camlboy_lib_Uints[1][28], _s_, _q_),
     _u_ = Camlboy_lib_Uints[1][3],
     _v_ = caml_call1(Camlboy_lib_Uints[1][20], 16),
     _w_ = caml_call2(Camlboy_lib_Uints[1][31], x, _v_),
     _x_ = caml_call2(Camlboy_lib_Uints[1][28], _w_, _u_),
     _y_ = Camlboy_lib_Uints[1][3],
     _z_ = caml_call1(Camlboy_lib_Uints[1][20], 32),
     _A_ = caml_call2(Camlboy_lib_Uints[1][31], x, _z_),
     _B_ = caml_call2(Camlboy_lib_Uints[1][28], _A_, _y_),
     _C_ = Camlboy_lib_Uints[1][3],
     _D_ = caml_call1(Camlboy_lib_Uints[1][20], 64),
     _E_ = caml_call2(Camlboy_lib_Uints[1][31], x, _D_),
     _F_ = caml_call2(Camlboy_lib_Uints[1][28], _E_, _C_),
     _G_ = Camlboy_lib_Uints[1][3],
     _H_ = caml_call1(Camlboy_lib_Uints[1][20], 128),
     _I_ = caml_call2(Camlboy_lib_Uints[1][31], x, _H_);
    return [0,
            caml_call2(Camlboy_lib_Uints[1][28], _I_, _G_),
            _F_,
            _B_,
            _x_,
            _t_,
            _p_,
            _l_,
            _h_];
   }
   function byte_of_bitarray(a){
    var
     _b_ = _a_.slice(),
     _c_ =
       caml_call1
        (caml_call2
          (Stdlib_ArrayLabels[17],
           function(acc, i){
            var _d_ = runtime.caml_check_bound(a, i)[1 + i];
            return acc | caml_call1(Stdlib_Bool[4], _d_) << (7 - i | 0);
           },
           0),
         _b_);
    return caml_call1(Camlboy_lib_Uints[1][20], _c_);
   }
   var
    Camlboy_lib_Bit_util =
      [0,
       bitflags_of_byte,
       byte_of_bitflags,
       bitarray_of_byte,
       byte_of_bitarray];
   runtime.caml_register_global
    (4, Camlboy_lib_Bit_util, "Camlboy_lib__Bit_util");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Camlboy_lib__Color_id
(function(globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function of_bits(hi, lo){return hi ? lo ? 3 : 2 : lo ? 1 : 0;}
   function to_int(param){
    switch(param){
      case 0:
       return 0;
      case 1:
       return 1;
      case 2:
       return 2;
      default: return 3;
    }
   }
   function set_bit(t, param){
    if(17059 <= param)
     switch(t){
       case 0:
        return 1;
       case 1:
        return 1;
       case 2:
        return 3;
       default: return 3;
     }
    switch(t){
      case 0:
       return 2;
      case 1:
       return 3;
      case 2:
       return 2;
      default: return 3;
    }
   }
   function clear_bit(t, param){
    if(17059 <= param)
     switch(t){
       case 0:
        return 0;
       case 1:
        return 0;
       case 2:
        return 2;
       default: return 2;
     }
    switch(t){
      case 0:
       return 0;
      case 1:
       return 1;
      case 2:
       return 0;
      default: return 1;
    }
   }
   function get_bit(t, param){
    if(17059 > param) return 2 <= t ? 1 : 0;
    if(1 !== t && 3 > t) return 0;
    return 1;
   }
   var
    Camlboy_lib_Color_id = [0, of_bits, to_int, set_bit, clear_bit, get_bit];
   runtime.caml_register_global
    (0, Camlboy_lib_Color_id, "Camlboy_lib__Color_id");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Camlboy_lib__Tile_data
//# unitInfo: Requires: Camlboy_lib__Bit_util, Camlboy_lib__Color_id, Camlboy_lib__Uints, Stdlib, Stdlib__Array
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_check_bound = runtime.caml_check_bound;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Camlboy_lib_Color_id = global_data.Camlboy_lib__Color_id,
    Camlboy_lib_Bit_util = global_data.Camlboy_lib__Bit_util,
    Camlboy_lib_Uints = global_data.Camlboy_lib__Uints,
    Stdlib_Array = global_data.Stdlib__Array,
    Stdlib = global_data.Stdlib,
    _a_ = [0, 0, 1, 2, 3, 4, 5, 6, 7];
   function create(start_addr, end_addr){
    var
     tiles =
       caml_call2
        (Stdlib_Array[2],
         384,
         function(param){return caml_call3(Stdlib_Array[3], 8, 8, 0);});
    return [0, tiles, start_addr, end_addr];
   }
   function get_row_pixels(t, area, index, row){
    if(area)
     var
      _k_ = caml_call1(Camlboy_lib_Uints[3][1], index),
      signed_index = caml_call1(Camlboy_lib_Uints[3][3], _k_),
      index$0 = signed_index + 256 | 0;
    else
     var index$0 = caml_call1(Camlboy_lib_Uints[1][21], index);
    if(8 > row)
     return caml_check_bound
              (caml_check_bound(t[1], index$0)[1 + index$0], row)
             [1 + row];
    var _l_ = row - 8 | 0, _m_ = index$0 + 1 | 0;
    return caml_check_bound(caml_check_bound(t[1], _m_)[1 + _m_], _l_)
            [1 + _l_];
   }
   function get_pixel(t, area, index, row, col){
    var row$0 = get_row_pixels(t, area, index, row);
    return caml_check_bound(row$0, col)[1 + col];
   }
   function get_full_pixels(t, area, index){
    var _j_ = _a_.slice();
    return caml_call1
            (caml_call1
              (Stdlib_Array[15],
               function(row){return get_row_pixels(t, area, index, row);}),
             _j_);
   }
   function print_full_pixels(t, area, index){
    var _h_ = get_full_pixels(t, area, index);
    return caml_call1
            (caml_call1
              (Stdlib_Array[13],
               function(color_ids){
                var
                 _i_ =
                   caml_call1
                    (caml_call1(Stdlib_Array[15], Camlboy_lib_Color_id[2]),
                     color_ids);
                caml_call1(caml_call1(Stdlib_Array[13], Stdlib[44]), _i_);
                return caml_call1(Stdlib[47], 0);
               }),
             _h_);
   }
   function accepts(t, addr){
    var _g_ = caml_call2(Camlboy_lib_Uints[2][29], t[2], addr);
    return _g_ ? caml_call2(Camlboy_lib_Uints[2][29], addr, t[3]) : _g_;
   }
   function read_byte(t, addr){
    var
     _d_ = caml_call2(Camlboy_lib_Uints[2][24], addr, t[2]),
     offset = caml_call1(Camlboy_lib_Uints[2][21], _d_),
     index = offset / 16 | 0,
     row = (offset % 16 | 0) / 2 | 0,
     hi_or_lo = 0 === (offset % 2 | 0) ? 17059 : 16161,
     _e_ =
       caml_check_bound(caml_check_bound(t[1], index)[1 + index], row)
        [1 + row],
     _f_ =
       caml_call1
        (caml_call1
          (Stdlib_Array[15],
           function(id){
            return caml_call2(Camlboy_lib_Color_id[5], id, hi_or_lo);
           }),
         _e_);
    return caml_call1(Camlboy_lib_Bit_util[4], _f_);
   }
   function write_byte(t, addr, data){
    var
     data_bits = caml_call1(Camlboy_lib_Bit_util[3], data),
     _b_ = caml_call2(Camlboy_lib_Uints[2][24], addr, t[2]),
     offset = caml_call1(Camlboy_lib_Uints[2][21], _b_),
     index = offset / 16 | 0,
     row = (offset % 16 | 0) / 2 | 0,
     colors_in_row =
       caml_check_bound(caml_check_bound(t[1], index)[1 + index], row)
        [1 + row],
     hi_or_lo = 0 === (offset % 2 | 0) ? 17059 : 16161,
     _c_ =
       caml_call1
        (caml_call1
          (Stdlib_Array[16],
           function(i, b){
            var id = caml_check_bound(colors_in_row, i)[1 + i];
            return b
                    ? caml_call2(Camlboy_lib_Color_id[3], id, hi_or_lo)
                    : caml_call2(Camlboy_lib_Color_id[4], id, hi_or_lo);
           }),
         data_bits);
    caml_check_bound(caml_check_bound(t[1], index)[1 + index], row)[1 + row] = _c_;
    return 0;
   }
   var
    Camlboy_lib_Tile_data =
      [0,
       create,
       get_pixel,
       get_row_pixels,
       get_full_pixels,
       print_full_pixels,
       read_byte,
       write_byte,
       accepts];
   runtime.caml_register_global
    (6, Camlboy_lib_Tile_data, "Camlboy_lib__Tile_data");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Camlboy_lib__Ram
//# unitInfo: Requires: Bigstringaf, Camlboy_lib__Uints
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Camlboy_lib_Uints = global_data.Camlboy_lib__Uints,
    Bigstringaf = global_data.Bigstringaf;
   function create(start_addr, end_addr){
    var
     _f_ = Camlboy_lib_Uints[2][4],
     _g_ = caml_call2(Camlboy_lib_Uints[2][24], end_addr, start_addr),
     _h_ = caml_call2(Camlboy_lib_Uints[2][23], _g_, _f_),
     _i_ = caml_call1(Camlboy_lib_Uints[2][21], _h_),
     bytes = caml_call1(Bigstringaf[1], _i_);
    return [0, bytes, start_addr, end_addr];
   }
   function accepts(t, addr){
    var _e_ = caml_call2(Camlboy_lib_Uints[2][29], t[2], addr);
    return _e_ ? caml_call2(Camlboy_lib_Uints[2][29], addr, t[3]) : _e_;
   }
   function read_byte(t, addr){
    var
     _c_ = caml_call2(Camlboy_lib_Uints[2][24], addr, t[2]),
     offset = caml_call1(Camlboy_lib_Uints[2][21], _c_),
     _d_ = runtime.caml_ba_get_1(t[1], offset);
    return caml_call1(Camlboy_lib_Uints[1][36], _d_);
   }
   function write_byte(t, addr, data){
    var
     _a_ = caml_call2(Camlboy_lib_Uints[2][24], addr, t[2]),
     offset = caml_call1(Camlboy_lib_Uints[2][21], _a_),
     _b_ = caml_call1(Camlboy_lib_Uints[1][37], data);
    return runtime.caml_ba_set_1(t[1], offset, _b_);
   }
   var Camlboy_lib_Ram = [0, create, read_byte, write_byte, accepts];
   runtime.caml_register_global(2, Camlboy_lib_Ram, "Camlboy_lib__Ram");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Camlboy_lib__Shadow_ram
//# unitInfo: Requires: Camlboy_lib__Ram, Camlboy_lib__Uints, Stdlib, Stdlib__Printf
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Address_out_of_range = "Address out of range: ",
    cst_Address_out_of_range_s = "Address out of range: %s",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Camlboy_lib_Uints = global_data.Camlboy_lib__Uints,
    Stdlib_Printf = global_data.Stdlib__Printf,
    Stdlib = global_data.Stdlib,
    Camlboy_lib_Ram = global_data.Camlboy_lib__Ram,
    _a_ =
      [0,
       [11, cst_Address_out_of_range, [2, 0, 0]],
       cst_Address_out_of_range_s],
    _b_ =
      [0,
       [11, cst_Address_out_of_range, [2, 0, 0]],
       cst_Address_out_of_range_s];
   function create(target, target_start, shadow_start, shadow_end){return [0, target, target_start, shadow_start, shadow_end];
   }
   function accepts(t, addr){
    var _i_ = caml_call2(Camlboy_lib_Uints[2][29], t[3], addr);
    return _i_ ? caml_call2(Camlboy_lib_Uints[2][29], addr, t[4]) : _i_;
   }
   function read_byte(t, addr){
    if(accepts(t, addr)){
     var
      offset = caml_call2(Camlboy_lib_Uints[2][24], addr, t[3]),
      _f_ = caml_call2(Camlboy_lib_Uints[2][23], t[2], offset);
     return caml_call2(Camlboy_lib_Ram[2], t[1], _f_);
    }
    var
     _g_ = caml_call1(Camlboy_lib_Uints[2][1], addr),
     _h_ = caml_call2(Stdlib_Printf[4], _a_, _g_);
    throw caml_maybe_attach_backtrace([0, Stdlib[6], _h_], 1);
   }
   function write_byte(t, addr, data){
    if(accepts(t, addr)){
     var
      offset = caml_call2(Camlboy_lib_Uints[2][24], addr, t[3]),
      _c_ = caml_call2(Camlboy_lib_Uints[2][23], t[2], offset);
     return caml_call3(Camlboy_lib_Ram[3], t[1], _c_, data);
    }
    var
     _d_ = caml_call1(Camlboy_lib_Uints[2][1], addr),
     _e_ = caml_call2(Stdlib_Printf[4], _b_, _d_);
    throw caml_maybe_attach_backtrace([0, Stdlib[6], _e_], 1);
   }
   var Camlboy_lib_Shadow_ram = [0, create, read_byte, write_byte, accepts];
   runtime.caml_register_global
    (6, Camlboy_lib_Shadow_ram, "Camlboy_lib__Shadow_ram");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Camlboy_lib__Mmap_register
//# unitInfo: Requires: Camlboy_lib__Uints, Stdlib
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, cst_invalid_addr$1 = "invalid addr";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib = global_data.Stdlib,
    Camlboy_lib_Uints = global_data.Camlboy_lib__Uints,
    cst_invalid_addr = cst_invalid_addr$1,
    cst_cannot_read = "cannot read",
    cst_invalid_addr$0 = cst_invalid_addr$1,
    cst_cannot_write = "cannot write";
   function create(addr, type, opt, param){
    if(opt)
     var sth = opt[1], default$0 = sth;
    else
     var default$0 = Camlboy_lib_Uints[1][3];
    return 87 === type
            ? [0, addr, default$0, 0, 1]
            : 18373
              <= type
              ? [0, addr, default$0, 1, 1]
              : [0, addr, default$0, 1, 0];
   }
   function accepts(t, addr){
    return caml_call2(Camlboy_lib_Uints[2][27], addr, t[1]);
   }
   function read_byte(t, addr){
    return t[3]
            ? accepts
               (t, addr)
              ? t[2]
              : caml_call1(Stdlib[2], cst_invalid_addr)
            : caml_call1(Stdlib[2], cst_cannot_read);
   }
   function write_byte(t, addr, data){
    return t[3]
            ? accepts
               (t, addr)
              ? (t[2] = data, 0)
              : caml_call1(Stdlib[2], cst_invalid_addr$0)
            : caml_call1(Stdlib[2], cst_cannot_write);
   }
   function peek(t){return t[2];}
   var
    Camlboy_lib_Mmap_register =
      [0, create, peek, read_byte, write_byte, accepts];
   runtime.caml_register_global
    (6, Camlboy_lib_Mmap_register, "Camlboy_lib__Mmap_register");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Camlboy_lib__Serial_port
//# unitInfo: Requires: Camlboy_lib__Mmap_register, Camlboy_lib__Uints, Stdlib, Stdlib__Printf
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, cst_invalid_addr$1 = "invalid addr";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Camlboy_lib_Mmap_register = global_data.Camlboy_lib__Mmap_register,
    Camlboy_lib_Uints = global_data.Camlboy_lib__Uints,
    Stdlib_Printf = global_data.Stdlib__Printf,
    Stdlib = global_data.Stdlib,
    cst_invalid_addr = cst_invalid_addr$1,
    _a_ = [0, [0, 0], "%c"],
    cst_invalid_addr$0 = cst_invalid_addr$1;
   function create(sb, sc, opt, param){
    if(opt)
     var sth = opt[1], print_serial_port = sth;
    else
     var print_serial_port = 0;
    return [0, sb, sc, print_serial_port];
   }
   function read_byte(t, addr){
    return caml_call2(Camlboy_lib_Mmap_register[5], t[1], addr)
            ? caml_call2(Camlboy_lib_Mmap_register[3], t[1], addr)
            : caml_call2
               (Camlboy_lib_Mmap_register[5], t[2], addr)
              ? caml_call2(Camlboy_lib_Mmap_register[3], t[2], addr)
              : caml_call1(Stdlib[2], cst_invalid_addr);
   }
   function write_byte(t, addr, data){
    if(caml_call2(Camlboy_lib_Mmap_register[5], t[1], addr))
     return caml_call3(Camlboy_lib_Mmap_register[4], t[1], addr, data);
    if(! caml_call2(Camlboy_lib_Mmap_register[5], t[2], addr))
     return caml_call1(Stdlib[2], cst_invalid_addr$0);
    caml_call3(Camlboy_lib_Mmap_register[4], t[2], addr, data);
    var _c_ = t[3];
    if(_c_)
     var
      _d_ = caml_call1(Camlboy_lib_Uints[1][20], 129),
      _e_ = caml_call2(Camlboy_lib_Uints[1][27], data, _d_);
    else
     var _e_ = _c_;
    if(! _e_) return _e_;
    var
     _f_ = caml_call1(Camlboy_lib_Mmap_register[2], t[1]),
     _g_ = caml_call1(Camlboy_lib_Uints[1][21], _f_);
    caml_call2(Stdlib_Printf[2], _a_, _g_);
    return caml_call1(Stdlib[64], 0);
   }
   function accepts(t, addr){
    var _b_ = caml_call2(Camlboy_lib_Mmap_register[5], t[1], addr);
    return _b_ ? _b_ : caml_call2(Camlboy_lib_Mmap_register[5], t[2], addr);
   }
   var Camlboy_lib_Serial_port = [0, create, read_byte, write_byte, accepts];
   runtime.caml_register_global
    (7, Camlboy_lib_Serial_port, "Camlboy_lib__Serial_port");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Camlboy_lib__Rom_only
//# unitInfo: Requires: Camlboy_lib__Uints, Stdlib
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Camlboy_lib_Uints = global_data.Camlboy_lib__Uints,
    Stdlib = global_data.Stdlib,
    cst_Address_out_of_bounds = "Address out of bounds";
   function create(rom_bytes){return [0, rom_bytes];}
   function read_byte(t, addr){
    var addr$0 = caml_call1(Camlboy_lib_Uints[2][21], addr);
    if(0 <= addr$0 && 32767 >= addr$0){
     var _e_ = runtime.caml_ba_get_1(t[1], addr$0);
     return caml_call1(Camlboy_lib_Uints[1][36], _e_);
    }
    throw caml_maybe_attach_backtrace
           ([0, Stdlib[6], cst_Address_out_of_bounds], 1);
   }
   function write_byte(param, _d_, _c_){return 0;}
   function accepts(param, addr){
    var
     addr$0 = caml_call1(Camlboy_lib_Uints[2][21], addr),
     _a_ = 0 <= addr$0 ? 1 : 0,
     _b_ = _a_ ? addr$0 <= 32767 ? 1 : 0 : _a_;
    return _b_;
   }
   var Camlboy_lib_Rom_only = [0, create, read_byte, write_byte, accepts];
   runtime.caml_register_global
    (3, Camlboy_lib_Rom_only, "Camlboy_lib__Rom_only");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Camlboy_lib__Registers
//# unitInfo: Requires: Camlboy_lib__Uints, Stdlib__Printf
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) === 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) === 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Camlboy_lib_Uints = global_data.Camlboy_lib__Uints,
    Stdlib_Printf = global_data.Stdlib__Printf;
   function create(param){
    return [0,
            Camlboy_lib_Uints[1][3],
            Camlboy_lib_Uints[1][3],
            Camlboy_lib_Uints[1][3],
            Camlboy_lib_Uints[1][3],
            Camlboy_lib_Uints[1][3],
            Camlboy_lib_Uints[1][3],
            Camlboy_lib_Uints[1][3],
            Camlboy_lib_Uints[1][3]];
   }
   function read_r(t, param){
    switch(param){
      case 0:
       return t[1];
      case 1:
       return t[2];
      case 2:
       return t[3];
      case 3:
       return t[4];
      case 4:
       return t[5];
      case 5:
       return t[6];
      case 6:
       return t[7];
      default: return t[8];
    }
   }
   function read_rr(t, rr){
    switch(rr){
      case 0:
       var
        _q_ = caml_call1(Camlboy_lib_Uints[2][36], t[6]),
        _r_ = caml_call1(Camlboy_lib_Uints[2][36], t[1]),
        _s_ = caml_call2(Camlboy_lib_Uints[2][34], _r_, 8);
       return caml_call2(Camlboy_lib_Uints[2][32], _s_, _q_);
      case 1:
       var
        _t_ = caml_call1(Camlboy_lib_Uints[2][36], t[3]),
        _u_ = caml_call1(Camlboy_lib_Uints[2][36], t[2]),
        _v_ = caml_call2(Camlboy_lib_Uints[2][34], _u_, 8);
       return caml_call2(Camlboy_lib_Uints[2][32], _v_, _t_);
      case 2:
       var
        _w_ = caml_call1(Camlboy_lib_Uints[2][36], t[5]),
        _x_ = caml_call1(Camlboy_lib_Uints[2][36], t[4]),
        _y_ = caml_call2(Camlboy_lib_Uints[2][34], _x_, 8);
       return caml_call2(Camlboy_lib_Uints[2][32], _y_, _w_);
      default:
       var
        _z_ = caml_call1(Camlboy_lib_Uints[2][36], t[8]),
        _A_ = caml_call1(Camlboy_lib_Uints[2][36], t[7]),
        _B_ = caml_call2(Camlboy_lib_Uints[2][34], _A_, 8);
       return caml_call2(Camlboy_lib_Uints[2][32], _B_, _z_);
    }
   }
   function write_r(t, r, x){
    switch(r){
      case 0:
       t[1] = x; return 0;
      case 1:
       t[2] = x; return 0;
      case 2:
       t[3] = x; return 0;
      case 3:
       t[4] = x; return 0;
      case 4:
       t[5] = x; return 0;
      case 5:
       var _p_ = caml_call1(Camlboy_lib_Uints[1][20], 240);
       t[6] = caml_call2(Camlboy_lib_Uints[1][31], x, _p_);
       return 0;
      case 6:
       t[7] = x; return 0;
      default: t[8] = x; return 0;
    }
   }
   function write_rr(t, rr, x){
    var
     x$0 = caml_call1(Camlboy_lib_Uints[2][21], x),
     high = caml_call1(Camlboy_lib_Uints[1][20], (x$0 & 65280) >>> 8 | 0),
     low = caml_call1(Camlboy_lib_Uints[1][20], x$0 & 255);
    switch(rr){
      case 0:
       t[1] = high;
       var _o_ = caml_call1(Camlboy_lib_Uints[1][20], 240);
       t[6] = caml_call2(Camlboy_lib_Uints[1][31], low, _o_);
       return 0;
      case 1:
       t[2] = high; t[3] = low; return 0;
      case 2:
       t[4] = high; t[5] = low; return 0;
      default: t[7] = high; t[8] = low; return 0;
    }
   }
   function read_flag(t, flag){
    var f = caml_call1(Camlboy_lib_Uints[1][21], t[6]);
    switch(flag){
      case 0:
       return 0 !== (f & 16) ? 1 : 0;
      case 1:
       return 0 !== (f & 32) ? 1 : 0;
      case 2:
       return 0 !== (f & 64) ? 1 : 0;
      default: return 0 !== (f & 128) ? 1 : 0;
    }
   }
   var
    mask_0b00010000 = caml_call1(Camlboy_lib_Uints[1][20], 16),
    mask_0b11100000 = caml_call1(Camlboy_lib_Uints[1][20], 224),
    mask_0b00100000 = caml_call1(Camlboy_lib_Uints[1][20], 32),
    mask_0b11010000 = caml_call1(Camlboy_lib_Uints[1][20], 208),
    mask_0b01000000 = caml_call1(Camlboy_lib_Uints[1][20], 64),
    mask_0b10110000 = caml_call1(Camlboy_lib_Uints[1][20], 176),
    mask_0b10000000 = caml_call1(Camlboy_lib_Uints[1][20], 128),
    mask_0b01110000 = caml_call1(Camlboy_lib_Uints[1][20], 112),
    mask_0b11101111 = caml_call1(Camlboy_lib_Uints[1][20], 239),
    mask_0b11011111 = caml_call1(Camlboy_lib_Uints[1][20], 223),
    mask_0b10111111 = caml_call1(Camlboy_lib_Uints[1][20], 191),
    mask_0b01111111 = caml_call1(Camlboy_lib_Uints[1][20], 127),
    cst_A = "A",
    cst_B = "B",
    cst_C = "C",
    cst_D = "D",
    cst_E = "E",
    cst_F = "F",
    cst_H = "H",
    cst_L = "L",
    cst_AF = "AF",
    cst_BC = "BC",
    cst_DE = "DE",
    cst_HL = "HL",
    _a_ = [0, [0, [0, [0, [0, 0]]]], "%c%c%c%c"],
    _b_ =
      [0,
       [11,
        "A:",
        [2,
         0,
         [11,
          " F:",
          [2,
           0,
           [11, " BC:", [2, 0, [11, " DE:", [2, 0, [11, " HL:", [2, 0, 0]]]]]]]]]],
       "A:%s F:%s BC:%s DE:%s HL:%s"];
   function set_flag(t, flag){
    switch(flag){
      case 0:
       t[6] = caml_call2(Camlboy_lib_Uints[1][32], t[6], mask_0b00010000);
       return 0;
      case 1:
       t[6] = caml_call2(Camlboy_lib_Uints[1][32], t[6], mask_0b00100000);
       return 0;
      case 2:
       t[6] = caml_call2(Camlboy_lib_Uints[1][32], t[6], mask_0b01000000);
       return 0;
      default:
       t[6] = caml_call2(Camlboy_lib_Uints[1][32], t[6], mask_0b10000000);
       return 0;
    }
   }
   function set_flags(t, opt, _n_, _m_, _l_, param){
    if(opt) var sth = opt[1], c = sth; else var c = read_flag(t, 0);
    if(_n_) var sth$0 = _n_[1], h = sth$0; else var h = read_flag(t, 1);
    if(_m_) var sth$1 = _m_[1], n = sth$1; else var n = read_flag(t, 2);
    if(_l_) var sth$2 = _l_[1], z = sth$2; else var z = read_flag(t, 3);
    t[6] =
     c
      ? caml_call2(Camlboy_lib_Uints[1][32], t[6], mask_0b00010000)
      : caml_call2(Camlboy_lib_Uints[1][31], t[6], mask_0b11100000);
    t[6] =
     h
      ? caml_call2(Camlboy_lib_Uints[1][32], t[6], mask_0b00100000)
      : caml_call2(Camlboy_lib_Uints[1][31], t[6], mask_0b11010000);
    t[6] =
     n
      ? caml_call2(Camlboy_lib_Uints[1][32], t[6], mask_0b01000000)
      : caml_call2(Camlboy_lib_Uints[1][31], t[6], mask_0b10110000);
    return z
            ? (t
               [6]
              = caml_call2(Camlboy_lib_Uints[1][32], t[6], mask_0b10000000),
              0)
            : (t
               [6]
              = caml_call2(Camlboy_lib_Uints[1][31], t[6], mask_0b01110000),
              0);
   }
   function unset_flag(t, flag){
    switch(flag){
      case 0:
       t[6] = caml_call2(Camlboy_lib_Uints[1][31], t[6], mask_0b11101111);
       return 0;
      case 1:
       t[6] = caml_call2(Camlboy_lib_Uints[1][31], t[6], mask_0b11011111);
       return 0;
      case 2:
       t[6] = caml_call2(Camlboy_lib_Uints[1][31], t[6], mask_0b10111111);
       return 0;
      default:
       t[6] = caml_call2(Camlboy_lib_Uints[1][31], t[6], mask_0b01111111);
       return 0;
    }
   }
   function clear_flags(t){t[6] = Camlboy_lib_Uints[1][3]; return 0;}
   function show_r(param){
    switch(param){
      case 0:
       return cst_A;
      case 1:
       return cst_B;
      case 2:
       return cst_C;
      case 3:
       return cst_D;
      case 4:
       return cst_E;
      case 5:
       return cst_F;
      case 6:
       return cst_H;
      default: return cst_L;
    }
   }
   function show_rr(param){
    switch(param){
      case 0:
       return cst_AF;
      case 1:
       return cst_BC;
      case 2:
       return cst_DE;
      default: return cst_HL;
    }
   }
   function show(t){
    var
     _d_ = read_rr(t, 3),
     _e_ = caml_call1(Camlboy_lib_Uints[2][1], _d_),
     _f_ = read_rr(t, 2),
     _g_ = caml_call1(Camlboy_lib_Uints[2][1], _f_),
     _h_ = read_rr(t, 1),
     _i_ = caml_call1(Camlboy_lib_Uints[2][1], _h_),
     f$0 = t[6],
     f = caml_call1(Camlboy_lib_Uints[1][21], f$0),
     z = 0 === (f & 128) ? 45 : 90,
     n = 0 === (f & 64) ? 45 : 78,
     h = 0 === (f & 32) ? 45 : 72,
     c = 0 === (f & 16) ? 45 : 67,
     _c_ = caml_call5(Stdlib_Printf[4], _a_, z, n, h, c),
     _j_ = read_r(t, 0),
     _k_ = caml_call1(Camlboy_lib_Uints[1][1], _j_);
    return caml_call6(Stdlib_Printf[4], _b_, _k_, _c_, _i_, _g_, _e_);
   }
   var
    Camlboy_lib_Registers =
      [0,
       create,
       read_r,
       write_r,
       read_rr,
       write_rr,
       read_flag,
       set_flag,
       set_flags,
       unset_flag,
       clear_flags,
       show,
       show_r,
       show_rr];
   runtime.caml_register_global
    (16, Camlboy_lib_Registers, "Camlboy_lib__Registers");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Camlboy_lib__Read_rom_file
//# unitInfo: Requires: Bigstringaf, Stdlib, Stdlib__String
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib = global_data.Stdlib,
    Bigstringaf = global_data.Bigstringaf,
    Stdlib_String = global_data.Stdlib__String;
   function f(rom_file_name){
    var
     rom_in = caml_call1(Stdlib[79], rom_file_name),
     rom_len = caml_call1(Stdlib[92], rom_in),
     rom_string = caml_call2(Stdlib[86], rom_in, rom_len),
     bytes = caml_call1(Bigstringaf[1], rom_len);
    caml_call1
     (caml_call1
       (Stdlib_String[30],
        function(i, c){return runtime.caml_ba_set_1(bytes, i, c);}),
      rom_string);
    return bytes;
   }
   var Camlboy_lib_Read_rom_file = [0, f];
   runtime.caml_register_global
    (3, Camlboy_lib_Read_rom_file, "Camlboy_lib__Read_rom_file");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Camlboy_lib__Pallete
//# unitInfo: Requires: Assert_failure, Camlboy_lib__Uints, Stdlib
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Address_out_of_bounds$1 = "Address out of bounds",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Assert_failure = global_data.Assert_failure,
    Camlboy_lib_Uints = global_data.Camlboy_lib__Uints,
    Stdlib = global_data.Stdlib,
    cst_Address_out_of_bounds = cst_Address_out_of_bounds$1,
    _a_ = [0, "lib/gpu/pallete.ml", 53, 14],
    cst_Address_out_of_bounds$0 = cst_Address_out_of_bounds$1;
   function create(addr){
    return [0, addr, -588596599, -603547828, -126317716, -937474657];
   }
   function lookup(t, color_id){
    switch(color_id){
      case 0:
       return t[2];
      case 1:
       return t[3];
      case 2:
       return t[4];
      default: return t[5];
    }
   }
   function accepts(t, addr){
    return caml_call2(Camlboy_lib_Uints[2][27], addr, t[1]);
   }
   function read_byte(t, addr){
    function bits_of_color(param){
     return -588596599 <= param
             ? -126317716 <= param ? 2 : 0
             : -603547828 <= param ? 1 : 3;
    }
    if(! accepts(t, addr))
     throw caml_maybe_attach_backtrace
            ([0, Stdlib[6], cst_Address_out_of_bounds], 1);
    var
     _b_ = bits_of_color(t[5]) << 6,
     _c_ = bits_of_color(t[4]) << 4,
     _d_ = bits_of_color(t[3]) << 2,
     _e_ = bits_of_color(t[2]) | _d_ | _c_ | _b_;
    return caml_call1(Camlboy_lib_Uints[1][20], _e_);
   }
   function write_byte(t, addr, data){
    function color_of_bits(param){
     if(3 < param >>> 0)
      throw caml_maybe_attach_backtrace([0, Assert_failure, _a_], 1);
     switch(param){
       case 0:
        return -588596599;
       case 1:
        return -603547828;
       case 2:
        return -126317716;
       default: return -937474657;
     }
    }
    var data$0 = caml_call1(Camlboy_lib_Uints[1][21], data);
    if(! accepts(t, addr))
     throw caml_maybe_attach_backtrace
            ([0, Stdlib[6], cst_Address_out_of_bounds$0], 1);
    t[2] = color_of_bits(data$0 & 3);
    t[3] = color_of_bits((data$0 & 12) >>> 2 | 0);
    t[4] = color_of_bits((data$0 & 48) >>> 4 | 0);
    t[5] = color_of_bits((data$0 & 192) >>> 6 | 0);
    return 0;
   }
   var
    Camlboy_lib_Pallete = [0, create, lookup, read_byte, write_byte, accepts];
   runtime.caml_register_global
    (6, Camlboy_lib_Pallete, "Camlboy_lib__Pallete");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Camlboy_lib__Oam_table
//# unitInfo: Requires: Assert_failure, Camlboy_lib__Bit_util, Camlboy_lib__Uints, Stdlib__Array, Stdlib__Bool, Stdlib__Printf
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_lib_gpu_oam_table_ml = "lib/gpu/oam_table.ml",
    caml_check_bound = runtime.caml_check_bound,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call8(f, a0, a1, a2, a3, a4, a5, a6, a7){
    return (f.l >= 0 ? f.l : f.l = f.length) === 8
            ? f(a0, a1, a2, a3, a4, a5, a6, a7)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7]);
   }
   function caml_call10(f, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9){
    return (f.l >= 0 ? f.l : f.l = f.length) === 10
            ? f(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9)
            : runtime.caml_call_gen
              (f, [a0, a1, a2, a3, a4, a5, a6, a7, a8, a9]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    partial =
      [11,
       ", x_flip:",
       [9,
        0,
        [11,
         ", pallete:",
         [2,
          0,
          [11,
           ", tile_vram_bank:",
           [2, 0, [11, ", pallete_num:", [4, 0, 0, 0, [12, 10, 0]]]]]]]]],
    Camlboy_lib_Uints = global_data.Camlboy_lib__Uints,
    Assert_failure = global_data.Assert_failure,
    Camlboy_lib_Bit_util = global_data.Camlboy_lib__Bit_util,
    Stdlib_Bool = global_data.Stdlib__Bool,
    Stdlib_Printf = global_data.Stdlib__Printf,
    cst_Bank1 = "`Bank1",
    cst_OBP1 = "`OBP1",
    cst_Sprite_bottom = "`Sprite_bottom",
    _a_ =
      [0,
       [11,
        "y_pos:",
        [4,
         0,
         0,
         0,
         [11,
          ", x_pos:",
          [4,
           0,
           0,
           0,
           [11,
            ", tile_index:",
            [2,
             0,
             [11, ", priority:", [2, 0, [11, ", y_flip:", [9, 0, partial]]]]]]]]]],
       "y_pos:%d, x_pos:%d, tile_index:%s, priority:%s, y_flip:%b, x_flip:%b, pallete:%s, tile_vram_bank:%s, pallete_num:%d\n"],
    cst_Sprite_top = "`Sprite_top",
    cst_OBP0 = "`OBP0",
    cst_Bank0 = "`Bank0",
    _b_ = [0, cst_lib_gpu_oam_table_ml, 67, 9],
    _c_ = [0, cst_lib_gpu_oam_table_ml, 89, 9];
   function show_sprite(s){
    var
     _s_ = s[9],
     _t_ = -1058811691 <= s[8] ? cst_Bank1 : cst_Bank0,
     _u_ = 879375796 <= s[7] ? cst_OBP1 : cst_OBP0,
     _v_ = s[6],
     _w_ = s[5],
     _x_ = 486156037 <= s[4] ? cst_Sprite_bottom : cst_Sprite_top,
     _y_ = caml_call1(Camlboy_lib_Uints[1][1], s[3]);
    return caml_call10
            (Stdlib_Printf[4],
             _a_,
             s[1],
             s[2],
             _y_,
             _x_,
             _w_,
             _v_,
             _u_,
             _t_,
             _s_);
   }
   function create(start_addr, end_addr){
    var
     default_sprite =
       [0,
        0,
        0,
        Camlboy_lib_Uints[1][3],
        -259427781,
        0,
        0,
        879375795,
        -1058811692,
        0],
     sprites = runtime.caml_make_vect(40, default_sprite);
    return [0, sprites, start_addr, end_addr];
   }
   function read_byte(t, addr){
    var
     _q_ = caml_call1(Camlboy_lib_Uints[2][21], t[2]),
     offset = caml_call1(Camlboy_lib_Uints[2][21], addr) - _q_ | 0,
     _r_ = offset / 4 | 0,
     sprite = caml_check_bound(t[1], _r_)[1 + _r_],
     match = offset % 4 | 0;
    if(3 < match >>> 0)
     throw caml_maybe_attach_backtrace([0, Assert_failure, _b_], 1);
    switch(match){
      case 0:
       return caml_call1(Camlboy_lib_Uints[1][20], sprite[1] + 16 | 0);
      case 1:
       return caml_call1(Camlboy_lib_Uints[1][20], sprite[2] + 8 | 0);
      case 2:
       return sprite[3];
      default:
       return caml_call8
               (Camlboy_lib_Bit_util[2],
                486156037 === sprite[4] ? 1 : 0,
                sprite[5],
                sprite[6],
                879375796 === sprite[7] ? 1 : 0,
                -1058811691 === sprite[8] ? 1 : 0,
                0 !== (sprite[9] & 4) ? 1 : 0,
                0 !== (sprite[9] & 2) ? 1 : 0,
                0 !== (sprite[9] & 1) ? 1 : 0);
    }
   }
   function write_byte(t, addr, data){
    var
     _f_ = caml_call1(Camlboy_lib_Uints[2][21], t[2]),
     offset = caml_call1(Camlboy_lib_Uints[2][21], addr) - _f_ | 0,
     data$0 = caml_call1(Camlboy_lib_Uints[1][21], data),
     sprite_index = offset / 4 | 0,
     match = offset % 4 | 0;
    if(3 < match >>> 0)
     throw caml_maybe_attach_backtrace([0, Assert_failure, _c_], 1);
    switch(match){
      case 0:
       var
        _g_ = caml_check_bound(t[1], sprite_index)[1 + sprite_index],
        _h_ =
          [0,
           data$0 - 16 | 0,
           _g_[2],
           _g_[3],
           _g_[4],
           _g_[5],
           _g_[6],
           _g_[7],
           _g_[8],
           _g_[9]];
       caml_check_bound(t[1], sprite_index)[1 + sprite_index] = _h_;
       return 0;
      case 1:
       var
        _i_ = caml_check_bound(t[1], sprite_index)[1 + sprite_index],
        _j_ =
          [0,
           _i_[1],
           data$0 - 8 | 0,
           _i_[3],
           _i_[4],
           _i_[5],
           _i_[6],
           _i_[7],
           _i_[8],
           _i_[9]];
       caml_check_bound(t[1], sprite_index)[1 + sprite_index] = _j_;
       return 0;
      case 2:
       var
        _k_ = caml_check_bound(t[1], sprite_index)[1 + sprite_index],
        _l_ =
          [0,
           _k_[1],
           _k_[2],
           data,
           _k_[4],
           _k_[5],
           _k_[6],
           _k_[7],
           _k_[8],
           _k_[9]];
       caml_check_bound(t[1], sprite_index)[1 + sprite_index] = _l_;
       return 0;
      default:
       var
        match$0 = caml_call1(Camlboy_lib_Bit_util[1], data),
        b0 = match$0[8],
        b1 = match$0[7],
        b2 = match$0[6],
        b3 = match$0[5],
        b4 = match$0[4],
        x_flip = match$0[3],
        y_flip = match$0[2],
        b7 = match$0[1],
        priority = b7 ? 486156037 : -259427781,
        pallete = b4 ? 879375796 : 879375795,
        tile_vram_bank = b3 ? -1058811691 : -1058811692,
        _m_ = caml_call1(Stdlib_Bool[4], b0),
        _n_ = caml_call1(Stdlib_Bool[4], b1) << 1,
        pallete_num = caml_call1(Stdlib_Bool[4], b2) << 2 | _n_ | _m_,
        _o_ = caml_check_bound(t[1], sprite_index)[1 + sprite_index],
        _p_ =
          [0,
           _o_[1],
           _o_[2],
           _o_[3],
           priority,
           y_flip,
           x_flip,
           pallete,
           tile_vram_bank,
           pallete_num];
       caml_check_bound(t[1], sprite_index)[1 + sprite_index] = _p_;
       return 0;
    }
   }
   function accepts(t, addr){
    var _e_ = caml_call2(Camlboy_lib_Uints[2][29], t[2], addr);
    return _e_ ? caml_call2(Camlboy_lib_Uints[2][29], addr, t[3]) : _e_;
   }
   function get_all_sprites(t){return t[1];}
   function write_with_offset(t, offset, data){
    var _d_ = caml_call1(Camlboy_lib_Uints[2][20], offset);
    return write_byte
            (t, caml_call2(Camlboy_lib_Uints[2][23], t[2], _d_), data);
   }
   var
    Camlboy_lib_Oam_table =
      [0,
       show_sprite,
       create,
       get_all_sprites,
       write_with_offset,
       read_byte,
       write_byte,
       accepts];
   runtime.caml_register_global
    (14, Camlboy_lib_Oam_table, "Camlboy_lib__Oam_table");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Camlboy_lib__Cartridge_type
(function(globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_ROM_ONLY = "ROM_ONLY",
    cst_MBC1 = "MBC1",
    cst_MBC1_RAM = "MBC1_RAM",
    cst_MBC1_RAM_BATTERY = "MBC1_RAM_BATTERY",
    cst_MBC2 = "MBC2",
    cst_MBC2_BATTERY = "MBC2_BATTERY",
    cst_MBC3_TIMER_BATTERY = "MBC3_TIMER_BATTERY",
    cst_MBC3_TIMER_RAM_BATTERY = "MBC3_TIMER_RAM_BATTERY",
    cst_MBC3 = "MBC3";
   function show(param){
    switch(param){
      case 0:
       return cst_ROM_ONLY;
      case 1:
       return cst_MBC1;
      case 2:
       return cst_MBC1_RAM;
      case 3:
       return cst_MBC1_RAM_BATTERY;
      case 4:
       return cst_MBC2;
      case 5:
       return cst_MBC2_BATTERY;
      case 6:
       return cst_MBC3_TIMER_BATTERY;
      case 7:
       return cst_MBC3_TIMER_RAM_BATTERY;
      default: return cst_MBC3;
    }
   }
   var Camlboy_lib_Cartridge_type = [0, show];
   runtime.caml_register_global
    (9, Camlboy_lib_Cartridge_type, "Camlboy_lib__Cartridge_type");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Camlboy_lib__Cartridge_header
//# unitInfo: Requires: Assert_failure, Stdlib, Stdlib__Printf
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_lib_cartridge_cartridge_he = "lib/cartridge/cartridge_header.ml",
    caml_ba_get_1 = runtime.caml_ba_get_1,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib_Printf = global_data.Stdlib__Printf,
    Stdlib = global_data.Stdlib,
    Assert_failure = global_data.Assert_failure,
    _a_ =
      [0,
       [11, "Unknown rom type : 0x", [4, 6, 0, 0, 0]],
       "Unknown rom type : 0x%x"],
    _b_ = [0, cst_lib_cartridge_cartridge_he, 33, 11],
    _c_ = [0, cst_lib_cartridge_cartridge_he, 43, 11];
   function create(rom_bytes){
    var x = caml_ba_get_1(rom_bytes, 327);
    a:
    if(17 >= x >>> 0){
     switch(x){
       case 0:
        var cartridge_type = 0; break;
       case 1:
        var cartridge_type = 1; break;
       case 2:
        var cartridge_type = 2; break;
       case 3:
        var cartridge_type = 3; break;
       case 5:
        var cartridge_type = 4; break;
       case 6:
        var cartridge_type = 5; break;
       case 15:
        var cartridge_type = 6; break;
       case 16:
        var cartridge_type = 7; break;
       case 17:
        var cartridge_type = 8; break;
       default: break a;
     }
     var match = caml_ba_get_1(rom_bytes, 328);
     if(8 < match >>> 0)
      throw caml_maybe_attach_backtrace([0, Assert_failure, _b_], 1);
     switch(match){
       case 0:
        var rom_bank_count = 2; break;
       case 1:
        var rom_bank_count = 4; break;
       case 2:
        var rom_bank_count = 8; break;
       case 3:
        var rom_bank_count = 16; break;
       case 4:
        var rom_bank_count = 32; break;
       case 5:
        var rom_bank_count = 64; break;
       case 6:
        var rom_bank_count = 128; break;
       case 7:
        var rom_bank_count = 256; break;
       default: var rom_bank_count = 512;
     }
     var match$0 = caml_ba_get_1(rom_bytes, 329);
     if(5 < match$0 >>> 0)
      throw caml_maybe_attach_backtrace([0, Assert_failure, _c_], 1);
     switch(match$0){
       case 0:
        var ram_bank_count = 0; break;
       case 1:
        var ram_bank_count = 1; break;
       case 2:
        var ram_bank_count = 1; break;
       case 3:
        var ram_bank_count = 4; break;
       case 4:
        var ram_bank_count = 16; break;
       default: var ram_bank_count = 8;
     }
     return [0, cartridge_type, rom_bank_count, ram_bank_count];
    }
    var _d_ = caml_call2(Stdlib_Printf[4], _a_, x);
    throw caml_maybe_attach_backtrace([0, Stdlib[6], _d_], 1);
   }
   function get_cartridge_type(t){return t[1];}
   function get_rom_bank_count(t){return t[2];}
   function get_ram_bank_count(t){return t[3];}
   var
    Camlboy_lib_Cartridge_header =
      [0, create, get_cartridge_type, get_rom_bank_count, get_ram_bank_count];
   runtime.caml_register_global
    (6, Camlboy_lib_Cartridge_header, "Camlboy_lib__Cartridge_header");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Camlboy_lib__Mbc3
//# unitInfo: Requires: Assert_failure, Bigstringaf, Camlboy_lib__Cartridge_header, Camlboy_lib__Uints
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_lib_cartridge_mbc3_ml = "lib/cartridge/mbc3.ml",
    caml_ba_get_1 = runtime.caml_ba_get_1,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Camlboy_lib_Uints = global_data.Camlboy_lib__Uints,
    Assert_failure = global_data.Assert_failure,
    Camlboy_lib_Cartridge_header = global_data.Camlboy_lib__Cartridge_header,
    Bigstringaf = global_data.Bigstringaf,
    _a_ = [0, cst_lib_cartridge_mbc3_ml, 43, 9],
    _b_ = [0, cst_lib_cartridge_mbc3_ml, 64, 9];
   function create(rom_bytes){
    var
     h = caml_call1(Camlboy_lib_Cartridge_header[1], rom_bytes),
     ram_bank_size = caml_call1(Camlboy_lib_Cartridge_header[4], h),
     ram_bytes = caml_call1(Bigstringaf[1], ram_bank_size * 8192 | 0);
    return [0, rom_bytes, ram_bytes, 0, 1, 0];
   }
   function read_byte(t, addr){
    var addr$0 = caml_call1(Camlboy_lib_Uints[2][21], addr);
    if(0 <= addr$0 && 16383 >= addr$0){
     var _o_ = caml_ba_get_1(t[1], addr$0);
     return caml_call1(Camlboy_lib_Uints[1][36], _o_);
    }
    if(16384 <= addr$0 && 32767 >= addr$0){
     var
      _n_ = caml_ba_get_1(t[1], (16384 * t[4] | 0) + (addr$0 - 16384 | 0) | 0);
     return caml_call1(Camlboy_lib_Uints[1][36], _n_);
    }
    if(40960 <= addr$0 && 49151 >= addr$0){
     if(! t[3]) return caml_call1(Camlboy_lib_Uints[1][20], 255);
     var
      _m_ = caml_ba_get_1(t[2], (16384 * t[4] | 0) + (addr$0 - 16384 | 0) | 0);
     return caml_call1(Camlboy_lib_Uints[1][36], _m_);
    }
    throw caml_maybe_attach_backtrace([0, Assert_failure, _a_], 1);
   }
   function write_byte(t, addr, data){
    var
     addr$0 = caml_call1(Camlboy_lib_Uints[2][21], addr),
     data$0 = caml_call1(Camlboy_lib_Uints[1][21], data);
    if(0 <= addr$0 && 8191 >= addr$0){t[3] = 10 === data$0 ? 1 : 0; return 0;}
    if(8192 <= addr$0 && 16383 >= addr$0){
     var
      rom_bank_num = data$0 & 127,
      _l_ = 0 === rom_bank_num ? 1 : rom_bank_num;
     t[4] = _l_;
     return 0;
    }
    if(16384 <= addr$0 && 24575 >= addr$0){
     var
      _i_ = 0 <= data$0 ? 1 : 0,
      _j_ = _i_ ? data$0 <= 3 ? 1 : 0 : _i_,
      _k_ = _j_ ? (t[5] = data$0, 0) : _j_;
     return _k_;
    }
    if(24576 <= addr$0 && 32767 >= addr$0) return 0;
    if(40960 <= addr$0 && 49151 >= addr$0){
     var _g_ = t[3];
     if(_g_)
      var
       ram_addr = (16384 * t[4] | 0) + (addr$0 - 16384 | 0) | 0,
       _h_ = runtime.caml_ba_set_1(t[2], ram_addr, data$0);
     else
      var _h_ = _g_;
     return _h_;
    }
    throw caml_maybe_attach_backtrace([0, Assert_failure, _b_], 1);
   }
   function accepts(param, addr){
    var
     addr$0 = caml_call1(Camlboy_lib_Uints[2][21], addr),
     _c_ = 0 <= addr$0 ? 1 : 0,
     _d_ = _c_ ? addr$0 <= 32767 ? 1 : 0 : _c_;
    if(_d_)
     var _e_ = _d_;
    else
     var
      _f_ = 40960 <= addr$0 ? 1 : 0,
      _e_ = _f_ ? addr$0 <= 49151 ? 1 : 0 : _f_;
    return _e_;
   }
   var Camlboy_lib_Mbc3 = [0, create, read_byte, write_byte, accepts];
   runtime.caml_register_global(6, Camlboy_lib_Mbc3, "Camlboy_lib__Mbc3");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Camlboy_lib__Mbc1
//# unitInfo: Requires: Assert_failure, Bigstringaf, Camlboy_lib__Cartridge_header, Camlboy_lib__Uints, Stdlib, Stdlib__Printf
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_lib_cartridge_mbc1_ml = "lib/cartridge/mbc1.ml",
    caml_ba_get_1 = runtime.caml_ba_get_1,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Camlboy_lib_Uints = global_data.Camlboy_lib__Uints,
    Assert_failure = global_data.Assert_failure,
    Stdlib_Printf = global_data.Stdlib__Printf,
    Stdlib = global_data.Stdlib,
    Camlboy_lib_Cartridge_header = global_data.Camlboy_lib__Cartridge_header,
    Bigstringaf = global_data.Bigstringaf,
    _a_ = [0, cst_lib_cartridge_mbc1_ml, 39, 13],
    _b_ = [0, cst_lib_cartridge_mbc1_ml, 51, 9],
    _c_ =
      [0,
       [11, "Unexpected ram size: ", [4, 0, 0, 0, 0]],
       "Unexpected ram size: %d"],
    _d_ = [0, cst_lib_cartridge_mbc1_ml, 84, 9],
    _e_ =
      [0,
       [11, "Unexpected rom size: ", [4, 0, 0, 0, 0]],
       "Unexpected rom size: %d"],
    _f_ = [0, cst_lib_cartridge_mbc1_ml, 114, 9];
   function create(rom_bytes){
    var
     h = caml_call1(Camlboy_lib_Cartridge_header[1], rom_bytes),
     rom_bank_size = caml_call1(Camlboy_lib_Cartridge_header[3], h),
     ram_bank_size = caml_call1(Camlboy_lib_Cartridge_header[4], h),
     ram_bytes = caml_call1(Bigstringaf[1], ram_bank_size * 8192 | 0);
    return [0, rom_bytes, ram_bytes, rom_bank_size, ram_bank_size, 0, 1, 0, 0];
   }
   function ram_addr_of_addr(t, addr){
    var match = t[4];
    if(t[8] && 1 !== match){
     if(4 === match) return (8192 * t[7] | 0) + (addr - 40960 | 0) | 0;
     var _v_ = caml_call2(Stdlib_Printf[4], _c_, match);
     throw caml_maybe_attach_backtrace([0, Stdlib[6], _v_], 1);
    }
    return (addr - 40960 | 0) % 8192 | 0;
   }
   function read_byte(t, addr){
    var addr$0 = caml_call1(Camlboy_lib_Uints[2][21], addr);
    if(0 <= addr$0 && 16383 >= addr$0){
     var match = t[3];
     if(t[8])
      if(32 < match)
       if(64 === match)
        var zero_bank_num = (t[7] & 1) << 5;
       else{
        if(128 !== match)
         throw caml_maybe_attach_backtrace([0, Assert_failure, _a_], 1);
        var zero_bank_num = (t[7] & 3) << 5;
       }
      else
       var zero_bank_num = 0;
     else
      var zero_bank_num = 0;
     var _t_ = caml_ba_get_1(t[1], (16384 * zero_bank_num | 0) + addr$0 | 0);
     return caml_call1(Camlboy_lib_Uints[1][36], _t_);
    }
    if(16384 <= addr$0 && 32767 >= addr$0){
     var n = t[3];
     if(32 < n)
      if(64 === n)
       var bit5 = (t[7] & 1) << 5, high_bank_num = bit5 | t[6];
      else{
       if(128 !== n)
        throw caml_maybe_attach_backtrace([0, Assert_failure, _b_], 1);
       var bit56 = (t[7] & 3) << 5, high_bank_num = bit56 | t[6];
      }
     else
      var high_bank_num = t[6];
     var
      _s_ =
        caml_ba_get_1
         (t[1], (16384 * high_bank_num | 0) + (addr$0 - 16384 | 0) | 0);
     return caml_call1(Camlboy_lib_Uints[1][36], _s_);
    }
    if(40960 <= addr$0 && 49151 >= addr$0){
     if(t[5] && 0 < t[4]){
      var _u_ = ram_addr_of_addr(t, addr$0), _r_ = caml_ba_get_1(t[2], _u_);
      return caml_call1(Camlboy_lib_Uints[1][36], _r_);
     }
     return caml_call1(Camlboy_lib_Uints[1][20], 255);
    }
    throw caml_maybe_attach_backtrace([0, Assert_failure, _d_], 1);
   }
   function write_byte(t, addr, data){
    var
     addr$0 = caml_call1(Camlboy_lib_Uints[2][21], addr),
     data$0 = caml_call1(Camlboy_lib_Uints[1][21], data);
    if(0 <= addr$0 && 8191 >= addr$0){t[5] = 10 === data$0 ? 1 : 0; return 0;}
    if(8192 <= addr$0 && 16383 >= addr$0){
     var n = t[3];
     a:
     {
      if(33 <= n){
       if(64 === n){var _p_ = 31; break a;}
       if(128 === n){var _p_ = 31; break a;}
      }
      else
       if(17 <= n){
        if(32 <= n){var _p_ = 31; break a;}
       }
       else if(2 <= n)
        switch(n - 2 | 0){
          case 0:
           var _p_ = 1; break a;
          case 2:
           var _p_ = 3; break a;
          case 6:
           var _p_ = 7; break a;
          case 14:
           var _p_ = 15; break a;
        }
      var _k_ = caml_call2(Stdlib_Printf[4], _e_, n);
      throw caml_maybe_attach_backtrace([0, Stdlib[6], _k_], 1);
     }
     var
      rom_bank_num = data$0 & _p_,
      _q_ = 0 === rom_bank_num ? 1 : rom_bank_num;
     t[6] = _q_;
     return 0;
    }
    if(16384 <= addr$0 && 24575 >= addr$0){t[7] = data$0 & 3; return 0;}
    if(24576 <= addr$0 && 32767 >= addr$0){
     var _o_ = 0 === (data$0 & 1) ? 0 : 1;
     t[8] = _o_;
     return 0;
    }
    if(40960 <= addr$0 && 49151 >= addr$0){
     var _l_ = t[5], _m_ = _l_ ? 0 < t[4] ? 1 : 0 : _l_;
     if(_m_)
      var
       ram_addr = ram_addr_of_addr(t, addr$0),
       _n_ = runtime.caml_ba_set_1(t[2], ram_addr, data$0);
     else
      var _n_ = _m_;
     return _n_;
    }
    throw caml_maybe_attach_backtrace([0, Assert_failure, _f_], 1);
   }
   function accepts(param, addr){
    var
     addr$0 = caml_call1(Camlboy_lib_Uints[2][21], addr),
     _g_ = 0 <= addr$0 ? 1 : 0,
     _h_ = _g_ ? addr$0 <= 32767 ? 1 : 0 : _g_;
    if(_h_)
     var _i_ = _h_;
    else
     var
      _j_ = 40960 <= addr$0 ? 1 : 0,
      _i_ = _j_ ? addr$0 <= 49151 ? 1 : 0 : _j_;
    return _i_;
   }
   var Camlboy_lib_Mbc1 = [0, create, read_byte, write_byte, accepts];
   runtime.caml_register_global(12, Camlboy_lib_Mbc1, "Camlboy_lib__Mbc1");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Camlboy_lib__Gpu_mode
(function(globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function to_int(param){
    switch(param){
      case 0:
       return 2;
      case 1:
       return 3;
      case 2:
       return 0;
      default: return 1;
    }
   }
   var Camlboy_lib_Gpu_mode = [0, to_int];
   runtime.caml_register_global
    (0, Camlboy_lib_Gpu_mode, "Camlboy_lib__Gpu_mode");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Camlboy_lib__Lcd_stat
//# unitInfo: Requires: Camlboy_lib__Bit_util, Camlboy_lib__Uints, Stdlib
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Address_out_of_bounds$1 = "Address out of bounds",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call8(f, a0, a1, a2, a3, a4, a5, a6, a7){
    return (f.l >= 0 ? f.l : f.l = f.length) === 8
            ? f(a0, a1, a2, a3, a4, a5, a6, a7)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Camlboy_lib_Bit_util = global_data.Camlboy_lib__Bit_util,
    Stdlib = global_data.Stdlib,
    Camlboy_lib_Uints = global_data.Camlboy_lib__Uints,
    cst_Address_out_of_bounds = cst_Address_out_of_bounds$1,
    cst_Address_out_of_bounds$0 = cst_Address_out_of_bounds$1;
   function create(addr){return [0, addr, 0, 0, 0, 0, 0, 0];}
   function is_enabled(t, param){
    switch(param){
      case 0:
       return t[2];
      case 1:
       return t[3];
      case 2:
       return t[4];
      default: return t[5];
    }
   }
   function get_lyc_eq_ly_flag(t){return t[6];}
   function set_lyc_eq_ly_flag(t, b){t[6] = b; return 0;}
   function get_gpu_mode(t){return t[7];}
   function set_gpu_mode(t, mode){t[7] = mode; return 0;}
   function accepts(t, addr){
    return caml_call2(Camlboy_lib_Uints[2][27], addr, t[1]);
   }
   function read_byte(t, addr){
    if(! accepts(t, addr))
     throw caml_maybe_attach_backtrace
            ([0, Stdlib[6], cst_Address_out_of_bounds], 1);
    switch(t[7]){
      case 0:
       var b0 = 0, b1 = 1; break;
      case 1:
       var b0 = 1, b1 = 1; break;
      case 2:
       var b0 = 0, b1 = 0; break;
      default: var b0 = 1, b1 = 0;
    }
    var
     _a_ = t[6],
     _b_ = is_enabled(t, 3),
     _c_ = is_enabled(t, 2),
     _d_ = is_enabled(t, 1),
     _e_ = is_enabled(t, 0);
    return caml_call8
            (Camlboy_lib_Bit_util[2], 1, _e_, _d_, _c_, _b_, _a_, b1, b0);
   }
   function write_byte(t, addr, data){
    if(! accepts(t, addr))
     throw caml_maybe_attach_backtrace
            ([0, Stdlib[6], cst_Address_out_of_bounds$0], 1);
    var
     match = caml_call1(Camlboy_lib_Bit_util[1], data),
     b3 = match[5],
     b4 = match[4],
     b5 = match[3],
     b6 = match[2];
    t[2] = b6;
    t[3] = b5;
    t[4] = b4;
    t[5] = b3;
    return 0;
   }
   function peek(t){return read_byte(t, t[1]);}
   var
    Camlboy_lib_Lcd_stat =
      [0,
       create,
       is_enabled,
       get_lyc_eq_ly_flag,
       set_lyc_eq_ly_flag,
       get_gpu_mode,
       set_gpu_mode,
       peek,
       read_byte,
       write_byte,
       accepts];
   runtime.caml_register_global
    (5, Camlboy_lib_Lcd_stat, "Camlboy_lib__Lcd_stat");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Camlboy_lib__Lcd_position
//# unitInfo: Requires: Camlboy_lib__Uints, Stdlib, Stdlib__List, Stdlib__Printf
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Camlboy_lib_Uints = global_data.Camlboy_lib__Uints,
    Stdlib_Printf = global_data.Stdlib__Printf,
    Stdlib = global_data.Stdlib,
    Stdlib_List = global_data.Stdlib__List,
    _a_ =
      [0,
       [11, "Address out of range: ", [2, 0, 0]],
       "Address out of range: %s"];
   function create(scy_addr, scx_addr, ly_addr, lyc_addr, wy_addr, wx_addr){
    return [0,
            [0, scy_addr, 0],
            [0, scx_addr, 0],
            [0, ly_addr, 0],
            [0, lyc_addr, 0],
            [0, wy_addr, 0],
            [0, wx_addr, 0]];
   }
   function get_scy(t){return t[1][2];}
   function get_scx(t){return t[2][2];}
   function get_ly(t){return t[3][2];}
   function incr_ly(t){t[3][2] = t[3][2] + 1 | 0; return 0;}
   function reset_ly(t){t[3][2] = 0; return 0;}
   function get_lyc(t){return t[4][2];}
   function get_wy(t){return t[5][2];}
   function get_wx(t){return t[6][2];}
   function accepts(t, addr){
    var
     _d_ =
       [0,
        t[1][1],
        [0,
         t[2][1],
         [0, t[3][1], [0, t[4][1], [0, t[5][1], [0, t[6][1], 0]]]]]];
    return caml_call1
            (caml_call1
              (Stdlib_List[33],
               function(x){
                return caml_call2(Camlboy_lib_Uints[2][27], addr, x);
               }),
             _d_);
   }
   function register_of_addr(t, addr){
    if(caml_call2(Camlboy_lib_Uints[2][27], addr, t[1][1])) return t[1];
    if(caml_call2(Camlboy_lib_Uints[2][27], addr, t[2][1])) return t[2];
    if(caml_call2(Camlboy_lib_Uints[2][27], addr, t[3][1])) return t[3];
    if(caml_call2(Camlboy_lib_Uints[2][27], addr, t[4][1])) return t[4];
    if(caml_call2(Camlboy_lib_Uints[2][27], addr, t[6][1])) return t[6];
    if(caml_call2(Camlboy_lib_Uints[2][27], addr, t[5][1])) return t[5];
    var
     _b_ = caml_call1(Camlboy_lib_Uints[2][1], addr),
     _c_ = caml_call2(Stdlib_Printf[4], _a_, _b_);
    throw caml_maybe_attach_backtrace([0, Stdlib[6], _c_], 1);
   }
   function read_byte(t, addr){
    var r = register_of_addr(t, addr);
    return caml_call1(Camlboy_lib_Uints[1][20], r[2]);
   }
   function write_byte(t, addr, data){
    if(caml_call2(Camlboy_lib_Uints[2][27], addr, t[3][1])){t[3][2] = 0; return 0;}
    var r = register_of_addr(t, addr);
    r[2] = caml_call1(Camlboy_lib_Uints[1][21], data);
    return 0;
   }
   var
    Camlboy_lib_Lcd_position =
      [0,
       create,
       get_scy,
       get_scx,
       get_ly,
       incr_ly,
       reset_ly,
       get_lyc,
       get_wy,
       get_wx,
       read_byte,
       write_byte,
       accepts];
   runtime.caml_register_global
    (5, Camlboy_lib_Lcd_position, "Camlboy_lib__Lcd_position");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Camlboy_lib__Lcd_control
//# unitInfo: Requires: Camlboy_lib__Bit_util, Camlboy_lib__Uints, Stdlib
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Address_out_of_bounds$1 = "Address out of bounds",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call8(f, a0, a1, a2, a3, a4, a5, a6, a7){
    return (f.l >= 0 ? f.l : f.l = f.length) === 8
            ? f(a0, a1, a2, a3, a4, a5, a6, a7)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Camlboy_lib_Bit_util = global_data.Camlboy_lib__Bit_util,
    Stdlib = global_data.Stdlib,
    Camlboy_lib_Uints = global_data.Camlboy_lib__Uints,
    cst_Address_out_of_bounds = cst_Address_out_of_bounds$1,
    cst_Address_out_of_bounds$0 = cst_Address_out_of_bounds$1;
   function create(addr){return [0, addr, 1, 0, 0, 0, 0, 1056320505, 0, 1];}
   function get_lcd_enable(t){return t[2];}
   function get_window_tile_map_area(t){return t[3];}
   function get_window_enable(t){return t[4];}
   function get_tile_data_area(t){return t[5];}
   function get_bg_tile_map_area(t){return t[6];}
   function get_obj_size(t){return t[7];}
   function get_obj_enable(t){return t[8];}
   function get_bg_window_display(t){return t[9];}
   function accepts(t, addr){
    return caml_call2(Camlboy_lib_Uints[2][27], addr, t[1]);
   }
   function read_byte(t, addr){
    if(accepts(t, addr))
     return caml_call8
             (Camlboy_lib_Bit_util[2],
              t[2],
              1 === t[3] ? 1 : 0,
              t[4],
              0 === t[5] ? 1 : 0,
              1 === t[6] ? 1 : 0,
              -663730172 === t[7] ? 1 : 0,
              t[8],
              t[9]);
    throw caml_maybe_attach_backtrace
           ([0, Stdlib[6], cst_Address_out_of_bounds], 1);
   }
   function write_byte(t, addr, data){
    if(! accepts(t, addr))
     throw caml_maybe_attach_backtrace
            ([0, Stdlib[6], cst_Address_out_of_bounds$0], 1);
    var
     match = caml_call1(Camlboy_lib_Bit_util[1], data),
     b0 = match[8],
     b1 = match[7],
     b2 = match[6],
     b3 = match[5],
     b4 = match[4],
     b5 = match[3],
     b6 = match[2],
     b7 = match[1];
    t[2] = b7;
    var _a_ = b6 ? 1 : 0;
    t[3] = _a_;
    t[4] = b5;
    var _b_ = b4 ? 0 : 1;
    t[5] = _b_;
    var _c_ = b3 ? 1 : 0;
    t[6] = _c_;
    var _d_ = b2 ? -663730172 : 1056320505;
    t[7] = _d_;
    t[8] = b1;
    t[9] = b0;
    return 0;
   }
   var
    Camlboy_lib_Lcd_control =
      [0,
       create,
       get_lcd_enable,
       get_window_tile_map_area,
       get_window_enable,
       get_tile_data_area,
       get_bg_tile_map_area,
       get_obj_size,
       get_obj_enable,
       get_bg_window_display,
       read_byte,
       write_byte,
       accepts];
   runtime.caml_register_global
    (5, Camlboy_lib_Lcd_control, "Camlboy_lib__Lcd_control");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Camlboy_lib__Joypad
//# unitInfo: Requires: Camlboy_lib__Bit_util, Camlboy_lib__Interrupt_controller, Camlboy_lib__Uints
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call8(f, a0, a1, a2, a3, a4, a5, a6, a7){
    return (f.l >= 0 ? f.l : f.l = f.length) === 8
            ? f(a0, a1, a2, a3, a4, a5, a6, a7)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Camlboy_lib_Bit_util = global_data.Camlboy_lib__Bit_util,
    Camlboy_lib_Uints = global_data.Camlboy_lib__Uints,
    Camlboy_lib_Interrupt_controll =
      global_data.Camlboy_lib__Interrupt_controller;
   function create(addr, ic){return [0, addr, ic, 1, 1, 1, 1, 1, 1, 1, 1, 1];}
   function press(t, key){
    caml_call2(Camlboy_lib_Interrupt_controll[2], t[2], 4);
    switch(key){
      case 0:
       t[4] = 0; return 0;
      case 1:
       t[5] = 0; return 0;
      case 2:
       t[6] = 0; return 0;
      case 3:
       t[7] = 0; return 0;
      case 4:
       t[8] = 0; return 0;
      case 5:
       t[9] = 0; return 0;
      case 6:
       t[10] = 0; return 0;
      default: t[11] = 0; return 0;
    }
   }
   function release(t, param){
    switch(param){
      case 0:
       t[4] = 1; return 0;
      case 1:
       t[5] = 1; return 0;
      case 2:
       t[6] = 1; return 0;
      case 3:
       t[7] = 1; return 0;
      case 4:
       t[8] = 1; return 0;
      case 5:
       t[9] = 1; return 0;
      case 6:
       t[10] = 1; return 0;
      default: t[11] = 1; return 0;
    }
   }
   function read_byte(t, param){
    switch(t[3]){
      case 0:
       return caml_call1(Camlboy_lib_Uints[1][20], 15);
      case 1:
       var t$0 = t[7], t$1 = t[6], t$2 = t[5], t$3 = t[4];
       return caml_call8
               (Camlboy_lib_Bit_util[2],
                1,
                1,
                0,
                1,
                1 === t$3 ? 1 : 0,
                1 === t$2 ? 1 : 0,
                1 === t$1 ? 1 : 0,
                1 === t$0 ? 1 : 0);
      default:
       var t$4 = t[11], t$5 = t[10], t$6 = t[9], t$7 = t[8];
       return caml_call8
               (Camlboy_lib_Bit_util[2],
                1,
                1,
                1,
                0,
                1 === t$7 ? 1 : 0,
                1 === t$6 ? 1 : 0,
                1 === t$5 ? 1 : 0,
                1 === t$4 ? 1 : 0);
    }
   }
   function write_byte(t, param, data){
    var
     match = caml_call1(Camlboy_lib_Bit_util[1], data),
     b4 = match[4],
     b5 = match[3];
    return b4 ? b5 ? (t[3] = 0, 0) : (t[3] = 2, 0) : (t[3] = 1, 0);
   }
   function accepts(t, addr){return runtime.caml_equal(addr, t[1]);}
   var
    Camlboy_lib_Joypad =
      [0, create, press, release, read_byte, write_byte, accepts];
   runtime.caml_register_global(3, Camlboy_lib_Joypad, "Camlboy_lib__Joypad");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Camlboy_lib__Instruction
//# unitInfo: Requires: Camlboy_lib__Registers, Camlboy_lib__Uints, Stdlib__Printf
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_s = "(%s)",
    cst$0 = ", ",
    cst_ADD = "ADD ",
    cst_ADD_s_s = "ADD %s, %s",
    cst_CALL = "CALL ",
    cst_CCF = "CCF",
    cst_CPL = "CPL",
    cst_DAA = "DAA",
    cst_DEC = "DEC ",
    cst_DEC_s = "DEC %s",
    cst_DI = "DI",
    cst_EI = "EI",
    cst_HALT = "HALT",
    cst_INC = "INC ",
    cst_INC_s = "INC %s",
    cst_JP = "JP ",
    cst_JR = "JR ",
    cst_LD = "LD ",
    cst_LD_s_s = "LD %s, %s",
    cst_NOP = "NOP",
    cst_RETI = "RETI",
    cst_RLA = "RLA",
    cst_RLCA = "RLCA",
    cst_RRA = "RRA",
    cst_RRCA = "RRCA",
    cst_SCF = "SCF",
    cst_STOP = "STOP";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "",
    Camlboy_lib_Uints = global_data.Camlboy_lib__Uints,
    Camlboy_lib_Registers = global_data.Camlboy_lib__Registers,
    Stdlib_Printf = global_data.Stdlib__Printf,
    cst_FF00_C = "($FF00+C)",
    cst_HL = "(HL+)",
    cst_HL$0 = "(HL-)",
    cst_SP = "SP",
    _a_ = [0, [12, 40, [2, 0, [12, 41, 0]]], cst_s],
    _b_ = [0, [12, 40, [2, 0, [12, 41, 0]]], cst_s],
    _c_ = [0, [11, "($FF00+", [2, 0, [12, 41, 0]]], "($FF00+%s)"],
    _d_ = [0, [11, "SP-", [2, 0, 0]], "SP-%s"],
    _e_ = [0, [11, "SP+", [2, 0, 0]], "SP+%s"],
    cst_NZ = "NZ",
    cst_Z = "Z",
    cst_NC = "NC",
    cst_C = "C",
    _f_ = [0, [11, cst_DAA, 0], cst_DAA],
    _g_ = [0, [11, cst_CPL, 0], cst_CPL],
    _h_ = [0, [11, cst_CCF, 0], cst_CCF],
    _i_ = [0, [11, cst_SCF, 0], cst_SCF],
    _j_ = [0, [11, cst_NOP, 0], cst_NOP],
    _k_ = [0, [11, cst_HALT, 0], cst_HALT],
    _l_ = [0, [11, cst_STOP, 0], cst_STOP],
    _m_ = [0, [11, cst_DI, 0], cst_DI],
    _n_ = [0, [11, cst_EI, 0], cst_EI],
    _o_ = [0, [11, cst_RLCA, 0], cst_RLCA],
    _p_ = [0, [11, cst_RLA, 0], cst_RLA],
    _q_ = [0, [11, cst_RRCA, 0], cst_RRCA],
    _r_ = [0, [11, cst_RRA, 0], cst_RRA],
    _s_ = [0, [11, cst_RETI, 0], cst_RETI],
    _t_ = [0, [11, cst_LD, [2, 0, [11, cst$0, [2, 0, 0]]]], cst_LD_s_s],
    _u_ = [0, [11, cst_LD, [2, 0, [11, cst$0, [2, 0, 0]]]], cst_LD_s_s],
    _v_ = [0, [11, cst_ADD, [2, 0, [11, cst$0, [2, 0, 0]]]], cst_ADD_s_s],
    _w_ = [0, [11, cst_ADD, [2, 0, [11, cst$0, [2, 0, 0]]]], cst_ADD_s_s],
    _x_ = [0, [11, "ADD SP, ", [2, 0, 0]], "ADD SP, %s"],
    _y_ = [0, [11, "ADC ", [2, 0, [11, cst$0, [2, 0, 0]]]], "ADC %s, %s"],
    _z_ = [0, [11, "SUB ", [2, 0, [11, cst$0, [2, 0, 0]]]], "SUB %s, %s"],
    _A_ = [0, [11, "SBC ", [2, 0, [11, cst$0, [2, 0, 0]]]], "SBC %s, %s"],
    _B_ = [0, [11, "AND ", [2, 0, [11, cst$0, [2, 0, 0]]]], "AND %s, %s"],
    _C_ = [0, [11, "OR ", [2, 0, [11, cst$0, [2, 0, 0]]]], "OR %s, %s"],
    _D_ = [0, [11, "XOR ", [2, 0, [11, cst$0, [2, 0, 0]]]], "XOR %s, %s"],
    _E_ = [0, [11, "CP ", [2, 0, [11, cst$0, [2, 0, 0]]]], "CP %s, %s"],
    _F_ = [0, [11, cst_INC, [2, 0, 0]], cst_INC_s],
    _G_ = [0, [11, cst_INC, [2, 0, 0]], cst_INC_s],
    _H_ = [0, [11, cst_DEC, [2, 0, 0]], cst_DEC_s],
    _I_ = [0, [11, cst_DEC, [2, 0, 0]], cst_DEC_s],
    _J_ = [0, [11, "SWAP ", [2, 0, 0]], "SWAP %s"],
    _K_ = [0, [11, "RLC ", [2, 0, 0]], "RLC %s"],
    _L_ = [0, [11, "RL ", [2, 0, 0]], "RL %s"],
    _M_ = [0, [11, "RRC ", [2, 0, 0]], "RRC %s"],
    _N_ = [0, [11, "RR ", [2, 0, 0]], "RR %s"],
    _O_ = [0, [11, "SLA ", [2, 0, 0]], "SLA %s"],
    _P_ = [0, [11, "SRA ", [2, 0, 0]], "SRA %s"],
    _Q_ = [0, [11, "SRL ", [2, 0, 0]], "SRL %s"],
    _R_ =
      [0, [11, "BIT ", [4, 0, 0, 0, [11, cst$0, [2, 0, 0]]]], "BIT %d, %s"],
    _S_ =
      [0, [11, "SET ", [4, 0, 0, 0, [11, cst$0, [2, 0, 0]]]], "SET %d, %s"],
    _T_ =
      [0, [11, "RES ", [4, 0, 0, 0, [11, cst$0, [2, 0, 0]]]], "RES %d, %s"],
    _U_ = [0, [11, "PUSH ", [2, 0, 0]], "PUSH %s"],
    _V_ = [0, [11, "POP ", [2, 0, 0]], "POP %s"],
    _W_ = [0, [11, cst_JP, [2, 0, [11, cst$0, [2, 0, 0]]]], "JP %s, %s"],
    _X_ = [0, [11, cst_JP, [2, 0, 0]], "JP %s"],
    _Y_ = [0, [11, cst_JR, [2, 0, [11, cst$0, [2, 0, 0]]]], "JR %s, %s"],
    _Z_ = [0, [11, cst_JR, [2, 0, 0]], "JR %s"],
    ___ = [0, [11, cst_CALL, [2, 0, [11, cst$0, [2, 0, 0]]]], "CALL %s, %s"],
    _$_ = [0, [11, cst_CALL, [2, 0, 0]], "CALL %s"],
    _aa_ = [0, [11, "RST ", [2, 0, 0]], "RST %s"],
    _ab_ = [0, [11, "RET ", [2, 0, 0]], "RET %s"];
   function show(t){
    function show_arg(param){
     if(typeof param === "number")
      switch(param){
        case 0:
         return cst_FF00_C;
        case 1:
         return cst_HL;
        case 2:
         return cst_HL$0;
        default: return cst_SP;
      }
     switch(param[0]){
       case 0:
        var n = param[1]; return caml_call1(Camlboy_lib_Uints[1][1], n);
       case 1:
        var n$0 = param[1]; return caml_call1(Camlboy_lib_Uints[2][1], n$0);
       case 4:
        var r = param[1]; return caml_call1(Camlboy_lib_Registers[12], r);
       case 5:
        var rr = param[1]; return caml_call1(Camlboy_lib_Registers[13], rr);
       case 6:
        var
         rr$0 = param[1],
         _a2_ = caml_call1(Camlboy_lib_Registers[13], rr$0);
        return caml_call2(Stdlib_Printf[4], _b_, _a2_);
       case 7:
        var n$2 = param[1], _a3_ = caml_call1(Camlboy_lib_Uints[1][1], n$2);
        return caml_call2(Stdlib_Printf[4], _c_, _a3_);
       case 8:
        var n$3 = param[1];
        if(caml_call1(Camlboy_lib_Uints[3][4], n$3)){
         var
          _a4_ = caml_call1(Camlboy_lib_Uints[3][5], n$3),
          _a5_ = caml_call1(Camlboy_lib_Uints[3][6], _a4_);
         return caml_call2(Stdlib_Printf[4], _d_, _a5_);
        }
        var _a6_ = caml_call1(Camlboy_lib_Uints[3][6], n$3);
        return caml_call2(Stdlib_Printf[4], _e_, _a6_);
       default:
        var n$1 = param[1], _a1_ = caml_call1(Camlboy_lib_Uints[2][1], n$1);
        return caml_call2(Stdlib_Printf[4], _a_, _a1_);
     }
    }
    function show_condition(param){
     switch(param){
       case 0:
        return cst;
       case 1:
        return cst_NZ;
       case 2:
        return cst_Z;
       case 3:
        return cst_NC;
       default: return cst_C;
     }
    }
    if(typeof t === "number")
     switch(t){
       case 0:
        return caml_call1(Stdlib_Printf[4], _f_);
       case 1:
        return caml_call1(Stdlib_Printf[4], _g_);
       case 2:
        return caml_call1(Stdlib_Printf[4], _h_);
       case 3:
        return caml_call1(Stdlib_Printf[4], _i_);
       case 4:
        return caml_call1(Stdlib_Printf[4], _j_);
       case 5:
        return caml_call1(Stdlib_Printf[4], _k_);
       case 6:
        return caml_call1(Stdlib_Printf[4], _l_);
       case 7:
        return caml_call1(Stdlib_Printf[4], _m_);
       case 8:
        return caml_call1(Stdlib_Printf[4], _n_);
       case 9:
        return caml_call1(Stdlib_Printf[4], _o_);
       case 10:
        return caml_call1(Stdlib_Printf[4], _p_);
       case 11:
        return caml_call1(Stdlib_Printf[4], _q_);
       case 12:
        return caml_call1(Stdlib_Printf[4], _r_);
       default: return caml_call1(Stdlib_Printf[4], _s_);
     }
    switch(t[0]){
      case 0:
       var y = t[2], x = t[1], _ac_ = show_arg(y), _ad_ = show_arg(x);
       return caml_call3(Stdlib_Printf[4], _t_, _ad_, _ac_);
      case 1:
       var y$0 = t[2], x$0 = t[1], _ae_ = show_arg(y$0), _af_ = show_arg(x$0);
       return caml_call3(Stdlib_Printf[4], _u_, _af_, _ae_);
      case 2:
       var y$1 = t[2], x$1 = t[1], _ag_ = show_arg(y$1), _ah_ = show_arg(x$1);
       return caml_call3(Stdlib_Printf[4], _v_, _ah_, _ag_);
      case 3:
       var y$2 = t[2], x$2 = t[1], _ai_ = show_arg(y$2), _aj_ = show_arg(x$2);
       return caml_call3(Stdlib_Printf[4], _w_, _aj_, _ai_);
      case 4:
       var y$3 = t[1], _ak_ = caml_call1(Camlboy_lib_Uints[3][6], y$3);
       return caml_call2(Stdlib_Printf[4], _x_, _ak_);
      case 5:
       var y$4 = t[2], x$3 = t[1], _al_ = show_arg(y$4), _am_ = show_arg(x$3);
       return caml_call3(Stdlib_Printf[4], _y_, _am_, _al_);
      case 6:
       var y$5 = t[2], x$4 = t[1], _an_ = show_arg(y$5), _ao_ = show_arg(x$4);
       return caml_call3(Stdlib_Printf[4], _z_, _ao_, _an_);
      case 7:
       var y$6 = t[2], x$5 = t[1], _ap_ = show_arg(y$6), _aq_ = show_arg(x$5);
       return caml_call3(Stdlib_Printf[4], _A_, _aq_, _ap_);
      case 8:
       var y$7 = t[2], x$6 = t[1], _ar_ = show_arg(y$7), _as_ = show_arg(x$6);
       return caml_call3(Stdlib_Printf[4], _B_, _as_, _ar_);
      case 9:
       var y$8 = t[2], x$7 = t[1], _at_ = show_arg(y$8), _au_ = show_arg(x$7);
       return caml_call3(Stdlib_Printf[4], _C_, _au_, _at_);
      case 10:
       var y$9 = t[2], x$8 = t[1], _av_ = show_arg(y$9), _aw_ = show_arg(x$8);
       return caml_call3(Stdlib_Printf[4], _D_, _aw_, _av_);
      case 11:
       var
        y$10 = t[2],
        x$9 = t[1],
        _ax_ = show_arg(y$10),
        _ay_ = show_arg(x$9);
       return caml_call3(Stdlib_Printf[4], _E_, _ay_, _ax_);
      case 12:
       var x$10 = t[1], _az_ = show_arg(x$10);
       return caml_call2(Stdlib_Printf[4], _F_, _az_);
      case 13:
       var x$11 = t[1], _aA_ = show_arg(x$11);
       return caml_call2(Stdlib_Printf[4], _G_, _aA_);
      case 14:
       var x$12 = t[1], _aB_ = show_arg(x$12);
       return caml_call2(Stdlib_Printf[4], _H_, _aB_);
      case 15:
       var x$13 = t[1], _aC_ = show_arg(x$13);
       return caml_call2(Stdlib_Printf[4], _I_, _aC_);
      case 16:
       var x$14 = t[1], _aD_ = show_arg(x$14);
       return caml_call2(Stdlib_Printf[4], _J_, _aD_);
      case 17:
       var x$15 = t[1], _aE_ = show_arg(x$15);
       return caml_call2(Stdlib_Printf[4], _K_, _aE_);
      case 18:
       var x$16 = t[1], _aF_ = show_arg(x$16);
       return caml_call2(Stdlib_Printf[4], _L_, _aF_);
      case 19:
       var x$17 = t[1], _aG_ = show_arg(x$17);
       return caml_call2(Stdlib_Printf[4], _M_, _aG_);
      case 20:
       var x$18 = t[1], _aH_ = show_arg(x$18);
       return caml_call2(Stdlib_Printf[4], _N_, _aH_);
      case 21:
       var x$19 = t[1], _aI_ = show_arg(x$19);
       return caml_call2(Stdlib_Printf[4], _O_, _aI_);
      case 22:
       var x$20 = t[1], _aJ_ = show_arg(x$20);
       return caml_call2(Stdlib_Printf[4], _P_, _aJ_);
      case 23:
       var x$21 = t[1], _aK_ = show_arg(x$21);
       return caml_call2(Stdlib_Printf[4], _Q_, _aK_);
      case 24:
       var x$22 = t[2], n = t[1], _aL_ = show_arg(x$22);
       return caml_call3(Stdlib_Printf[4], _R_, n, _aL_);
      case 25:
       var x$23 = t[2], n$0 = t[1], _aM_ = show_arg(x$23);
       return caml_call3(Stdlib_Printf[4], _S_, n$0, _aM_);
      case 26:
       var x$24 = t[2], n$1 = t[1], _aN_ = show_arg(x$24);
       return caml_call3(Stdlib_Printf[4], _T_, n$1, _aN_);
      case 27:
       var rr = t[1], _aO_ = caml_call1(Camlboy_lib_Registers[13], rr);
       return caml_call2(Stdlib_Printf[4], _U_, _aO_);
      case 28:
       var rr$0 = t[1], _aP_ = caml_call1(Camlboy_lib_Registers[13], rr$0);
       return caml_call2(Stdlib_Printf[4], _V_, _aP_);
      case 29:
       var x$25 = t[2], c = t[1];
       if(c){
        var _aQ_ = show_arg(x$25), _aR_ = show_condition(c);
        return caml_call3(Stdlib_Printf[4], _W_, _aR_, _aQ_);
       }
       var _aS_ = show_arg(x$25);
       return caml_call2(Stdlib_Printf[4], _X_, _aS_);
      case 30:
       var x$26 = t[2], c$0 = t[1];
       if(c$0){
        var
         _aT_ = caml_call1(Camlboy_lib_Uints[3][6], x$26),
         _aU_ = show_condition(c$0);
        return caml_call3(Stdlib_Printf[4], _Y_, _aU_, _aT_);
       }
       var _aV_ = caml_call1(Camlboy_lib_Uints[3][6], x$26);
       return caml_call2(Stdlib_Printf[4], _Z_, _aV_);
      case 31:
       var x$27 = t[2], c$1 = t[1];
       if(c$1){
        var
         _aW_ = caml_call1(Camlboy_lib_Uints[2][1], x$27),
         _aX_ = show_condition(c$1);
        return caml_call3(Stdlib_Printf[4], ___, _aX_, _aW_);
       }
       var _aY_ = caml_call1(Camlboy_lib_Uints[2][1], x$27);
       return caml_call2(Stdlib_Printf[4], _$_, _aY_);
      case 32:
       var x$28 = t[1], _aZ_ = caml_call1(Camlboy_lib_Uints[2][1], x$28);
       return caml_call2(Stdlib_Printf[4], _aa_, _aZ_);
      default:
       var c$2 = t[1], _a0_ = show_condition(c$2);
       return caml_call2(Stdlib_Printf[4], _ab_, _a0_);
    }
   }
   var Camlboy_lib_Instruction = [0, show];
   runtime.caml_register_global
    (68, Camlboy_lib_Instruction, "Camlboy_lib__Instruction");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Camlboy_lib__Inst_info
(function(globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Camlboy_lib_Inst_info = [0];
   runtime.caml_register_global
    (0, Camlboy_lib_Inst_info, "Camlboy_lib__Inst_info");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Camlboy_lib__Gpu
//# unitInfo: Requires: Camlboy_lib__Gpu_mode, Camlboy_lib__Interrupt_controller, Camlboy_lib__Lcd_control, Camlboy_lib__Lcd_position, Camlboy_lib__Lcd_stat, Camlboy_lib__Oam_table, Camlboy_lib__Pallete, Camlboy_lib__Tile_data, Camlboy_lib__Tile_map, Camlboy_lib__Uints, Stdlib, Stdlib__ArrayLabels, Stdlib__Int, Stdlib__Printf
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Address_out_of_range = "Address out of range: ",
    cst_Address_out_of_range_s = "Address out of range: %s",
    caml_check_bound = runtime.caml_check_bound,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) === 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) === 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "-",
    partial = [12, 41, 0],
    Camlboy_lib_Interrupt_controll =
      global_data.Camlboy_lib__Interrupt_controller,
    Camlboy_lib_Lcd_stat = global_data.Camlboy_lib__Lcd_stat,
    Camlboy_lib_Uints = global_data.Camlboy_lib__Uints,
    Camlboy_lib_Lcd_position = global_data.Camlboy_lib__Lcd_position,
    Camlboy_lib_Gpu_mode = global_data.Camlboy_lib__Gpu_mode,
    Stdlib_Printf = global_data.Stdlib__Printf,
    Camlboy_lib_Oam_table = global_data.Camlboy_lib__Oam_table,
    Camlboy_lib_Tile_data = global_data.Camlboy_lib__Tile_data,
    Camlboy_lib_Tile_map = global_data.Camlboy_lib__Tile_map,
    Camlboy_lib_Pallete = global_data.Camlboy_lib__Pallete,
    Camlboy_lib_Lcd_control = global_data.Camlboy_lib__Lcd_control,
    Stdlib = global_data.Stdlib,
    Stdlib_ArrayLabels = global_data.Stdlib__ArrayLabels,
    Stdlib_Int = global_data.Stdlib__Int;
   function handle_ly_eq_lyc(t){
    var
     ly = caml_call1(Camlboy_lib_Lcd_position[4], t[9]),
     lyc = caml_call1(Camlboy_lib_Lcd_position[7], t[9]),
     ly_eq_lyc = ly === lyc ? 1 : 0;
    caml_call2(Camlboy_lib_Lcd_stat[4], t[7], ly_eq_lyc);
    var
     _R_ =
       ly_eq_lyc ? caml_call2(Camlboy_lib_Lcd_stat[2], t[7], 0) : ly_eq_lyc;
    return _R_ ? caml_call2(Camlboy_lib_Interrupt_controll[2], t[10], 1) : _R_;
   }
   var
    screen_w = 160,
    screen_h = 144,
    _a_ =
      [0,
       [11, cst_Address_out_of_range, [2, 0, 0]],
       cst_Address_out_of_range_s],
    _b_ =
      [0,
       [11, cst_Address_out_of_range, [2, 0, 0]],
       cst_Address_out_of_range_s],
    _c_ =
      [0,
       [11,
        "mode=",
        [4,
         0,
         0,
         0,
         [11,
          ", mcycles=",
          [4,
           0,
           [0, 1, 4],
           0,
           [11,
            ", ly=",
            [4,
             0,
             [0, 1, 3],
             0,
             [11,
              ", lcd_stat=",
              [2, 0, [11, ", interrupt=", [2, 0, partial]]]]]]]]]],
       "mode=%d, mcycles=%4d, ly=%3d, lcd_stat=%s, interrupt=%s)"];
   function create
   (tile_data,
    tile_map,
    oam,
    bgp,
    obp0,
    obp1,
    lcd_stat,
    lcd_control,
    lcd_position,
    ic){
    var
     t =
       [0,
        tile_data,
        tile_map,
        oam,
        bgp,
        obp0,
        obp1,
        lcd_stat,
        lcd_control,
        lcd_position,
        ic,
        0,
        0,
        caml_call3(Stdlib_ArrayLabels[3], screen_h, screen_w, -588596599)];
    handle_ly_eq_lyc(t);
    return t;
   }
   function get_frame_buffer(t){return t[13];}
   function run(t, mcycles){
    function incr_ly(t){
     caml_call1(Camlboy_lib_Lcd_position[5], t[9]);
     return caml_call1(Camlboy_lib_Lcd_position[4], t[9]);
    }
    switch(t[12]){
      case 0:
       t[11] = t[11] + mcycles | 0;
       switch(caml_call1(Camlboy_lib_Lcd_stat[5], t[7])){
         case 0:
          if(20 <= t[11]){
           t[11] = t[11] % 20 | 0;
           caml_call2(Camlboy_lib_Lcd_stat[6], t[7], 1);
          }
          return 0;
         case 1:
          if(43 <= t[11]){
           t[11] = t[11] % 43 | 0;
           caml_call2(Camlboy_lib_Lcd_stat[6], t[7], 2);
           if(caml_call2(Camlboy_lib_Lcd_stat[2], t[7], 3))
            caml_call2(Camlboy_lib_Interrupt_controll[2], t[10], 1);
           var ly = caml_call1(Camlboy_lib_Lcd_position[4], t[9]);
           if(caml_call1(Camlboy_lib_Lcd_control[9], t[8])){
            var
             tile_data_area = caml_call1(Camlboy_lib_Lcd_control[5], t[8]),
             scy = caml_call1(Camlboy_lib_Lcd_position[2], t[9]),
             scx = caml_call1(Camlboy_lib_Lcd_position[3], t[9]),
             y = (scy + ly | 0) % 256 | 0,
             bg_tile_map_area = caml_call1(Camlboy_lib_Lcd_control[6], t[8]),
             row_in_tile = y % 8 | 0,
             lx = [0, 0];
            for(;;){
             if(lx[1] >= 160) break;
             var
              x = (scx + lx[1] | 0) % 256 | 0,
              col_in_tile = x % 8 | 0,
              tile_index =
                caml_call4
                 (Camlboy_lib_Tile_map[2], t[2], bg_tile_map_area, y, x),
              tile_pixel_row =
                caml_call4
                 (Camlboy_lib_Tile_data[3],
                  t[1],
                  tile_data_area,
                  tile_index,
                  row_in_tile),
              len =
                0 < col_in_tile
                 ? 8 - col_in_tile | 0
                 : 8 <= (160 - lx[1] | 0) ? 8 : 160 - lx[1] | 0,
              _x_ = len - 1 | 0,
              _w_ = 0;
             if(_x_ >= 0){
              var i = _w_;
              for(;;){
               var
                _y_ = col_in_tile + i | 0,
                _z_ = caml_check_bound(tile_pixel_row, _y_)[1 + _y_],
                color = caml_call2(Camlboy_lib_Pallete[2], t[4], _z_),
                _A_ = lx[1] + i | 0;
               caml_check_bound(caml_check_bound(t[13], ly)[1 + ly], _A_)
                [1 + _A_]
               = color;
               var _B_ = i + 1 | 0;
               if(_x_ === i) break;
               i = _B_;
              }
             }
             lx[1] = lx[1] + len | 0;
            }
            if(caml_call1(Camlboy_lib_Lcd_control[4], t[8])){
             var
              wy = caml_call1(Camlboy_lib_Lcd_position[8], t[9]),
              wx = caml_call1(Camlboy_lib_Lcd_position[9], t[9]) - 7 | 0,
              _C_ = wy <= ly ? 1 : 0;
             if(_C_)
              var
               _D_ = ly <= (wy + 256 | 0) ? 1 : 0,
               _E_ = _D_ ? wx <= 160 ? 1 : 0 : _D_;
             else
              var _E_ = _C_;
             if(_E_){
              var
               window_tile_map_area =
                 caml_call1(Camlboy_lib_Lcd_control[3], t[8]),
               y_in_w = caml_call1(Stdlib_Int[4], ly - wy | 0),
               row_in_tile$0 = y_in_w % 8 | 0,
               wx$0 = 0 <= wx ? wx : 0,
               lx$0 = [0, wx$0];
              for(;;){
               if(lx$0[1] >= 160) break;
               var
                x_in_w = caml_call1(Stdlib_Int[4], lx$0[1] - wx | 0),
                tile_index$0 =
                  caml_call4
                   (Camlboy_lib_Tile_map[2],
                    t[2],
                    window_tile_map_area,
                    y_in_w,
                    x_in_w),
                tile_pixel_row$0 =
                  caml_call4
                   (Camlboy_lib_Tile_data[3],
                    t[1],
                    tile_data_area,
                    tile_index$0,
                    row_in_tile$0),
                len$0 = 8 <= (160 - lx$0[1] | 0) ? 8 : 160 - lx$0[1] | 0,
                _G_ = len$0 - 1 | 0,
                _F_ = 0;
               if(_G_ >= 0){
                var i$0 = _F_;
                for(;;){
                 var
                  _H_ = caml_check_bound(tile_pixel_row$0, i$0)[1 + i$0],
                  color$0 = caml_call2(Camlboy_lib_Pallete[2], t[4], _H_),
                  _I_ = lx$0[1] + i$0 | 0;
                 caml_check_bound(caml_check_bound(t[13], ly)[1 + ly], _I_)
                  [1 + _I_]
                 = color$0;
                 var _J_ = i$0 + 1 | 0;
                 if(_G_ === i$0) break;
                 i$0 = _J_;
                }
               }
               lx$0[1] = lx$0[1] + len$0 | 0;
              }
             }
            }
           }
           if(caml_call1(Camlboy_lib_Lcd_control[8], t[8])){
            var
             y_sprite_size =
               1056320505 <= caml_call1(Camlboy_lib_Lcd_control[7], t[8])
                ? 8
                : 16,
             _K_ = caml_call1(Camlboy_lib_Oam_table[3], t[3]);
            caml_call1
             (caml_call1
               (Stdlib_ArrayLabels[13],
                function(sprite){
                 var
                  _L_ = sprite[1] <= ly ? 1 : 0,
                  _M_ =
                    _L_
                     ? ly <= ((sprite[1] + y_sprite_size | 0) - 1 | 0) ? 1 : 0
                     : _L_;
                 if(_M_){
                  var
                   row = ly - sprite[1] | 0,
                   pallete = 879375796 <= sprite[7] ? t[6] : t[5],
                   col = 0;
                  for(;;){
                   var lx = sprite[2] + col | 0;
                   a:
                   if(0 <= lx && 160 > lx){
                    var
                     _P_ = sprite[6] ? 7 - col | 0 : col,
                     _Q_ = sprite[5] ? (y_sprite_size - row | 0) - 1 | 0 : row,
                     color_id =
                       caml_call5
                        (Camlboy_lib_Tile_data[2], t[1], 0, sprite[3], _Q_, _P_);
                    if(color_id){
                     var
                      match = sprite[4],
                      match$0 =
                        caml_check_bound(caml_check_bound(t[13], ly)[1 + ly], lx)
                         [1 + lx];
                     b:
                     {
                      c:
                      if(486156037 <= match){
                       if
                        (-937474657 !== match$0
                         && -603547828 !== match$0 && -126317716 !== match$0)
                        break c;
                       break b;
                      }
                      var
                       color =
                         caml_call2(Camlboy_lib_Pallete[2], pallete, color_id);
                      caml_check_bound(caml_check_bound(t[13], ly)[1 + ly], lx)
                       [1 + lx]
                      = color;
                     }
                    }
                    break a;
                   }
                   var _O_ = col + 1 | 0;
                   if(7 === col){var _N_ = 0; break;}
                   col = _O_;
                  }
                 }
                 else
                  var _N_ = _M_;
                 return _N_;
                }),
              _K_);
           }
          }
          return 0;
         case 2:
          if(51 <= t[11]){
           t[11] = t[11] % 51 | 0;
           var ly$0 = incr_ly(t);
           handle_ly_eq_lyc(t);
           if(ly$0 === 144){
            caml_call2(Camlboy_lib_Lcd_stat[6], t[7], 3);
            if(caml_call2(Camlboy_lib_Lcd_stat[2], t[7], 2))
             caml_call2(Camlboy_lib_Interrupt_controll[2], t[10], 1);
            caml_call2(Camlboy_lib_Interrupt_controll[2], t[10], 0);
           }
           else{
            caml_call2(Camlboy_lib_Lcd_stat[6], t[7], 0);
            if(caml_call2(Camlboy_lib_Lcd_stat[2], t[7], 1))
             caml_call2(Camlboy_lib_Interrupt_controll[2], t[10], 1);
           }
          }
          return 0;
         default:
          if(t[11] < 114) return 0;
          t[11] = t[11] % 114 | 0;
          var ly$1 = incr_ly(t);
          handle_ly_eq_lyc(t);
          if(154 > ly$1) return 0;
          caml_call1(Camlboy_lib_Lcd_position[6], t[9]);
          handle_ly_eq_lyc(t);
          caml_call2(Camlboy_lib_Lcd_stat[6], t[7], 0);
          if(caml_call2(Camlboy_lib_Lcd_stat[2], t[7], 1))
           caml_call2(Camlboy_lib_Interrupt_controll[2], t[10], 1);
          return [0, t[13]];
       }
      case 1:
       return 0;
      default:
       t[11] = t[11] + mcycles | 0;
       if(51 <= t[11]){
        t[11] = t[11] % 51 | 0;
        t[12] = 0;
        handle_ly_eq_lyc(t);
        caml_call2(Camlboy_lib_Lcd_stat[6], t[7], 0);
        if(caml_call2(Camlboy_lib_Lcd_stat[2], t[7], 1))
         caml_call2(Camlboy_lib_Interrupt_controll[2], t[10], 1);
       }
       return 0;
    }
   }
   function accepts(t, addr){
    var _n_ = caml_call2(Camlboy_lib_Tile_map[5], t[2], addr);
    if(_n_)
     var _o_ = _n_;
    else{
     var _p_ = caml_call2(Camlboy_lib_Tile_data[8], t[1], addr);
     if(_p_)
      var _o_ = _p_;
     else{
      var _q_ = caml_call2(Camlboy_lib_Oam_table[7], t[3], addr);
      if(_q_)
       var _o_ = _q_;
      else{
       var _r_ = caml_call2(Camlboy_lib_Pallete[5], t[4], addr);
       if(_r_)
        var _o_ = _r_;
       else{
        var _s_ = caml_call2(Camlboy_lib_Pallete[5], t[5], addr);
        if(_s_)
         var _o_ = _s_;
        else{
         var _t_ = caml_call2(Camlboy_lib_Pallete[5], t[6], addr);
         if(_t_)
          var _o_ = _t_;
         else{
          var _u_ = caml_call2(Camlboy_lib_Lcd_stat[10], t[7], addr);
          if(_u_)
           var _o_ = _u_;
          else{
           var _v_ = caml_call2(Camlboy_lib_Lcd_control[12], t[8], addr);
           if(! _v_)
            return caml_call2(Camlboy_lib_Lcd_position[12], t[9], addr);
           var _o_ = _v_;
          }
         }
        }
       }
      }
     }
    }
    return _o_;
   }
   function read_byte(t, addr){
    if(caml_call2(Camlboy_lib_Tile_data[8], t[1], addr))
     return 1 === caml_call1(Camlboy_lib_Lcd_stat[5], t[7])
             ? caml_call1(Camlboy_lib_Uints[1][20], 255)
             : caml_call2(Camlboy_lib_Tile_data[6], t[1], addr);
    if(caml_call2(Camlboy_lib_Tile_map[5], t[2], addr))
     return 1 === caml_call1(Camlboy_lib_Lcd_stat[5], t[7])
             ? caml_call1(Camlboy_lib_Uints[1][20], 255)
             : caml_call2(Camlboy_lib_Tile_map[3], t[2], addr);
    if(caml_call2(Camlboy_lib_Oam_table[7], t[3], addr))
     return 2 <= caml_call1(Camlboy_lib_Lcd_stat[5], t[7])
             ? caml_call2(Camlboy_lib_Oam_table[5], t[3], addr)
             : caml_call1(Camlboy_lib_Uints[1][20], 255);
    if(caml_call2(Camlboy_lib_Pallete[5], t[4], addr))
     return caml_call2(Camlboy_lib_Pallete[3], t[4], addr);
    if(caml_call2(Camlboy_lib_Pallete[5], t[5], addr))
     return caml_call2(Camlboy_lib_Pallete[3], t[5], addr);
    if(caml_call2(Camlboy_lib_Pallete[5], t[6], addr))
     return caml_call2(Camlboy_lib_Pallete[3], t[6], addr);
    if(caml_call2(Camlboy_lib_Lcd_stat[10], t[7], addr))
     return caml_call2(Camlboy_lib_Lcd_stat[8], t[7], addr);
    if(caml_call2(Camlboy_lib_Lcd_control[12], t[8], addr))
     return caml_call2(Camlboy_lib_Lcd_control[10], t[8], addr);
    if(caml_call2(Camlboy_lib_Lcd_position[12], t[9], addr))
     return caml_call2(Camlboy_lib_Lcd_position[10], t[9], addr);
    var
     _l_ = caml_call1(Camlboy_lib_Uints[2][1], addr),
     _m_ = caml_call2(Stdlib_Printf[4], _a_, _l_);
    throw caml_maybe_attach_backtrace([0, Stdlib[6], _m_], 1);
   }
   function write_byte(t, addr, data){
    if(caml_call2(Camlboy_lib_Tile_data[8], t[1], addr))
     return 1 === caml_call1(Camlboy_lib_Lcd_stat[5], t[7])
             ? 0
             : caml_call3(Camlboy_lib_Tile_data[7], t[1], addr, data);
    if(caml_call2(Camlboy_lib_Tile_map[5], t[2], addr))
     return 1 === caml_call1(Camlboy_lib_Lcd_stat[5], t[7])
             ? 0
             : caml_call3(Camlboy_lib_Tile_map[4], t[2], addr, data);
    if(caml_call2(Camlboy_lib_Oam_table[7], t[3], addr))
     return 2 <= caml_call1(Camlboy_lib_Lcd_stat[5], t[7])
             ? caml_call3(Camlboy_lib_Oam_table[6], t[3], addr, data)
             : 0;
    if(caml_call2(Camlboy_lib_Pallete[5], t[4], addr))
     return caml_call3(Camlboy_lib_Pallete[4], t[4], addr, data);
    if(caml_call2(Camlboy_lib_Pallete[5], t[5], addr))
     return caml_call3(Camlboy_lib_Pallete[4], t[5], addr, data);
    if(caml_call2(Camlboy_lib_Pallete[5], t[6], addr))
     return caml_call3(Camlboy_lib_Pallete[4], t[6], addr, data);
    if(caml_call2(Camlboy_lib_Lcd_stat[10], t[7], addr))
     return caml_call3(Camlboy_lib_Lcd_stat[9], t[7], addr, data);
    if(! caml_call2(Camlboy_lib_Lcd_control[12], t[8], addr)){
     if(caml_call2(Camlboy_lib_Lcd_position[12], t[9], addr))
      return caml_call3(Camlboy_lib_Lcd_position[11], t[9], addr, data);
     var
      _j_ = caml_call1(Camlboy_lib_Uints[2][1], addr),
      _k_ = caml_call2(Stdlib_Printf[4], _b_, _j_);
     throw caml_maybe_attach_backtrace([0, Stdlib[6], _k_], 1);
    }
    var lcd_enable_before = caml_call1(Camlboy_lib_Lcd_control[2], t[8]);
    caml_call3(Camlboy_lib_Lcd_control[11], t[8], addr, data);
    var lcd_enable_after = caml_call1(Camlboy_lib_Lcd_control[2], t[8]);
    if(lcd_enable_before){
     if(! lcd_enable_after){
      caml_call1(Camlboy_lib_Lcd_position[6], t[9]);
      t[11] = 0;
      t[12] = 1;
      return caml_call2(Camlboy_lib_Lcd_stat[6], t[7], 2);
     }
    }
    else if(lcd_enable_after){
     t[12] = 2;
     t[11] = 18;
     return handle_ly_eq_lyc(t);
    }
    return 0;
   }
   function write_oam_with_offset(t, offset, data){
    return caml_call3(Camlboy_lib_Oam_table[4], t[3], offset, data);
   }
   function run$0(t, mcycles){
    var mode_before = caml_call1(Camlboy_lib_Lcd_stat[5], t[7]);
    run(t, mcycles);
    var mode_after = caml_call1(Camlboy_lib_Lcd_stat[5], t[7]);
    return mode_before !== mode_after ? 64931064 : -720694132;
   }
   function show(t){
    var match = caml_call1(Camlboy_lib_Interrupt_controll[5], t[10]);
    if(match)
     var
      int$0 = match[1],
      interrupt_str = caml_call1(Camlboy_lib_Interrupt_controll[10], int$0);
    else
     var interrupt_str = cst;
    var
     _d_ = caml_call1(Camlboy_lib_Lcd_stat[7], t[7]),
     _e_ = caml_call1(Camlboy_lib_Uints[1][1], _d_),
     _f_ = caml_call1(Camlboy_lib_Lcd_position[4], t[9]),
     _g_ = t[11],
     _h_ = caml_call1(Camlboy_lib_Lcd_stat[5], t[7]),
     _i_ = caml_call1(Camlboy_lib_Gpu_mode[1], _h_);
    return caml_call6
            (Stdlib_Printf[4], _c_, _i_, _g_, _f_, _e_, interrupt_str);
   }
   function get_mcycles_in_mode(t){return t[11];}
   var
    For_tests = [0, run$0, show, get_mcycles_in_mode],
    Camlboy_lib_Gpu =
      [0,
       create,
       get_frame_buffer,
       write_oam_with_offset,
       run,
       read_byte,
       write_byte,
       accepts,
       For_tests];
   runtime.caml_register_global(18, Camlboy_lib_Gpu, "Camlboy_lib__Gpu");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Camlboy_lib__Fetch_and_decode
//# unitInfo: Requires: Camlboy_lib__Uints, Stdlib, Stdlib__Printf
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Camlboy_lib_Uints = global_data.Camlboy_lib__Uints,
    Stdlib_Printf = global_data.Stdlib__Printf,
    Stdlib = global_data.Stdlib,
    _a_ =
      [0,
       [11, "Unrecognized opcode: 0x", [4, 6, [0, 2, 2], 0, 0]],
       "Unrecognized opcode: 0x%02x"],
    _b_ = [0, 1, 1],
    _c_ = [5, 1],
    _d_ = [0, 3, 3],
    _e_ = [0, [6, 1], [4, 0]],
    _f_ = [0, 2, 2],
    _g_ = [13, [5, 1]],
    _h_ = [0, 2, 2],
    _i_ = [12, [4, 1]],
    _j_ = [0, 1, 1],
    _k_ = [14, [4, 1]],
    _l_ = [0, 1, 1],
    _m_ = [4, 1],
    _n_ = [0, 2, 2],
    _o_ = [0, 1, 1],
    _p_ = [0, 5, 5],
    _q_ = [3, [5, 3], [5, 1]],
    _r_ = [0, 2, 2],
    _s_ = [0, [4, 0], [6, 1]],
    _t_ = [0, 2, 2],
    _u_ = [15, [5, 1]],
    _v_ = [0, 2, 2],
    _w_ = [12, [4, 2]],
    _x_ = [0, 1, 1],
    _y_ = [14, [4, 2]],
    _z_ = [0, 1, 1],
    _A_ = [4, 2],
    _B_ = [0, 2, 2],
    _C_ = [0, 1, 1],
    _D_ = [0, 1, 1],
    _E_ = [5, 2],
    _F_ = [0, 3, 3],
    _G_ = [0, [6, 2], [4, 0]],
    _H_ = [0, 2, 2],
    _I_ = [13, [5, 2]],
    _J_ = [0, 2, 2],
    _K_ = [12, [4, 3]],
    _L_ = [0, 1, 1],
    _M_ = [14, [4, 3]],
    _N_ = [0, 1, 1],
    _O_ = [4, 3],
    _P_ = [0, 2, 2],
    _Q_ = [0, 1, 1],
    _R_ = [0, 3, 3],
    _S_ = [3, [5, 3], [5, 2]],
    _T_ = [0, 2, 2],
    _U_ = [0, [4, 0], [6, 2]],
    _V_ = [0, 2, 2],
    _W_ = [15, [5, 2]],
    _X_ = [0, 2, 2],
    _Y_ = [12, [4, 4]],
    _Z_ = [0, 1, 1],
    ___ = [14, [4, 4]],
    _$_ = [0, 1, 1],
    _aa_ = [4, 4],
    _ab_ = [0, 2, 2],
    _ac_ = [0, 1, 1],
    _ad_ = [0, 2, 3],
    _ae_ = [5, 3],
    _af_ = [0, 3, 3],
    _ag_ = [0, 1, [4, 0]],
    _ah_ = [0, 2, 2],
    _ai_ = [13, [5, 3]],
    _aj_ = [0, 2, 2],
    _ak_ = [12, [4, 6]],
    _al_ = [0, 1, 1],
    _am_ = [14, [4, 6]],
    _an_ = [0, 1, 1],
    _ao_ = [4, 6],
    _ap_ = [0, 2, 2],
    _aq_ = [0, 1, 1],
    _ar_ = [0, 2, 3],
    _as_ = [3, [5, 3], [5, 3]],
    _at_ = [0, 2, 2],
    _au_ = [0, [4, 0], 1],
    _av_ = [0, 2, 2],
    _aw_ = [15, [5, 3]],
    _ax_ = [0, 2, 2],
    _ay_ = [12, [4, 7]],
    _az_ = [0, 1, 1],
    _aA_ = [14, [4, 7]],
    _aB_ = [0, 1, 1],
    _aC_ = [4, 7],
    _aD_ = [0, 2, 2],
    _aE_ = [0, 1, 1],
    _aF_ = [0, 2, 3],
    _aG_ = [0, 3, 3],
    _aH_ = [0, 2, [4, 0]],
    _aI_ = [0, 2, 2],
    _aJ_ = [13, 3],
    _aK_ = [0, 2, 2],
    _aL_ = [12, [6, 3]],
    _aM_ = [0, 3, 3],
    _aN_ = [14, [6, 3]],
    _aO_ = [0, 3, 3],
    _aP_ = [6, 3],
    _aQ_ = [0, 3, 3],
    _aR_ = [0, 1, 1],
    _aS_ = [0, 2, 3],
    _aT_ = [3, [5, 3], 3],
    _aU_ = [0, 2, 2],
    _aV_ = [0, [4, 0], 2],
    _aW_ = [0, 2, 2],
    _aX_ = [15, 3],
    _aY_ = [0, 2, 2],
    _aZ_ = [12, [4, 0]],
    _a0_ = [0, 1, 1],
    _a1_ = [14, [4, 0]],
    _a2_ = [0, 1, 1],
    _a3_ = [4, 0],
    _a4_ = [0, 2, 2],
    _a5_ = [0, 1, 1],
    _a6_ = [0, [4, 1], [4, 1]],
    _a7_ = [0, 1, 1],
    _a8_ = [0, [4, 1], [4, 2]],
    _a9_ = [0, 1, 1],
    _a__ = [0, [4, 1], [4, 3]],
    _a$_ = [0, 1, 1],
    _ba_ = [0, [4, 1], [4, 4]],
    _bb_ = [0, 1, 1],
    _bc_ = [0, [4, 1], [4, 6]],
    _bd_ = [0, 1, 1],
    _be_ = [0, [4, 1], [4, 7]],
    _bf_ = [0, 1, 1],
    _bg_ = [0, [4, 1], [6, 3]],
    _bh_ = [0, 2, 2],
    _bi_ = [0, [4, 1], [4, 0]],
    _bj_ = [0, 1, 1],
    _bk_ = [0, [4, 2], [4, 1]],
    _bl_ = [0, 1, 1],
    _bm_ = [0, [4, 2], [4, 2]],
    _bn_ = [0, 1, 1],
    _bo_ = [0, [4, 2], [4, 3]],
    _bp_ = [0, 1, 1],
    _bq_ = [0, [4, 2], [4, 4]],
    _br_ = [0, 1, 1],
    _bs_ = [0, [4, 2], [4, 6]],
    _bt_ = [0, 1, 1],
    _bu_ = [0, [4, 2], [4, 7]],
    _bv_ = [0, 1, 1],
    _bw_ = [0, [4, 2], [6, 3]],
    _bx_ = [0, 2, 2],
    _by_ = [0, [4, 2], [4, 0]],
    _bz_ = [0, 1, 1],
    _bA_ = [0, [4, 3], [4, 1]],
    _bB_ = [0, 1, 1],
    _bC_ = [0, [4, 3], [4, 2]],
    _bD_ = [0, 1, 1],
    _bE_ = [0, [4, 3], [4, 3]],
    _bF_ = [0, 1, 1],
    _bG_ = [0, [4, 3], [4, 4]],
    _bH_ = [0, 1, 1],
    _bI_ = [0, [4, 3], [4, 6]],
    _bJ_ = [0, 1, 1],
    _bK_ = [0, [4, 3], [4, 7]],
    _bL_ = [0, 1, 1],
    _bM_ = [0, [4, 3], [6, 3]],
    _bN_ = [0, 2, 2],
    _bO_ = [0, [4, 3], [4, 0]],
    _bP_ = [0, 1, 1],
    _bQ_ = [0, [4, 4], [4, 1]],
    _bR_ = [0, 1, 1],
    _bS_ = [0, [4, 4], [4, 2]],
    _bT_ = [0, 1, 1],
    _bU_ = [0, [4, 4], [4, 3]],
    _bV_ = [0, 1, 1],
    _bW_ = [0, [4, 4], [4, 4]],
    _bX_ = [0, 1, 1],
    _bY_ = [0, [4, 4], [4, 6]],
    _bZ_ = [0, 1, 1],
    _b0_ = [0, [4, 4], [4, 7]],
    _b1_ = [0, 1, 1],
    _b2_ = [0, [4, 4], [6, 3]],
    _b3_ = [0, 2, 2],
    _b4_ = [0, [4, 4], [4, 0]],
    _b5_ = [0, 1, 1],
    _b6_ = [0, [4, 6], [4, 1]],
    _b7_ = [0, 1, 1],
    _b8_ = [0, [4, 6], [4, 2]],
    _b9_ = [0, 1, 1],
    _b__ = [0, [4, 6], [4, 3]],
    _b$_ = [0, 1, 1],
    _ca_ = [0, [4, 6], [4, 4]],
    _cb_ = [0, 1, 1],
    _cc_ = [0, [4, 6], [4, 6]],
    _cd_ = [0, 1, 1],
    _ce_ = [0, [4, 6], [4, 7]],
    _cf_ = [0, 1, 1],
    _cg_ = [0, [4, 6], [6, 3]],
    _ch_ = [0, 2, 2],
    _ci_ = [0, [4, 6], [4, 0]],
    _cj_ = [0, 1, 1],
    _ck_ = [0, [4, 7], [4, 1]],
    _cl_ = [0, 1, 1],
    _cm_ = [0, [4, 7], [4, 2]],
    _cn_ = [0, 1, 1],
    _co_ = [0, [4, 7], [4, 3]],
    _cp_ = [0, 1, 1],
    _cq_ = [0, [4, 7], [4, 4]],
    _cr_ = [0, 1, 1],
    _cs_ = [0, [4, 7], [4, 6]],
    _ct_ = [0, 1, 1],
    _cu_ = [0, [4, 7], [4, 7]],
    _cv_ = [0, 1, 1],
    _cw_ = [0, [4, 7], [6, 3]],
    _cx_ = [0, 2, 2],
    _cy_ = [0, [4, 7], [4, 0]],
    _cz_ = [0, 1, 1],
    _cA_ = [0, [6, 3], [4, 1]],
    _cB_ = [0, 2, 2],
    _cC_ = [0, [6, 3], [4, 2]],
    _cD_ = [0, 2, 2],
    _cE_ = [0, [6, 3], [4, 3]],
    _cF_ = [0, 2, 2],
    _cG_ = [0, [6, 3], [4, 4]],
    _cH_ = [0, 2, 2],
    _cI_ = [0, [6, 3], [4, 6]],
    _cJ_ = [0, 2, 2],
    _cK_ = [0, [6, 3], [4, 7]],
    _cL_ = [0, 2, 2],
    _cM_ = [0, 1, 1],
    _cN_ = [0, [6, 3], [4, 0]],
    _cO_ = [0, 2, 2],
    _cP_ = [0, [4, 0], [4, 1]],
    _cQ_ = [0, 1, 1],
    _cR_ = [0, [4, 0], [4, 2]],
    _cS_ = [0, 1, 1],
    _cT_ = [0, [4, 0], [4, 3]],
    _cU_ = [0, 1, 1],
    _cV_ = [0, [4, 0], [4, 4]],
    _cW_ = [0, 1, 1],
    _cX_ = [0, [4, 0], [4, 6]],
    _cY_ = [0, 1, 1],
    _cZ_ = [0, [4, 0], [4, 7]],
    _c0_ = [0, 1, 1],
    _c1_ = [0, [4, 0], [6, 3]],
    _c2_ = [0, 2, 2],
    _c3_ = [0, [4, 0], [4, 0]],
    _c4_ = [0, 1, 1],
    _c5_ = [2, [4, 0], [4, 1]],
    _c6_ = [0, 1, 1],
    _c7_ = [2, [4, 0], [4, 2]],
    _c8_ = [0, 1, 1],
    _c9_ = [2, [4, 0], [4, 3]],
    _c__ = [0, 1, 1],
    _c$_ = [2, [4, 0], [4, 4]],
    _da_ = [0, 1, 1],
    _db_ = [2, [4, 0], [4, 6]],
    _dc_ = [0, 1, 1],
    _dd_ = [2, [4, 0], [4, 7]],
    _de_ = [0, 1, 1],
    _df_ = [2, [4, 0], [6, 3]],
    _dg_ = [0, 2, 2],
    _dh_ = [2, [4, 0], [4, 0]],
    _di_ = [0, 1, 1],
    _dj_ = [5, [4, 0], [4, 1]],
    _dk_ = [0, 1, 1],
    _dl_ = [5, [4, 0], [4, 2]],
    _dm_ = [0, 1, 1],
    _dn_ = [5, [4, 0], [4, 3]],
    _do_ = [0, 1, 1],
    _dp_ = [5, [4, 0], [4, 4]],
    _dq_ = [0, 1, 1],
    _dr_ = [5, [4, 0], [4, 6]],
    _ds_ = [0, 1, 1],
    _dt_ = [5, [4, 0], [4, 7]],
    _du_ = [0, 1, 1],
    _dv_ = [5, [4, 0], [6, 3]],
    _dw_ = [0, 2, 2],
    _dx_ = [5, [4, 0], [4, 0]],
    _dy_ = [0, 1, 1],
    _dz_ = [6, [4, 0], [4, 1]],
    _dA_ = [0, 1, 1],
    _dB_ = [6, [4, 0], [4, 2]],
    _dC_ = [0, 1, 1],
    _dD_ = [6, [4, 0], [4, 3]],
    _dE_ = [0, 1, 1],
    _dF_ = [6, [4, 0], [4, 4]],
    _dG_ = [0, 1, 1],
    _dH_ = [6, [4, 0], [4, 6]],
    _dI_ = [0, 1, 1],
    _dJ_ = [6, [4, 0], [4, 7]],
    _dK_ = [0, 1, 1],
    _dL_ = [6, [4, 0], [6, 3]],
    _dM_ = [0, 2, 2],
    _dN_ = [6, [4, 0], [4, 0]],
    _dO_ = [0, 1, 1],
    _dP_ = [7, [4, 0], [4, 1]],
    _dQ_ = [0, 1, 1],
    _dR_ = [7, [4, 0], [4, 2]],
    _dS_ = [0, 1, 1],
    _dT_ = [7, [4, 0], [4, 3]],
    _dU_ = [0, 1, 1],
    _dV_ = [7, [4, 0], [4, 4]],
    _dW_ = [0, 1, 1],
    _dX_ = [7, [4, 0], [4, 6]],
    _dY_ = [0, 1, 1],
    _dZ_ = [7, [4, 0], [4, 7]],
    _d0_ = [0, 1, 1],
    _d1_ = [7, [4, 0], [6, 3]],
    _d2_ = [0, 2, 2],
    _d3_ = [7, [4, 0], [4, 0]],
    _d4_ = [0, 1, 1],
    _d5_ = [8, [4, 0], [4, 1]],
    _d6_ = [0, 1, 1],
    _d7_ = [8, [4, 0], [4, 2]],
    _d8_ = [0, 1, 1],
    _d9_ = [8, [4, 0], [4, 3]],
    _d__ = [0, 1, 1],
    _d$_ = [8, [4, 0], [4, 4]],
    _ea_ = [0, 1, 1],
    _eb_ = [8, [4, 0], [4, 6]],
    _ec_ = [0, 1, 1],
    _ed_ = [8, [4, 0], [4, 7]],
    _ee_ = [0, 1, 1],
    _ef_ = [8, [4, 0], [6, 3]],
    _eg_ = [0, 2, 2],
    _eh_ = [8, [4, 0], [4, 0]],
    _ei_ = [0, 1, 1],
    _ej_ = [10, [4, 0], [4, 1]],
    _ek_ = [0, 1, 1],
    _el_ = [10, [4, 0], [4, 2]],
    _em_ = [0, 1, 1],
    _en_ = [10, [4, 0], [4, 3]],
    _eo_ = [0, 1, 1],
    _ep_ = [10, [4, 0], [4, 4]],
    _eq_ = [0, 1, 1],
    _er_ = [10, [4, 0], [4, 6]],
    _es_ = [0, 1, 1],
    _et_ = [10, [4, 0], [4, 7]],
    _eu_ = [0, 1, 1],
    _ev_ = [10, [4, 0], [6, 3]],
    _ew_ = [0, 2, 2],
    _ex_ = [10, [4, 0], [4, 0]],
    _ey_ = [0, 1, 1],
    _ez_ = [9, [4, 0], [4, 1]],
    _eA_ = [0, 1, 1],
    _eB_ = [9, [4, 0], [4, 2]],
    _eC_ = [0, 1, 1],
    _eD_ = [9, [4, 0], [4, 3]],
    _eE_ = [0, 1, 1],
    _eF_ = [9, [4, 0], [4, 4]],
    _eG_ = [0, 1, 1],
    _eH_ = [9, [4, 0], [4, 6]],
    _eI_ = [0, 1, 1],
    _eJ_ = [9, [4, 0], [4, 7]],
    _eK_ = [0, 1, 1],
    _eL_ = [9, [4, 0], [6, 3]],
    _eM_ = [0, 2, 2],
    _eN_ = [9, [4, 0], [4, 0]],
    _eO_ = [0, 1, 1],
    _eP_ = [11, [4, 0], [4, 1]],
    _eQ_ = [0, 1, 1],
    _eR_ = [11, [4, 0], [4, 2]],
    _eS_ = [0, 1, 1],
    _eT_ = [11, [4, 0], [4, 3]],
    _eU_ = [0, 1, 1],
    _eV_ = [11, [4, 0], [4, 4]],
    _eW_ = [0, 1, 1],
    _eX_ = [11, [4, 0], [4, 6]],
    _eY_ = [0, 1, 1],
    _eZ_ = [11, [4, 0], [4, 7]],
    _e0_ = [0, 1, 1],
    _e1_ = [11, [4, 0], [6, 3]],
    _e2_ = [0, 2, 2],
    _e3_ = [11, [4, 0], [4, 0]],
    _e4_ = [0, 1, 1],
    _e5_ = [33, 1],
    _e6_ = [0, 2, 5],
    _e7_ = [28, 1],
    _e8_ = [0, 3, 3],
    _e9_ = [0, 3, 4],
    _e__ = [0, 4, 4],
    _e$_ = [0, 3, 6],
    _fa_ = [27, 1],
    _fb_ = [0, 4, 4],
    _fc_ = [4, 0],
    _fd_ = [0, 2, 2],
    _fe_ = [0, 4, 4],
    _ff_ = [33, 2],
    _fg_ = [0, 2, 5],
    _fh_ = [33, 0],
    _fi_ = [0, 4, 4],
    _fj_ = [0, 3, 4],
    _fk_ =
      [0,
       [11, "Unrecognized opcode after 0xCB: 0x", [4, 6, [0, 2, 2], 0, 0]],
       "Unrecognized opcode after 0xCB: 0x%02x"],
    _fl_ = [17, [4, 1]],
    _fm_ = [0, 2, 2],
    _fn_ = [17, [4, 2]],
    _fo_ = [0, 2, 2],
    _fp_ = [17, [4, 3]],
    _fq_ = [0, 2, 2],
    _fr_ = [17, [4, 4]],
    _fs_ = [0, 2, 2],
    _ft_ = [17, [4, 6]],
    _fu_ = [0, 2, 2],
    _fv_ = [17, [4, 7]],
    _fw_ = [0, 2, 2],
    _fx_ = [17, [6, 3]],
    _fy_ = [0, 4, 4],
    _fz_ = [17, [4, 0]],
    _fA_ = [0, 2, 2],
    _fB_ = [19, [4, 1]],
    _fC_ = [0, 2, 2],
    _fD_ = [19, [4, 2]],
    _fE_ = [0, 2, 2],
    _fF_ = [19, [4, 3]],
    _fG_ = [0, 2, 2],
    _fH_ = [19, [4, 4]],
    _fI_ = [0, 2, 2],
    _fJ_ = [19, [4, 6]],
    _fK_ = [0, 2, 2],
    _fL_ = [19, [4, 7]],
    _fM_ = [0, 2, 2],
    _fN_ = [19, [6, 3]],
    _fO_ = [0, 4, 4],
    _fP_ = [19, [4, 0]],
    _fQ_ = [0, 2, 2],
    _fR_ = [18, [4, 1]],
    _fS_ = [0, 2, 2],
    _fT_ = [18, [4, 2]],
    _fU_ = [0, 2, 2],
    _fV_ = [18, [4, 3]],
    _fW_ = [0, 2, 2],
    _fX_ = [18, [4, 4]],
    _fY_ = [0, 2, 2],
    _fZ_ = [18, [4, 6]],
    _f0_ = [0, 2, 2],
    _f1_ = [18, [4, 7]],
    _f2_ = [0, 2, 2],
    _f3_ = [18, [6, 3]],
    _f4_ = [0, 4, 4],
    _f5_ = [18, [4, 0]],
    _f6_ = [0, 2, 2],
    _f7_ = [20, [4, 1]],
    _f8_ = [0, 2, 2],
    _f9_ = [20, [4, 2]],
    _f__ = [0, 2, 2],
    _f$_ = [20, [4, 3]],
    _ga_ = [0, 2, 2],
    _gb_ = [20, [4, 4]],
    _gc_ = [0, 2, 2],
    _gd_ = [20, [4, 6]],
    _ge_ = [0, 2, 2],
    _gf_ = [20, [4, 7]],
    _gg_ = [0, 2, 2],
    _gh_ = [20, [6, 3]],
    _gi_ = [0, 4, 4],
    _gj_ = [20, [4, 0]],
    _gk_ = [0, 2, 2],
    _gl_ = [21, [4, 1]],
    _gm_ = [0, 2, 2],
    _gn_ = [21, [4, 2]],
    _go_ = [0, 2, 2],
    _gp_ = [21, [4, 3]],
    _gq_ = [0, 2, 2],
    _gr_ = [21, [4, 4]],
    _gs_ = [0, 2, 2],
    _gt_ = [21, [4, 6]],
    _gu_ = [0, 2, 2],
    _gv_ = [21, [4, 7]],
    _gw_ = [0, 2, 2],
    _gx_ = [21, [6, 3]],
    _gy_ = [0, 4, 4],
    _gz_ = [21, [4, 0]],
    _gA_ = [0, 2, 2],
    _gB_ = [22, [4, 1]],
    _gC_ = [0, 2, 2],
    _gD_ = [22, [4, 2]],
    _gE_ = [0, 2, 2],
    _gF_ = [22, [4, 3]],
    _gG_ = [0, 2, 2],
    _gH_ = [22, [4, 4]],
    _gI_ = [0, 2, 2],
    _gJ_ = [22, [4, 6]],
    _gK_ = [0, 2, 2],
    _gL_ = [22, [4, 7]],
    _gM_ = [0, 2, 2],
    _gN_ = [22, [6, 3]],
    _gO_ = [0, 4, 4],
    _gP_ = [22, [4, 0]],
    _gQ_ = [0, 2, 2],
    _gR_ = [16, [4, 1]],
    _gS_ = [0, 2, 2],
    _gT_ = [16, [4, 2]],
    _gU_ = [0, 2, 2],
    _gV_ = [16, [4, 3]],
    _gW_ = [0, 2, 2],
    _gX_ = [16, [4, 4]],
    _gY_ = [0, 2, 2],
    _gZ_ = [16, [4, 6]],
    _g0_ = [0, 2, 2],
    _g1_ = [16, [4, 7]],
    _g2_ = [0, 2, 2],
    _g3_ = [16, [6, 3]],
    _g4_ = [0, 4, 4],
    _g5_ = [16, [4, 0]],
    _g6_ = [0, 2, 2],
    _g7_ = [23, [4, 1]],
    _g8_ = [0, 2, 2],
    _g9_ = [23, [4, 2]],
    _g__ = [0, 2, 2],
    _g$_ = [23, [4, 3]],
    _ha_ = [0, 2, 2],
    _hb_ = [23, [4, 4]],
    _hc_ = [0, 2, 2],
    _hd_ = [23, [4, 6]],
    _he_ = [0, 2, 2],
    _hf_ = [23, [4, 7]],
    _hg_ = [0, 2, 2],
    _hh_ = [23, [6, 3]],
    _hi_ = [0, 4, 4],
    _hj_ = [23, [4, 0]],
    _hk_ = [0, 2, 2],
    _hl_ = [24, 0, [4, 1]],
    _hm_ = [0, 2, 2],
    _hn_ = [24, 0, [4, 2]],
    _ho_ = [0, 2, 2],
    _hp_ = [24, 0, [4, 3]],
    _hq_ = [0, 2, 2],
    _hr_ = [24, 0, [4, 4]],
    _hs_ = [0, 2, 2],
    _ht_ = [24, 0, [4, 6]],
    _hu_ = [0, 2, 2],
    _hv_ = [24, 0, [4, 7]],
    _hw_ = [0, 2, 2],
    _hx_ = [24, 0, [6, 3]],
    _hy_ = [0, 3, 3],
    _hz_ = [24, 0, [4, 0]],
    _hA_ = [0, 2, 2],
    _hB_ = [24, 1, [4, 1]],
    _hC_ = [0, 2, 2],
    _hD_ = [24, 1, [4, 2]],
    _hE_ = [0, 2, 2],
    _hF_ = [24, 1, [4, 3]],
    _hG_ = [0, 2, 2],
    _hH_ = [24, 1, [4, 4]],
    _hI_ = [0, 2, 2],
    _hJ_ = [24, 1, [4, 6]],
    _hK_ = [0, 2, 2],
    _hL_ = [24, 1, [4, 7]],
    _hM_ = [0, 2, 2],
    _hN_ = [24, 1, [6, 3]],
    _hO_ = [0, 3, 3],
    _hP_ = [24, 1, [4, 0]],
    _hQ_ = [0, 2, 2],
    _hR_ = [24, 2, [4, 1]],
    _hS_ = [0, 2, 2],
    _hT_ = [24, 2, [4, 2]],
    _hU_ = [0, 2, 2],
    _hV_ = [24, 2, [4, 3]],
    _hW_ = [0, 2, 2],
    _hX_ = [24, 2, [4, 4]],
    _hY_ = [0, 2, 2],
    _hZ_ = [24, 2, [4, 6]],
    _h0_ = [0, 2, 2],
    _h1_ = [24, 2, [4, 7]],
    _h2_ = [0, 2, 2],
    _h3_ = [24, 2, [6, 3]],
    _h4_ = [0, 3, 3],
    _h5_ = [24, 2, [4, 0]],
    _h6_ = [0, 2, 2],
    _h7_ = [24, 3, [4, 1]],
    _h8_ = [0, 2, 2],
    _h9_ = [24, 3, [4, 2]],
    _h__ = [0, 2, 2],
    _h$_ = [24, 3, [4, 3]],
    _ia_ = [0, 2, 2],
    _ib_ = [24, 3, [4, 4]],
    _ic_ = [0, 2, 2],
    _id_ = [24, 3, [4, 6]],
    _ie_ = [0, 2, 2],
    _if_ = [24, 3, [4, 7]],
    _ig_ = [0, 2, 2],
    _ih_ = [24, 3, [6, 3]],
    _ii_ = [0, 3, 3],
    _ij_ = [24, 3, [4, 0]],
    _ik_ = [0, 2, 2],
    _il_ = [24, 4, [4, 1]],
    _im_ = [0, 2, 2],
    _in_ = [24, 4, [4, 2]],
    _io_ = [0, 2, 2],
    _ip_ = [24, 4, [4, 3]],
    _iq_ = [0, 2, 2],
    _ir_ = [24, 4, [4, 4]],
    _is_ = [0, 2, 2],
    _it_ = [24, 4, [4, 6]],
    _iu_ = [0, 2, 2],
    _iv_ = [24, 4, [4, 7]],
    _iw_ = [0, 2, 2],
    _ix_ = [24, 4, [6, 3]],
    _iy_ = [0, 3, 3],
    _iz_ = [24, 4, [4, 0]],
    _iA_ = [0, 2, 2],
    _iB_ = [24, 5, [4, 1]],
    _iC_ = [0, 2, 2],
    _iD_ = [24, 5, [4, 2]],
    _iE_ = [0, 2, 2],
    _iF_ = [24, 5, [4, 3]],
    _iG_ = [0, 2, 2],
    _iH_ = [24, 5, [4, 4]],
    _iI_ = [0, 2, 2],
    _iJ_ = [24, 5, [4, 6]],
    _iK_ = [0, 2, 2],
    _iL_ = [24, 5, [4, 7]],
    _iM_ = [0, 2, 2],
    _iN_ = [24, 5, [6, 3]],
    _iO_ = [0, 3, 3],
    _iP_ = [24, 5, [4, 0]],
    _iQ_ = [0, 2, 2],
    _iR_ = [24, 6, [4, 1]],
    _iS_ = [0, 2, 2],
    _iT_ = [24, 6, [4, 2]],
    _iU_ = [0, 2, 2],
    _iV_ = [24, 6, [4, 3]],
    _iW_ = [0, 2, 2],
    _iX_ = [24, 6, [4, 4]],
    _iY_ = [0, 2, 2],
    _iZ_ = [24, 6, [4, 6]],
    _i0_ = [0, 2, 2],
    _i1_ = [24, 6, [4, 7]],
    _i2_ = [0, 2, 2],
    _i3_ = [24, 6, [6, 3]],
    _i4_ = [0, 3, 3],
    _i5_ = [24, 6, [4, 0]],
    _i6_ = [0, 2, 2],
    _i7_ = [24, 7, [4, 1]],
    _i8_ = [0, 2, 2],
    _i9_ = [24, 7, [4, 2]],
    _i__ = [0, 2, 2],
    _i$_ = [24, 7, [4, 3]],
    _ja_ = [0, 2, 2],
    _jb_ = [24, 7, [4, 4]],
    _jc_ = [0, 2, 2],
    _jd_ = [24, 7, [4, 6]],
    _je_ = [0, 2, 2],
    _jf_ = [24, 7, [4, 7]],
    _jg_ = [0, 2, 2],
    _jh_ = [24, 7, [6, 3]],
    _ji_ = [0, 3, 3],
    _jj_ = [24, 7, [4, 0]],
    _jk_ = [0, 2, 2],
    _jl_ = [26, 0, [4, 1]],
    _jm_ = [0, 2, 2],
    _jn_ = [26, 0, [4, 2]],
    _jo_ = [0, 2, 2],
    _jp_ = [26, 0, [4, 3]],
    _jq_ = [0, 2, 2],
    _jr_ = [26, 0, [4, 4]],
    _js_ = [0, 2, 2],
    _jt_ = [26, 0, [4, 6]],
    _ju_ = [0, 2, 2],
    _jv_ = [26, 0, [4, 7]],
    _jw_ = [0, 2, 2],
    _jx_ = [26, 0, [6, 3]],
    _jy_ = [0, 4, 4],
    _jz_ = [26, 0, [4, 0]],
    _jA_ = [0, 2, 2],
    _jB_ = [26, 1, [4, 1]],
    _jC_ = [0, 2, 2],
    _jD_ = [26, 1, [4, 2]],
    _jE_ = [0, 2, 2],
    _jF_ = [26, 1, [4, 3]],
    _jG_ = [0, 2, 2],
    _jH_ = [26, 1, [4, 4]],
    _jI_ = [0, 2, 2],
    _jJ_ = [26, 1, [4, 6]],
    _jK_ = [0, 2, 2],
    _jL_ = [26, 1, [4, 7]],
    _jM_ = [0, 2, 2],
    _jN_ = [26, 1, [6, 3]],
    _jO_ = [0, 4, 4],
    _jP_ = [26, 1, [4, 0]],
    _jQ_ = [0, 2, 2],
    _jR_ = [26, 2, [4, 1]],
    _jS_ = [0, 2, 2],
    _jT_ = [26, 2, [4, 2]],
    _jU_ = [0, 2, 2],
    _jV_ = [26, 2, [4, 3]],
    _jW_ = [0, 2, 2],
    _jX_ = [26, 2, [4, 4]],
    _jY_ = [0, 2, 2],
    _jZ_ = [26, 2, [4, 6]],
    _j0_ = [0, 2, 2],
    _j1_ = [26, 2, [4, 7]],
    _j2_ = [0, 2, 2],
    _j3_ = [26, 2, [6, 3]],
    _j4_ = [0, 4, 4],
    _j5_ = [26, 2, [4, 0]],
    _j6_ = [0, 2, 2],
    _j7_ = [26, 3, [4, 1]],
    _j8_ = [0, 2, 2],
    _j9_ = [26, 3, [4, 2]],
    _j__ = [0, 2, 2],
    _j$_ = [26, 3, [4, 3]],
    _ka_ = [0, 2, 2],
    _kb_ = [26, 3, [4, 4]],
    _kc_ = [0, 2, 2],
    _kd_ = [26, 3, [4, 6]],
    _ke_ = [0, 2, 2],
    _kf_ = [26, 3, [4, 7]],
    _kg_ = [0, 2, 2],
    _kh_ = [26, 3, [6, 3]],
    _ki_ = [0, 4, 4],
    _kj_ = [26, 3, [4, 0]],
    _kk_ = [0, 2, 2],
    _kl_ = [26, 4, [4, 1]],
    _km_ = [0, 2, 2],
    _kn_ = [26, 4, [4, 2]],
    _ko_ = [0, 2, 2],
    _kp_ = [26, 4, [4, 3]],
    _kq_ = [0, 2, 2],
    _kr_ = [26, 4, [4, 4]],
    _ks_ = [0, 2, 2],
    _kt_ = [26, 4, [4, 6]],
    _ku_ = [0, 2, 2],
    _kv_ = [26, 4, [4, 7]],
    _kw_ = [0, 2, 2],
    _kx_ = [26, 4, [6, 3]],
    _ky_ = [0, 4, 4],
    _kz_ = [26, 4, [4, 0]],
    _kA_ = [0, 2, 2],
    _kB_ = [26, 5, [4, 1]],
    _kC_ = [0, 2, 2],
    _kD_ = [26, 5, [4, 2]],
    _kE_ = [0, 2, 2],
    _kF_ = [26, 5, [4, 3]],
    _kG_ = [0, 2, 2],
    _kH_ = [26, 5, [4, 4]],
    _kI_ = [0, 2, 2],
    _kJ_ = [26, 5, [4, 6]],
    _kK_ = [0, 2, 2],
    _kL_ = [26, 5, [4, 7]],
    _kM_ = [0, 2, 2],
    _kN_ = [26, 5, [6, 3]],
    _kO_ = [0, 4, 4],
    _kP_ = [26, 5, [4, 0]],
    _kQ_ = [0, 2, 2],
    _kR_ = [26, 6, [4, 1]],
    _kS_ = [0, 2, 2],
    _kT_ = [26, 6, [4, 2]],
    _kU_ = [0, 2, 2],
    _kV_ = [26, 6, [4, 3]],
    _kW_ = [0, 2, 2],
    _kX_ = [26, 6, [4, 4]],
    _kY_ = [0, 2, 2],
    _kZ_ = [26, 6, [4, 6]],
    _k0_ = [0, 2, 2],
    _k1_ = [26, 6, [4, 7]],
    _k2_ = [0, 2, 2],
    _k3_ = [26, 6, [6, 3]],
    _k4_ = [0, 4, 4],
    _k5_ = [26, 6, [4, 0]],
    _k6_ = [0, 2, 2],
    _k7_ = [26, 7, [4, 1]],
    _k8_ = [0, 2, 2],
    _k9_ = [26, 7, [4, 2]],
    _k__ = [0, 2, 2],
    _k$_ = [26, 7, [4, 3]],
    _la_ = [0, 2, 2],
    _lb_ = [26, 7, [4, 4]],
    _lc_ = [0, 2, 2],
    _ld_ = [26, 7, [4, 6]],
    _le_ = [0, 2, 2],
    _lf_ = [26, 7, [4, 7]],
    _lg_ = [0, 2, 2],
    _lh_ = [26, 7, [6, 3]],
    _li_ = [0, 4, 4],
    _lj_ = [26, 7, [4, 0]],
    _lk_ = [0, 2, 2],
    _ll_ = [25, 0, [4, 1]],
    _lm_ = [0, 2, 2],
    _ln_ = [25, 0, [4, 2]],
    _lo_ = [0, 2, 2],
    _lp_ = [25, 0, [4, 3]],
    _lq_ = [0, 2, 2],
    _lr_ = [25, 0, [4, 4]],
    _ls_ = [0, 2, 2],
    _lt_ = [25, 0, [4, 6]],
    _lu_ = [0, 2, 2],
    _lv_ = [25, 0, [4, 7]],
    _lw_ = [0, 2, 2],
    _lx_ = [25, 0, [6, 3]],
    _ly_ = [0, 4, 4],
    _lz_ = [25, 0, [4, 0]],
    _lA_ = [0, 2, 2],
    _lB_ = [25, 1, [4, 1]],
    _lC_ = [0, 2, 2],
    _lD_ = [25, 1, [4, 2]],
    _lE_ = [0, 2, 2],
    _lF_ = [25, 1, [4, 3]],
    _lG_ = [0, 2, 2],
    _lH_ = [25, 1, [4, 4]],
    _lI_ = [0, 2, 2],
    _lJ_ = [25, 1, [4, 6]],
    _lK_ = [0, 2, 2],
    _lL_ = [25, 1, [4, 7]],
    _lM_ = [0, 2, 2],
    _lN_ = [25, 1, [6, 3]],
    _lO_ = [0, 4, 4],
    _lP_ = [25, 1, [4, 0]],
    _lQ_ = [0, 2, 2],
    _lR_ = [25, 2, [4, 1]],
    _lS_ = [0, 2, 2],
    _lT_ = [25, 2, [4, 2]],
    _lU_ = [0, 2, 2],
    _lV_ = [25, 2, [4, 3]],
    _lW_ = [0, 2, 2],
    _lX_ = [25, 2, [4, 4]],
    _lY_ = [0, 2, 2],
    _lZ_ = [25, 2, [4, 6]],
    _l0_ = [0, 2, 2],
    _l1_ = [25, 2, [4, 7]],
    _l2_ = [0, 2, 2],
    _l3_ = [25, 2, [6, 3]],
    _l4_ = [0, 4, 4],
    _l5_ = [25, 2, [4, 0]],
    _l6_ = [0, 2, 2],
    _l7_ = [25, 3, [4, 1]],
    _l8_ = [0, 2, 2],
    _l9_ = [25, 3, [4, 2]],
    _l__ = [0, 2, 2],
    _l$_ = [25, 3, [4, 3]],
    _ma_ = [0, 2, 2],
    _mb_ = [25, 3, [4, 4]],
    _mc_ = [0, 2, 2],
    _md_ = [25, 3, [4, 6]],
    _me_ = [0, 2, 2],
    _mf_ = [25, 3, [4, 7]],
    _mg_ = [0, 2, 2],
    _mh_ = [25, 3, [6, 3]],
    _mi_ = [0, 4, 4],
    _mj_ = [25, 3, [4, 0]],
    _mk_ = [0, 2, 2],
    _ml_ = [25, 4, [4, 1]],
    _mm_ = [0, 2, 2],
    _mn_ = [25, 4, [4, 2]],
    _mo_ = [0, 2, 2],
    _mp_ = [25, 4, [4, 3]],
    _mq_ = [0, 2, 2],
    _mr_ = [25, 4, [4, 4]],
    _ms_ = [0, 2, 2],
    _mt_ = [25, 4, [4, 6]],
    _mu_ = [0, 2, 2],
    _mv_ = [25, 4, [4, 7]],
    _mw_ = [0, 2, 2],
    _mx_ = [25, 4, [6, 3]],
    _my_ = [0, 4, 4],
    _mz_ = [25, 4, [4, 0]],
    _mA_ = [0, 2, 2],
    _mB_ = [25, 5, [4, 1]],
    _mC_ = [0, 2, 2],
    _mD_ = [25, 5, [4, 2]],
    _mE_ = [0, 2, 2],
    _mF_ = [25, 5, [4, 3]],
    _mG_ = [0, 2, 2],
    _mH_ = [25, 5, [4, 4]],
    _mI_ = [0, 2, 2],
    _mJ_ = [25, 5, [4, 6]],
    _mK_ = [0, 2, 2],
    _mL_ = [25, 5, [4, 7]],
    _mM_ = [0, 2, 2],
    _mN_ = [25, 5, [6, 3]],
    _mO_ = [0, 4, 4],
    _mP_ = [25, 5, [4, 0]],
    _mQ_ = [0, 2, 2],
    _mR_ = [25, 6, [4, 1]],
    _mS_ = [0, 2, 2],
    _mT_ = [25, 6, [4, 2]],
    _mU_ = [0, 2, 2],
    _mV_ = [25, 6, [4, 3]],
    _mW_ = [0, 2, 2],
    _mX_ = [25, 6, [4, 4]],
    _mY_ = [0, 2, 2],
    _mZ_ = [25, 6, [4, 6]],
    _m0_ = [0, 2, 2],
    _m1_ = [25, 6, [4, 7]],
    _m2_ = [0, 2, 2],
    _m3_ = [25, 6, [6, 3]],
    _m4_ = [0, 4, 4],
    _m5_ = [25, 6, [4, 0]],
    _m6_ = [0, 2, 2],
    _m7_ = [25, 7, [4, 1]],
    _m8_ = [0, 2, 2],
    _m9_ = [25, 7, [4, 2]],
    _m__ = [0, 2, 2],
    _m$_ = [25, 7, [4, 3]],
    _na_ = [0, 2, 2],
    _nb_ = [25, 7, [4, 4]],
    _nc_ = [0, 2, 2],
    _nd_ = [25, 7, [4, 6]],
    _ne_ = [0, 2, 2],
    _nf_ = [25, 7, [4, 7]],
    _ng_ = [0, 2, 2],
    _nh_ = [25, 7, [6, 3]],
    _ni_ = [0, 4, 4],
    _nj_ = [25, 7, [4, 0]],
    _nk_ = [0, 2, 2],
    _nl_ = [0, 3, 6],
    _nm_ = [0, 6, 6],
    _nn_ = [4, 0],
    _no_ = [0, 2, 2],
    _np_ = [0, 4, 4],
    _nq_ = [33, 3],
    _nr_ = [0, 2, 5],
    _ns_ = [28, 2],
    _nt_ = [0, 3, 3],
    _nu_ = [0, 3, 4],
    _nv_ = [0, 1, 1],
    _nw_ = [0, 3, 6],
    _nx_ = [27, 2],
    _ny_ = [0, 4, 4],
    _nz_ = [4, 0],
    _nA_ = [0, 2, 2],
    _nB_ = [0, 4, 4],
    _nC_ = [33, 4],
    _nD_ = [0, 2, 5],
    _nE_ = [0, 4, 4],
    _nF_ = [0, 3, 4],
    _nG_ = [0, 1, 1],
    _nH_ = [0, 3, 6],
    _nI_ = [0, 1, 1],
    _nJ_ = [4, 0],
    _nK_ = [0, 2, 2],
    _nL_ = [0, 4, 4],
    _nM_ = [4, 0],
    _nN_ = [0, 3, 3],
    _nO_ = [28, 3],
    _nP_ = [0, 3, 3],
    _nQ_ = [0, 0, [4, 0]],
    _nR_ = [0, 2, 2],
    _nS_ = [0, 1, 1],
    _nT_ = [0, 1, 1],
    _nU_ = [27, 3],
    _nV_ = [0, 4, 4],
    _nW_ = [4, 0],
    _nX_ = [0, 2, 2],
    _nY_ = [0, 4, 4],
    _nZ_ = [0, 4, 4],
    _n0_ = [29, 0, [5, 3]],
    _n1_ = [0, 1, 1],
    _n2_ = [4, 0],
    _n3_ = [0, 4, 4],
    _n4_ = [0, 1, 1],
    _n5_ = [0, 1, 1],
    _n6_ = [0, 1, 1],
    _n7_ = [4, 0],
    _n8_ = [0, 2, 2],
    _n9_ = [0, 4, 4],
    _n__ = [4, 0],
    _n$_ = [0, 3, 3],
    _oa_ = [28, 0],
    _ob_ = [0, 3, 3],
    _oc_ = [0, [4, 0], 0],
    _od_ = [0, 2, 2],
    _oe_ = [0, 1, 1],
    _of_ = [0, 1, 1],
    _og_ = [27, 0],
    _oh_ = [0, 4, 4],
    _oi_ = [4, 0],
    _oj_ = [0, 2, 2],
    _ok_ = [0, 4, 4],
    _ol_ = [5, 3],
    _om_ = [0, 3, 3],
    _on_ = [1, 3, [5, 3]],
    _oo_ = [0, 2, 2],
    _op_ = [4, 0],
    _oq_ = [0, 4, 4],
    _or_ = [0, 1, 1],
    _os_ = [0, 1, 1],
    _ot_ = [0, 1, 1],
    _ou_ = [4, 0],
    _ov_ = [0, 2, 2],
    _ow_ = [0, 4, 4],
    Camlboy_lib_Fetch_and_decode =
      [0,
       function(Bus){
        var
         x00 = caml_call1(Camlboy_lib_Uints[2][20], 0),
         x08 = caml_call1(Camlboy_lib_Uints[2][20], 8),
         x10 = caml_call1(Camlboy_lib_Uints[2][20], 16),
         x18 = caml_call1(Camlboy_lib_Uints[2][20], 24),
         x20 = caml_call1(Camlboy_lib_Uints[2][20], 32),
         x28 = caml_call1(Camlboy_lib_Uints[2][20], 40),
         x30 = caml_call1(Camlboy_lib_Uints[2][20], 48),
         x38 = caml_call1(Camlboy_lib_Uints[2][20], 56),
         l1 = caml_call1(Camlboy_lib_Uints[2][20], 1),
         l2 = caml_call1(Camlboy_lib_Uints[2][20], 2),
         l3 = caml_call1(Camlboy_lib_Uints[2][20], 3);
        function f(bus, pc){
         var addr_after_pc = caml_call1(Camlboy_lib_Uints[2][13], pc);
         function next_byte(param){
          return caml_call2(Bus[1], bus, addr_after_pc);
         }
         function next_word(param){
          return caml_call2(Bus[4], bus, addr_after_pc);
         }
         var
          _ox_ = caml_call2(Bus[1], bus, pc),
          op = caml_call1(Camlboy_lib_Uints[1][21], _ox_);
         if(255 < op >>> 0){
          var _oy_ = caml_call2(Stdlib_Printf[4], _a_, op);
          return caml_call1(Stdlib[2], _oy_);
         }
         var _oI_ = op;
         if(128 > _oI_){
          if(64 <= _oI_){
           if(96 <= _oI_)
            switch(_oI_){
              case 96:
               return [0, l1, _b7_, _b6_];
              case 97:
               return [0, l1, _b9_, _b8_];
              case 98:
               return [0, l1, _b$_, _b__];
              case 99:
               return [0, l1, _cb_, _ca_];
              case 100:
               return [0, l1, _cd_, _cc_];
              case 101:
               return [0, l1, _cf_, _ce_];
              case 102:
               return [0, l1, _ch_, _cg_];
              case 103:
               return [0, l1, _cj_, _ci_];
              case 104:
               return [0, l1, _cl_, _ck_];
              case 105:
               return [0, l1, _cn_, _cm_];
              case 106:
               return [0, l1, _cp_, _co_];
              case 107:
               return [0, l1, _cr_, _cq_];
              case 108:
               return [0, l1, _ct_, _cs_];
              case 109:
               return [0, l1, _cv_, _cu_];
              case 110:
               return [0, l1, _cx_, _cw_];
              case 111:
               return [0, l1, _cz_, _cy_];
              case 112:
               return [0, l1, _cB_, _cA_];
              case 113:
               return [0, l1, _cD_, _cC_];
              case 114:
               return [0, l1, _cF_, _cE_];
              case 115:
               return [0, l1, _cH_, _cG_];
              case 116:
               return [0, l1, _cJ_, _cI_];
              case 117:
               return [0, l1, _cL_, _cK_];
              case 118:
               return [0, l1, _cM_, 5];
              case 119:
               return [0, l1, _cO_, _cN_];
              case 120:
               return [0, l1, _cQ_, _cP_];
              case 121:
               return [0, l1, _cS_, _cR_];
              case 122:
               return [0, l1, _cU_, _cT_];
              case 123:
               return [0, l1, _cW_, _cV_];
              case 124:
               return [0, l1, _cY_, _cX_];
              case 125:
               return [0, l1, _c0_, _cZ_];
              case 126:
               return [0, l1, _c2_, _c1_];
              default: return [0, l1, _c4_, _c3_];
            }
           switch(_oI_){
             case 64:
              return [0, l1, _a7_, _a6_];
             case 65:
              return [0, l1, _a9_, _a8_];
             case 66:
              return [0, l1, _a$_, _a__];
             case 67:
              return [0, l1, _bb_, _ba_];
             case 68:
              return [0, l1, _bd_, _bc_];
             case 69:
              return [0, l1, _bf_, _be_];
             case 70:
              return [0, l1, _bh_, _bg_];
             case 71:
              return [0, l1, _bj_, _bi_];
             case 72:
              return [0, l1, _bl_, _bk_];
             case 73:
              return [0, l1, _bn_, _bm_];
             case 74:
              return [0, l1, _bp_, _bo_];
             case 75:
              return [0, l1, _br_, _bq_];
             case 76:
              return [0, l1, _bt_, _bs_];
             case 77:
              return [0, l1, _bv_, _bu_];
             case 78:
              return [0, l1, _bx_, _bw_];
             case 79:
              return [0, l1, _bz_, _by_];
             case 80:
              return [0, l1, _bB_, _bA_];
             case 81:
              return [0, l1, _bD_, _bC_];
             case 82:
              return [0, l1, _bF_, _bE_];
             case 83:
              return [0, l1, _bH_, _bG_];
             case 84:
              return [0, l1, _bJ_, _bI_];
             case 85:
              return [0, l1, _bL_, _bK_];
             case 86:
              return [0, l1, _bN_, _bM_];
             case 87:
              return [0, l1, _bP_, _bO_];
             case 88:
              return [0, l1, _bR_, _bQ_];
             case 89:
              return [0, l1, _bT_, _bS_];
             case 90:
              return [0, l1, _bV_, _bU_];
             case 91:
              return [0, l1, _bX_, _bW_];
             case 92:
              return [0, l1, _bZ_, _bY_];
             case 93:
              return [0, l1, _b1_, _b0_];
             case 94:
              return [0, l1, _b3_, _b2_];
             default: return [0, l1, _b5_, _b4_];
           }
          }
          if(32 <= _oI_)
           switch(_oI_){
             case 32:
              var _oA_ = next_byte(0);
              return [0,
                      l2,
                      _ad_,
                      [30, 1, caml_call1(Camlboy_lib_Uints[3][1], _oA_)]];
             case 33:
              return [0, l3, _af_, [1, _ae_, [1, next_word(0)]]];
             case 34:
              return [0, l1, _ah_, _ag_];
             case 35:
              return [0, l1, _aj_, _ai_];
             case 36:
              return [0, l1, _al_, _ak_];
             case 37:
              return [0, l1, _an_, _am_];
             case 38:
              return [0, l2, _ap_, [0, _ao_, [0, next_byte(0)]]];
             case 39:
              return [0, l1, _aq_, 0];
             case 40:
              var _oB_ = next_byte(0);
              return [0,
                      l2,
                      _ar_,
                      [30, 2, caml_call1(Camlboy_lib_Uints[3][1], _oB_)]];
             case 41:
              return [0, l1, _at_, _as_];
             case 42:
              return [0, l1, _av_, _au_];
             case 43:
              return [0, l1, _ax_, _aw_];
             case 44:
              return [0, l1, _az_, _ay_];
             case 45:
              return [0, l1, _aB_, _aA_];
             case 46:
              return [0, l2, _aD_, [0, _aC_, [0, next_byte(0)]]];
             case 47:
              return [0, l1, _aE_, 1];
             case 48:
              var _oC_ = next_byte(0);
              return [0,
                      l2,
                      _aF_,
                      [30, 3, caml_call1(Camlboy_lib_Uints[3][1], _oC_)]];
             case 49:
              return [0, l3, _aG_, [1, 3, [1, next_word(0)]]];
             case 50:
              return [0, l1, _aI_, _aH_];
             case 51:
              return [0, l1, _aK_, _aJ_];
             case 52:
              return [0, l1, _aM_, _aL_];
             case 53:
              return [0, l1, _aO_, _aN_];
             case 54:
              return [0, l2, _aQ_, [0, _aP_, [0, next_byte(0)]]];
             case 55:
              return [0, l1, _aR_, 3];
             case 56:
              var _oD_ = next_byte(0);
              return [0,
                      l2,
                      _aS_,
                      [30, 4, caml_call1(Camlboy_lib_Uints[3][1], _oD_)]];
             case 57:
              return [0, l1, _aU_, _aT_];
             case 58:
              return [0, l1, _aW_, _aV_];
             case 59:
              return [0, l1, _aY_, _aX_];
             case 60:
              return [0, l1, _a0_, _aZ_];
             case 61:
              return [0, l1, _a2_, _a1_];
             case 62:
              return [0, l2, _a4_, [0, _a3_, [0, next_byte(0)]]];
             default: return [0, l1, _a5_, 2];
           }
          switch(_oI_){
            case 0:
             return [0, l1, _b_, 4];
            case 1:
             return [0, l3, _d_, [1, _c_, [1, next_word(0)]]];
            case 2:
             return [0, l1, _f_, _e_];
            case 3:
             return [0, l1, _h_, _g_];
            case 4:
             return [0, l1, _j_, _i_];
            case 5:
             return [0, l1, _l_, _k_];
            case 6:
             return [0, l2, _n_, [0, _m_, [0, next_byte(0)]]];
            case 7:
             return [0, l1, _o_, 9];
            case 8:
             return [0, l3, _p_, [1, [3, next_word(0)], 3]];
            case 9:
             return [0, l1, _r_, _q_];
            case 10:
             return [0, l1, _t_, _s_];
            case 11:
             return [0, l1, _v_, _u_];
            case 12:
             return [0, l1, _x_, _w_];
            case 13:
             return [0, l1, _z_, _y_];
            case 14:
             return [0, l2, _B_, [0, _A_, [0, next_byte(0)]]];
            case 15:
             return [0, l1, _C_, 11];
            case 16:
             next_byte(0); return [0, l2, _D_, 6];
            case 17:
             return [0, l3, _F_, [1, _E_, [1, next_word(0)]]];
            case 18:
             return [0, l1, _H_, _G_];
            case 19:
             return [0, l1, _J_, _I_];
            case 20:
             return [0, l1, _L_, _K_];
            case 21:
             return [0, l1, _N_, _M_];
            case 22:
             return [0, l2, _P_, [0, _O_, [0, next_byte(0)]]];
            case 23:
             return [0, l1, _Q_, 10];
            case 24:
             var _oz_ = next_byte(0);
             return [0,
                     l2,
                     _R_,
                     [30, 0, caml_call1(Camlboy_lib_Uints[3][1], _oz_)]];
            case 25:
             return [0, l1, _T_, _S_];
            case 26:
             return [0, l1, _V_, _U_];
            case 27:
             return [0, l1, _X_, _W_];
            case 28:
             return [0, l1, _Z_, _Y_];
            case 29:
             return [0, l1, _$_, ___];
            case 30:
             return [0, l2, _ab_, [0, _aa_, [0, next_byte(0)]]];
            default: return [0, l1, _ac_, 12];
          }
         }
         if(192 > _oI_){
          if(160 <= _oI_)
           switch(_oI_){
             case 160:
              return [0, l1, _d6_, _d5_];
             case 161:
              return [0, l1, _d8_, _d7_];
             case 162:
              return [0, l1, _d__, _d9_];
             case 163:
              return [0, l1, _ea_, _d$_];
             case 164:
              return [0, l1, _ec_, _eb_];
             case 165:
              return [0, l1, _ee_, _ed_];
             case 166:
              return [0, l1, _eg_, _ef_];
             case 167:
              return [0, l1, _ei_, _eh_];
             case 168:
              return [0, l1, _ek_, _ej_];
             case 169:
              return [0, l1, _em_, _el_];
             case 170:
              return [0, l1, _eo_, _en_];
             case 171:
              return [0, l1, _eq_, _ep_];
             case 172:
              return [0, l1, _es_, _er_];
             case 173:
              return [0, l1, _eu_, _et_];
             case 174:
              return [0, l1, _ew_, _ev_];
             case 175:
              return [0, l1, _ey_, _ex_];
             case 176:
              return [0, l1, _eA_, _ez_];
             case 177:
              return [0, l1, _eC_, _eB_];
             case 178:
              return [0, l1, _eE_, _eD_];
             case 179:
              return [0, l1, _eG_, _eF_];
             case 180:
              return [0, l1, _eI_, _eH_];
             case 181:
              return [0, l1, _eK_, _eJ_];
             case 182:
              return [0, l1, _eM_, _eL_];
             case 183:
              return [0, l1, _eO_, _eN_];
             case 184:
              return [0, l1, _eQ_, _eP_];
             case 185:
              return [0, l1, _eS_, _eR_];
             case 186:
              return [0, l1, _eU_, _eT_];
             case 187:
              return [0, l1, _eW_, _eV_];
             case 188:
              return [0, l1, _eY_, _eX_];
             case 189:
              return [0, l1, _e0_, _eZ_];
             case 190:
              return [0, l1, _e2_, _e1_];
             default: return [0, l1, _e4_, _e3_];
           }
          switch(_oI_){
            case 128:
             return [0, l1, _c6_, _c5_];
            case 129:
             return [0, l1, _c8_, _c7_];
            case 130:
             return [0, l1, _c__, _c9_];
            case 131:
             return [0, l1, _da_, _c$_];
            case 132:
             return [0, l1, _dc_, _db_];
            case 133:
             return [0, l1, _de_, _dd_];
            case 134:
             return [0, l1, _dg_, _df_];
            case 135:
             return [0, l1, _di_, _dh_];
            case 136:
             return [0, l1, _dk_, _dj_];
            case 137:
             return [0, l1, _dm_, _dl_];
            case 138:
             return [0, l1, _do_, _dn_];
            case 139:
             return [0, l1, _dq_, _dp_];
            case 140:
             return [0, l1, _ds_, _dr_];
            case 141:
             return [0, l1, _du_, _dt_];
            case 142:
             return [0, l1, _dw_, _dv_];
            case 143:
             return [0, l1, _dy_, _dx_];
            case 144:
             return [0, l1, _dA_, _dz_];
            case 145:
             return [0, l1, _dC_, _dB_];
            case 146:
             return [0, l1, _dE_, _dD_];
            case 147:
             return [0, l1, _dG_, _dF_];
            case 148:
             return [0, l1, _dI_, _dH_];
            case 149:
             return [0, l1, _dK_, _dJ_];
            case 150:
             return [0, l1, _dM_, _dL_];
            case 151:
             return [0, l1, _dO_, _dN_];
            case 152:
             return [0, l1, _dQ_, _dP_];
            case 153:
             return [0, l1, _dS_, _dR_];
            case 154:
             return [0, l1, _dU_, _dT_];
            case 155:
             return [0, l1, _dW_, _dV_];
            case 156:
             return [0, l1, _dY_, _dX_];
            case 157:
             return [0, l1, _d0_, _dZ_];
            case 158:
             return [0, l1, _d2_, _d1_];
            default: return [0, l1, _d4_, _d3_];
          }
         }
         if(224 <= _oI_)
          switch(_oI_){
            case 224:
             return [0, l2, _nN_, [0, [7, next_byte(0)], _nM_]];
            case 225:
             return [0, l1, _nP_, _nO_];
            case 226:
             return [0, l1, _nR_, _nQ_];
            case 227:
             return [0, l1, _nS_, 4];
            case 228:
             return [0, l1, _nT_, 4];
            case 229:
             return [0, l1, _nV_, _nU_];
            case 230:
             return [0, l2, _nX_, [8, _nW_, [0, next_byte(0)]]];
            case 231:
             return [0, l1, _nY_, [32, x20]];
            case 232:
             var _oG_ = next_byte(0);
             return [0,
                     l2,
                     _nZ_,
                     [4, caml_call1(Camlboy_lib_Uints[3][1], _oG_)]];
            case 233:
             return [0, l1, _n1_, _n0_];
            case 234:
             return [0, l3, _n3_, [0, [2, next_word(0)], _n2_]];
            case 235:
             return [0, l1, _n4_, 4];
            case 236:
             return [0, l1, _n5_, 4];
            case 237:
             return [0, l1, _n6_, 4];
            case 238:
             return [0, l2, _n8_, [10, _n7_, [0, next_byte(0)]]];
            case 239:
             return [0, l1, _n9_, [32, x28]];
            case 240:
             return [0, l2, _n$_, [0, _n__, [7, next_byte(0)]]];
            case 241:
             return [0, l1, _ob_, _oa_];
            case 242:
             return [0, l1, _od_, _oc_];
            case 243:
             return [0, l1, _oe_, 7];
            case 244:
             return [0, l1, _of_, 4];
            case 245:
             return [0, l1, _oh_, _og_];
            case 246:
             return [0, l2, _oj_, [9, _oi_, [0, next_byte(0)]]];
            case 247:
             return [0, l1, _ok_, [32, x30]];
            case 248:
             var _oH_ = next_byte(0);
             return [0,
                     l2,
                     _om_,
                     [1, _ol_, [8, caml_call1(Camlboy_lib_Uints[3][1], _oH_)]]];
            case 249:
             return [0, l1, _oo_, _on_];
            case 250:
             return [0, l3, _oq_, [0, _op_, [2, next_word(0)]]];
            case 251:
             return [0, l1, _or_, 8];
            case 252:
             return [0, l1, _os_, 4];
            case 253:
             return [0, l1, _ot_, 4];
            case 254:
             return [0, l2, _ov_, [11, _ou_, [0, next_byte(0)]]];
            default: return [0, l1, _ow_, [32, x38]];
          }
         switch(_oI_){
           case 192:
            return [0, l1, _e6_, _e5_];
           case 193:
            return [0, l1, _e8_, _e7_];
           case 194:
            return [0, l3, _e9_, [29, 1, [1, next_word(0)]]];
           case 195:
            return [0, l3, _e__, [29, 0, [1, next_word(0)]]];
           case 196:
            return [0, l3, _e$_, [31, 1, next_word(0)]];
           case 197:
            return [0, l1, _fb_, _fa_];
           case 198:
            return [0, l2, _fd_, [2, _fc_, [0, next_byte(0)]]];
           case 199:
            return [0, l1, _fe_, [32, x00]];
           case 200:
            return [0, l1, _fg_, _ff_];
           case 201:
            return [0, l1, _fi_, _fh_];
           case 202:
            return [0, l3, _fj_, [29, 2, [1, next_word(0)]]];
           case 203:
            var
             _oE_ = next_byte(0),
             op$0 = caml_call1(Camlboy_lib_Uints[1][21], _oE_);
            if(255 < op$0 >>> 0){
             var _oF_ = caml_call2(Stdlib_Printf[4], _fk_, op$0);
             return caml_call1(Stdlib[2], _oF_);
            }
            var _oJ_ = op$0;
            if(128 <= _oJ_){
             if(192 <= _oJ_){
              if(224 <= _oJ_)
               switch(_oJ_){
                 case 224:
                  return [0, l2, _mm_, _ml_];
                 case 225:
                  return [0, l2, _mo_, _mn_];
                 case 226:
                  return [0, l2, _mq_, _mp_];
                 case 227:
                  return [0, l2, _ms_, _mr_];
                 case 228:
                  return [0, l2, _mu_, _mt_];
                 case 229:
                  return [0, l2, _mw_, _mv_];
                 case 230:
                  return [0, l2, _my_, _mx_];
                 case 231:
                  return [0, l2, _mA_, _mz_];
                 case 232:
                  return [0, l2, _mC_, _mB_];
                 case 233:
                  return [0, l2, _mE_, _mD_];
                 case 234:
                  return [0, l2, _mG_, _mF_];
                 case 235:
                  return [0, l2, _mI_, _mH_];
                 case 236:
                  return [0, l2, _mK_, _mJ_];
                 case 237:
                  return [0, l2, _mM_, _mL_];
                 case 238:
                  return [0, l2, _mO_, _mN_];
                 case 239:
                  return [0, l2, _mQ_, _mP_];
                 case 240:
                  return [0, l2, _mS_, _mR_];
                 case 241:
                  return [0, l2, _mU_, _mT_];
                 case 242:
                  return [0, l2, _mW_, _mV_];
                 case 243:
                  return [0, l2, _mY_, _mX_];
                 case 244:
                  return [0, l2, _m0_, _mZ_];
                 case 245:
                  return [0, l2, _m2_, _m1_];
                 case 246:
                  return [0, l2, _m4_, _m3_];
                 case 247:
                  return [0, l2, _m6_, _m5_];
                 case 248:
                  return [0, l2, _m8_, _m7_];
                 case 249:
                  return [0, l2, _m__, _m9_];
                 case 250:
                  return [0, l2, _na_, _m$_];
                 case 251:
                  return [0, l2, _nc_, _nb_];
                 case 252:
                  return [0, l2, _ne_, _nd_];
                 case 253:
                  return [0, l2, _ng_, _nf_];
                 case 254:
                  return [0, l2, _ni_, _nh_];
                 default: return [0, l2, _nk_, _nj_];
               }
              switch(_oJ_){
                case 192:
                 return [0, l2, _lm_, _ll_];
                case 193:
                 return [0, l2, _lo_, _ln_];
                case 194:
                 return [0, l2, _lq_, _lp_];
                case 195:
                 return [0, l2, _ls_, _lr_];
                case 196:
                 return [0, l2, _lu_, _lt_];
                case 197:
                 return [0, l2, _lw_, _lv_];
                case 198:
                 return [0, l2, _ly_, _lx_];
                case 199:
                 return [0, l2, _lA_, _lz_];
                case 200:
                 return [0, l2, _lC_, _lB_];
                case 201:
                 return [0, l2, _lE_, _lD_];
                case 202:
                 return [0, l2, _lG_, _lF_];
                case 203:
                 return [0, l2, _lI_, _lH_];
                case 204:
                 return [0, l2, _lK_, _lJ_];
                case 205:
                 return [0, l2, _lM_, _lL_];
                case 206:
                 return [0, l2, _lO_, _lN_];
                case 207:
                 return [0, l2, _lQ_, _lP_];
                case 208:
                 return [0, l2, _lS_, _lR_];
                case 209:
                 return [0, l2, _lU_, _lT_];
                case 210:
                 return [0, l2, _lW_, _lV_];
                case 211:
                 return [0, l2, _lY_, _lX_];
                case 212:
                 return [0, l2, _l0_, _lZ_];
                case 213:
                 return [0, l2, _l2_, _l1_];
                case 214:
                 return [0, l2, _l4_, _l3_];
                case 215:
                 return [0, l2, _l6_, _l5_];
                case 216:
                 return [0, l2, _l8_, _l7_];
                case 217:
                 return [0, l2, _l__, _l9_];
                case 218:
                 return [0, l2, _ma_, _l$_];
                case 219:
                 return [0, l2, _mc_, _mb_];
                case 220:
                 return [0, l2, _me_, _md_];
                case 221:
                 return [0, l2, _mg_, _mf_];
                case 222:
                 return [0, l2, _mi_, _mh_];
                default: return [0, l2, _mk_, _mj_];
              }
             }
             if(160 <= _oJ_)
              switch(_oJ_){
                case 160:
                 return [0, l2, _km_, _kl_];
                case 161:
                 return [0, l2, _ko_, _kn_];
                case 162:
                 return [0, l2, _kq_, _kp_];
                case 163:
                 return [0, l2, _ks_, _kr_];
                case 164:
                 return [0, l2, _ku_, _kt_];
                case 165:
                 return [0, l2, _kw_, _kv_];
                case 166:
                 return [0, l2, _ky_, _kx_];
                case 167:
                 return [0, l2, _kA_, _kz_];
                case 168:
                 return [0, l2, _kC_, _kB_];
                case 169:
                 return [0, l2, _kE_, _kD_];
                case 170:
                 return [0, l2, _kG_, _kF_];
                case 171:
                 return [0, l2, _kI_, _kH_];
                case 172:
                 return [0, l2, _kK_, _kJ_];
                case 173:
                 return [0, l2, _kM_, _kL_];
                case 174:
                 return [0, l2, _kO_, _kN_];
                case 175:
                 return [0, l2, _kQ_, _kP_];
                case 176:
                 return [0, l2, _kS_, _kR_];
                case 177:
                 return [0, l2, _kU_, _kT_];
                case 178:
                 return [0, l2, _kW_, _kV_];
                case 179:
                 return [0, l2, _kY_, _kX_];
                case 180:
                 return [0, l2, _k0_, _kZ_];
                case 181:
                 return [0, l2, _k2_, _k1_];
                case 182:
                 return [0, l2, _k4_, _k3_];
                case 183:
                 return [0, l2, _k6_, _k5_];
                case 184:
                 return [0, l2, _k8_, _k7_];
                case 185:
                 return [0, l2, _k__, _k9_];
                case 186:
                 return [0, l2, _la_, _k$_];
                case 187:
                 return [0, l2, _lc_, _lb_];
                case 188:
                 return [0, l2, _le_, _ld_];
                case 189:
                 return [0, l2, _lg_, _lf_];
                case 190:
                 return [0, l2, _li_, _lh_];
                default: return [0, l2, _lk_, _lj_];
              }
             switch(_oJ_){
               case 128:
                return [0, l2, _jm_, _jl_];
               case 129:
                return [0, l2, _jo_, _jn_];
               case 130:
                return [0, l2, _jq_, _jp_];
               case 131:
                return [0, l2, _js_, _jr_];
               case 132:
                return [0, l2, _ju_, _jt_];
               case 133:
                return [0, l2, _jw_, _jv_];
               case 134:
                return [0, l2, _jy_, _jx_];
               case 135:
                return [0, l2, _jA_, _jz_];
               case 136:
                return [0, l2, _jC_, _jB_];
               case 137:
                return [0, l2, _jE_, _jD_];
               case 138:
                return [0, l2, _jG_, _jF_];
               case 139:
                return [0, l2, _jI_, _jH_];
               case 140:
                return [0, l2, _jK_, _jJ_];
               case 141:
                return [0, l2, _jM_, _jL_];
               case 142:
                return [0, l2, _jO_, _jN_];
               case 143:
                return [0, l2, _jQ_, _jP_];
               case 144:
                return [0, l2, _jS_, _jR_];
               case 145:
                return [0, l2, _jU_, _jT_];
               case 146:
                return [0, l2, _jW_, _jV_];
               case 147:
                return [0, l2, _jY_, _jX_];
               case 148:
                return [0, l2, _j0_, _jZ_];
               case 149:
                return [0, l2, _j2_, _j1_];
               case 150:
                return [0, l2, _j4_, _j3_];
               case 151:
                return [0, l2, _j6_, _j5_];
               case 152:
                return [0, l2, _j8_, _j7_];
               case 153:
                return [0, l2, _j__, _j9_];
               case 154:
                return [0, l2, _ka_, _j$_];
               case 155:
                return [0, l2, _kc_, _kb_];
               case 156:
                return [0, l2, _ke_, _kd_];
               case 157:
                return [0, l2, _kg_, _kf_];
               case 158:
                return [0, l2, _ki_, _kh_];
               default: return [0, l2, _kk_, _kj_];
             }
            }
            if(64 <= _oJ_){
             if(96 <= _oJ_)
              switch(_oJ_){
                case 96:
                 return [0, l2, _im_, _il_];
                case 97:
                 return [0, l2, _io_, _in_];
                case 98:
                 return [0, l2, _iq_, _ip_];
                case 99:
                 return [0, l2, _is_, _ir_];
                case 100:
                 return [0, l2, _iu_, _it_];
                case 101:
                 return [0, l2, _iw_, _iv_];
                case 102:
                 return [0, l2, _iy_, _ix_];
                case 103:
                 return [0, l2, _iA_, _iz_];
                case 104:
                 return [0, l2, _iC_, _iB_];
                case 105:
                 return [0, l2, _iE_, _iD_];
                case 106:
                 return [0, l2, _iG_, _iF_];
                case 107:
                 return [0, l2, _iI_, _iH_];
                case 108:
                 return [0, l2, _iK_, _iJ_];
                case 109:
                 return [0, l2, _iM_, _iL_];
                case 110:
                 return [0, l2, _iO_, _iN_];
                case 111:
                 return [0, l2, _iQ_, _iP_];
                case 112:
                 return [0, l2, _iS_, _iR_];
                case 113:
                 return [0, l2, _iU_, _iT_];
                case 114:
                 return [0, l2, _iW_, _iV_];
                case 115:
                 return [0, l2, _iY_, _iX_];
                case 116:
                 return [0, l2, _i0_, _iZ_];
                case 117:
                 return [0, l2, _i2_, _i1_];
                case 118:
                 return [0, l2, _i4_, _i3_];
                case 119:
                 return [0, l2, _i6_, _i5_];
                case 120:
                 return [0, l2, _i8_, _i7_];
                case 121:
                 return [0, l2, _i__, _i9_];
                case 122:
                 return [0, l2, _ja_, _i$_];
                case 123:
                 return [0, l2, _jc_, _jb_];
                case 124:
                 return [0, l2, _je_, _jd_];
                case 125:
                 return [0, l2, _jg_, _jf_];
                case 126:
                 return [0, l2, _ji_, _jh_];
                default: return [0, l2, _jk_, _jj_];
              }
             switch(_oJ_){
               case 64:
                return [0, l2, _hm_, _hl_];
               case 65:
                return [0, l2, _ho_, _hn_];
               case 66:
                return [0, l2, _hq_, _hp_];
               case 67:
                return [0, l2, _hs_, _hr_];
               case 68:
                return [0, l2, _hu_, _ht_];
               case 69:
                return [0, l2, _hw_, _hv_];
               case 70:
                return [0, l2, _hy_, _hx_];
               case 71:
                return [0, l2, _hA_, _hz_];
               case 72:
                return [0, l2, _hC_, _hB_];
               case 73:
                return [0, l2, _hE_, _hD_];
               case 74:
                return [0, l2, _hG_, _hF_];
               case 75:
                return [0, l2, _hI_, _hH_];
               case 76:
                return [0, l2, _hK_, _hJ_];
               case 77:
                return [0, l2, _hM_, _hL_];
               case 78:
                return [0, l2, _hO_, _hN_];
               case 79:
                return [0, l2, _hQ_, _hP_];
               case 80:
                return [0, l2, _hS_, _hR_];
               case 81:
                return [0, l2, _hU_, _hT_];
               case 82:
                return [0, l2, _hW_, _hV_];
               case 83:
                return [0, l2, _hY_, _hX_];
               case 84:
                return [0, l2, _h0_, _hZ_];
               case 85:
                return [0, l2, _h2_, _h1_];
               case 86:
                return [0, l2, _h4_, _h3_];
               case 87:
                return [0, l2, _h6_, _h5_];
               case 88:
                return [0, l2, _h8_, _h7_];
               case 89:
                return [0, l2, _h__, _h9_];
               case 90:
                return [0, l2, _ia_, _h$_];
               case 91:
                return [0, l2, _ic_, _ib_];
               case 92:
                return [0, l2, _ie_, _id_];
               case 93:
                return [0, l2, _ig_, _if_];
               case 94:
                return [0, l2, _ii_, _ih_];
               default: return [0, l2, _ik_, _ij_];
             }
            }
            if(32 <= _oJ_)
             switch(_oJ_){
               case 32:
                return [0, l2, _gm_, _gl_];
               case 33:
                return [0, l2, _go_, _gn_];
               case 34:
                return [0, l2, _gq_, _gp_];
               case 35:
                return [0, l2, _gs_, _gr_];
               case 36:
                return [0, l2, _gu_, _gt_];
               case 37:
                return [0, l2, _gw_, _gv_];
               case 38:
                return [0, l2, _gy_, _gx_];
               case 39:
                return [0, l2, _gA_, _gz_];
               case 40:
                return [0, l2, _gC_, _gB_];
               case 41:
                return [0, l2, _gE_, _gD_];
               case 42:
                return [0, l2, _gG_, _gF_];
               case 43:
                return [0, l2, _gI_, _gH_];
               case 44:
                return [0, l2, _gK_, _gJ_];
               case 45:
                return [0, l2, _gM_, _gL_];
               case 46:
                return [0, l2, _gO_, _gN_];
               case 47:
                return [0, l2, _gQ_, _gP_];
               case 48:
                return [0, l2, _gS_, _gR_];
               case 49:
                return [0, l2, _gU_, _gT_];
               case 50:
                return [0, l2, _gW_, _gV_];
               case 51:
                return [0, l2, _gY_, _gX_];
               case 52:
                return [0, l2, _g0_, _gZ_];
               case 53:
                return [0, l2, _g2_, _g1_];
               case 54:
                return [0, l2, _g4_, _g3_];
               case 55:
                return [0, l2, _g6_, _g5_];
               case 56:
                return [0, l2, _g8_, _g7_];
               case 57:
                return [0, l2, _g__, _g9_];
               case 58:
                return [0, l2, _ha_, _g$_];
               case 59:
                return [0, l2, _hc_, _hb_];
               case 60:
                return [0, l2, _he_, _hd_];
               case 61:
                return [0, l2, _hg_, _hf_];
               case 62:
                return [0, l2, _hi_, _hh_];
               default: return [0, l2, _hk_, _hj_];
             }
            switch(_oJ_){
              case 0:
               return [0, l2, _fm_, _fl_];
              case 1:
               return [0, l2, _fo_, _fn_];
              case 2:
               return [0, l2, _fq_, _fp_];
              case 3:
               return [0, l2, _fs_, _fr_];
              case 4:
               return [0, l2, _fu_, _ft_];
              case 5:
               return [0, l2, _fw_, _fv_];
              case 6:
               return [0, l2, _fy_, _fx_];
              case 7:
               return [0, l2, _fA_, _fz_];
              case 8:
               return [0, l2, _fC_, _fB_];
              case 9:
               return [0, l2, _fE_, _fD_];
              case 10:
               return [0, l2, _fG_, _fF_];
              case 11:
               return [0, l2, _fI_, _fH_];
              case 12:
               return [0, l2, _fK_, _fJ_];
              case 13:
               return [0, l2, _fM_, _fL_];
              case 14:
               return [0, l2, _fO_, _fN_];
              case 15:
               return [0, l2, _fQ_, _fP_];
              case 16:
               return [0, l2, _fS_, _fR_];
              case 17:
               return [0, l2, _fU_, _fT_];
              case 18:
               return [0, l2, _fW_, _fV_];
              case 19:
               return [0, l2, _fY_, _fX_];
              case 20:
               return [0, l2, _f0_, _fZ_];
              case 21:
               return [0, l2, _f2_, _f1_];
              case 22:
               return [0, l2, _f4_, _f3_];
              case 23:
               return [0, l2, _f6_, _f5_];
              case 24:
               return [0, l2, _f8_, _f7_];
              case 25:
               return [0, l2, _f__, _f9_];
              case 26:
               return [0, l2, _ga_, _f$_];
              case 27:
               return [0, l2, _gc_, _gb_];
              case 28:
               return [0, l2, _ge_, _gd_];
              case 29:
               return [0, l2, _gg_, _gf_];
              case 30:
               return [0, l2, _gi_, _gh_];
              default: return [0, l2, _gk_, _gj_];
            }
           case 204:
            return [0, l3, _nl_, [31, 2, next_word(0)]];
           case 205:
            return [0, l3, _nm_, [31, 0, next_word(0)]];
           case 206:
            return [0, l2, _no_, [5, _nn_, [0, next_byte(0)]]];
           case 207:
            return [0, l1, _np_, [32, x08]];
           case 208:
            return [0, l1, _nr_, _nq_];
           case 209:
            return [0, l1, _nt_, _ns_];
           case 210:
            return [0, l3, _nu_, [29, 3, [1, next_word(0)]]];
           case 211:
            return [0, l1, _nv_, 4];
           case 212:
            return [0, l3, _nw_, [31, 3, next_word(0)]];
           case 213:
            return [0, l1, _ny_, _nx_];
           case 214:
            return [0, l2, _nA_, [6, _nz_, [0, next_byte(0)]]];
           case 215:
            return [0, l1, _nB_, [32, x10]];
           case 216:
            return [0, l1, _nD_, _nC_];
           case 217:
            return [0, l1, _nE_, 13];
           case 218:
            return [0, l3, _nF_, [29, 4, [1, next_word(0)]]];
           case 219:
            return [0, l1, _nG_, 4];
           case 220:
            return [0, l3, _nH_, [31, 4, next_word(0)]];
           case 221:
            return [0, l1, _nI_, 4];
           case 222:
            return [0, l2, _nK_, [7, _nJ_, [0, next_byte(0)]]];
           default: return [0, l1, _nL_, [32, x18]];
         }
        }
        return [0, f];
       }];
   runtime.caml_register_global
    (976, Camlboy_lib_Fetch_and_decode, "Camlboy_lib__Fetch_and_decode");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Camlboy_lib__Cartridge_intf
(function(globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Camlboy_lib_Cartridge_intf = [0];
   runtime.caml_register_global
    (0, Camlboy_lib_Cartridge_intf, "Camlboy_lib__Cartridge_intf");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Camlboy_lib__Detect_cartridge
//# unitInfo: Requires: Assert_failure, Camlboy_lib__Cartridge_header, Camlboy_lib__Mbc1, Camlboy_lib__Rom_only
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Camlboy_lib_Cartridge_header = global_data.Camlboy_lib__Cartridge_header,
    Assert_failure = global_data.Assert_failure,
    Camlboy_lib_Mbc1 = global_data.Camlboy_lib__Mbc1,
    Camlboy_lib_Rom_only = global_data.Camlboy_lib__Rom_only,
    _a_ = [0, "lib/cartridge/detect_cartridge.ml", 11, 31];
   function f(rom_bytes){
    var
     _b_ = caml_call1(Camlboy_lib_Cartridge_header[1], rom_bytes),
     type = caml_call1(Camlboy_lib_Cartridge_header[2], _b_);
    if(! type) return Camlboy_lib_Rom_only;
    if(4 <= type)
     throw caml_maybe_attach_backtrace([0, Assert_failure, _a_], 1);
    return Camlboy_lib_Mbc1;
   }
   var Camlboy_lib_Detect_cartridge = [0, f];
   runtime.caml_register_global
    (5, Camlboy_lib_Detect_cartridge, "Camlboy_lib__Detect_cartridge");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Camlboy_lib__Cpu
//# unitInfo: Requires: Assert_failure, Camlboy_lib__Fetch_and_decode, Camlboy_lib__Interrupt_controller, Camlboy_lib__Registers, Camlboy_lib__Uints, Stdlib, Stdlib__Printf
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Invalid_arugment = "Invalid arugment",
    caml_equal = runtime.caml_equal,
    caml_greaterthan = runtime.caml_greaterthan,
    caml_lessthan = runtime.caml_lessthan,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) === 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Camlboy_lib_Uints = global_data.Camlboy_lib__Uints,
    Camlboy_lib_Registers = global_data.Camlboy_lib__Registers,
    Stdlib_Printf = global_data.Stdlib__Printf,
    Camlboy_lib_Interrupt_controll =
      global_data.Camlboy_lib__Interrupt_controller,
    Stdlib = global_data.Stdlib,
    Assert_failure = global_data.Assert_failure,
    Camlboy_lib_Fetch_and_decode = global_data.Camlboy_lib__Fetch_and_decode,
    _a_ = [0, 0],
    _b_ = [0, 0],
    _c_ = [0, [11, cst_Invalid_arugment, 0], cst_Invalid_arugment],
    _d_ = [0, 0],
    _e_ = [0, 1],
    _f_ = [0, 1],
    _g_ = [0, 1],
    _h_ = [0, 0],
    _i_ = [0, 0],
    _j_ = [0, 0],
    _k_ = [0, 0],
    _l_ = [0, 1],
    _m_ = [0, "lib/cpu/cpu.ml", 279, 16],
    _n_ = [0, 0],
    _o_ = [0, 0],
    _p_ = [0, 0],
    _q_ = [0, 0],
    _r_ = [0, 0],
    _s_ = [0, 0],
    _t_ = [0, 0],
    _u_ = [0, 0],
    _v_ = [0, 0],
    _w_ = [0, 0],
    _x_ = [0, 0],
    _y_ = [0, 0],
    _z_ = [0, 0],
    _A_ = [0, 0],
    _B_ = [0, 0],
    _C_ = [0, 0],
    _D_ = [0, 0],
    _E_ = [0, 1],
    _F_ = [0, 1],
    _G_ = [0, 0],
    _H_ = [0, 1],
    _I_ = [0, 0],
    _J_ = [0, 0],
    _K_ = [0, 0],
    _L_ = [0, 0],
    _M_ = [0, 0],
    _N_ = [0, 0],
    _O_ = [0, 0],
    _P_ = [0, 1],
    _Q_ = [0, 0],
    _R_ = [0, 1],
    _S_ = [0, 0],
    _T_ = [0, 0],
    _U_ = [0, 0],
    _V_ = [0, 0],
    _W_ = [0, 0],
    _X_ = [0, 0],
    _Y_ = [0, 0],
    _Z_ = [0, 0],
    ___ = [0, 0],
    _$_ = [0, 0],
    _aa_ = [0, 0],
    _ab_ = [0, 0],
    _ac_ = [0, 0],
    _ad_ = [0, 0],
    _ae_ = [0, 0],
    _af_ = [0, 0],
    _ag_ = [0, 0],
    _ah_ = [0, 0],
    _ai_ = [0, 1],
    _aj_ =
      [0,
       [2, 0, [11, " SP:", [2, 0, [11, " PC:", [2, 0, 0]]]]],
       "%s SP:%s PC:%s"],
    dummy = 0,
    Camlboy_lib_Cpu =
      [0,
       function(Bus){
        var
         Fetch_and_decode = caml_call1(Camlboy_lib_Fetch_and_decode[1], Bus);
        function create(bus, ic, registers, sp, pc, halted, ime){
         return [0, registers, bus, ic, pc, sp, halted, ime, 0, 4];
        }
        function execute(t, inst_info){
         var
          inst = inst_info[3],
          mcycles = inst_info[2],
          branched_mcycles = mcycles[2],
          not_branched_mcycles = mcycles[1],
          set_flags = caml_call1(Camlboy_lib_Registers[8], t[1]);
         function read(arg){
          if(typeof arg === "number")
           switch(arg){
             case 0:
              var
               c = caml_call2(Camlboy_lib_Registers[2], t[1], 2),
               _cU_ = caml_call1(Camlboy_lib_Uints[2][36], c),
               _cV_ = caml_call1(Camlboy_lib_Uints[2][20], 65280),
               addr = caml_call2(Camlboy_lib_Uints[2][23], _cV_, _cU_);
              return caml_call2(Bus[1], t[2], addr);
             case 1:
              var
               addr$0 = caml_call2(Camlboy_lib_Registers[4], t[1], 3),
               _cW_ = caml_call1(Camlboy_lib_Uints[2][13], addr$0);
              caml_call3(Camlboy_lib_Registers[5], t[1], 3, _cW_);
              return caml_call2(Bus[1], t[2], addr$0);
             case 2:
              var
               addr$1 = caml_call2(Camlboy_lib_Registers[4], t[1], 3),
               _cX_ = caml_call1(Camlboy_lib_Uints[2][14], addr$1);
              caml_call3(Camlboy_lib_Registers[5], t[1], 3, _cX_);
              return caml_call2(Bus[1], t[2], addr$1);
             default: return t[5];
           }
          switch(arg[0]){
            case 0:
             var n = arg[1]; return n;
            case 1:
             var n$0 = arg[1]; return n$0;
            case 2:
             var addr$2 = arg[1]; return caml_call2(Bus[1], t[2], addr$2);
            case 3:
             var addr$3 = arg[1]; return caml_call2(Bus[4], t[2], addr$3);
            case 4:
             var r = arg[1];
             return caml_call2(Camlboy_lib_Registers[2], t[1], r);
            case 5:
             var rr = arg[1];
             return caml_call2(Camlboy_lib_Registers[4], t[1], rr);
            case 6:
             var
              rr$0 = arg[1],
              addr$4 = caml_call2(Camlboy_lib_Registers[4], t[1], rr$0);
             return caml_call2(Bus[1], t[2], addr$4);
            case 7:
             var
              n$1 = arg[1],
              _cY_ = caml_call1(Camlboy_lib_Uints[2][36], n$1),
              _cZ_ = caml_call1(Camlboy_lib_Uints[2][20], 65280),
              addr$5 = caml_call2(Camlboy_lib_Uints[2][23], _cZ_, _cY_);
             return caml_call2(Bus[1], t[2], addr$5);
            default:
             var
              n$2 = arg[1],
              sp = caml_call1(Camlboy_lib_Uints[2][21], t[5]),
              n$3 = caml_call1(Camlboy_lib_Uints[3][3], n$2);
             caml_call5
              (set_flags,
               [0, 255 < ((sp & 255) + (n$3 & 255) | 0) ? 1 : 0],
               [0, 15 < ((sp & 15) + (n$3 & 15) | 0) ? 1 : 0],
               _b_,
               _a_,
               0);
             return caml_call1(Camlboy_lib_Uints[2][20], sp + n$3 | 0);
          }
         }
         function symbol(x, y){
          if(typeof x === "number")
           switch(x){
             case 0:
              var
               c = caml_call2(Camlboy_lib_Registers[2], t[1], 2),
               _cN_ = caml_call1(Camlboy_lib_Uints[2][36], c),
               _cO_ = caml_call1(Camlboy_lib_Uints[2][20], 65280),
               addr = caml_call2(Camlboy_lib_Uints[2][23], _cO_, _cN_);
              return caml_call3(Bus[2], t[2], addr, y);
             case 1:
              var addr$0 = caml_call2(Camlboy_lib_Registers[4], t[1], 3);
              caml_call3(Bus[2], t[2], addr$0, y);
              var _cP_ = caml_call1(Camlboy_lib_Uints[2][13], addr$0);
              return caml_call3(Camlboy_lib_Registers[5], t[1], 3, _cP_);
             case 2:
              var addr$1 = caml_call2(Camlboy_lib_Registers[4], t[1], 3);
              caml_call3(Bus[2], t[2], addr$1, y);
              var _cQ_ = caml_call1(Camlboy_lib_Uints[2][14], addr$1);
              return caml_call3(Camlboy_lib_Registers[5], t[1], 3, _cQ_);
             default: t[5] = y; return;
           }
          switch(x[0]){
            case 2:
             var addr$2 = x[1]; return caml_call3(Bus[2], t[2], addr$2, y);
            case 3:
             var addr$3 = x[1]; return caml_call3(Bus[5], t[2], addr$3, y);
            case 4:
             var r = x[1];
             return caml_call3(Camlboy_lib_Registers[3], t[1], r, y);
            case 5:
             var rr = x[1];
             return caml_call3(Camlboy_lib_Registers[5], t[1], rr, y);
            case 6:
             var
              rr$0 = x[1],
              addr$4 = caml_call2(Camlboy_lib_Registers[4], t[1], rr$0);
             return caml_call3(Bus[2], t[2], addr$4, y);
            case 7:
             var
              n = x[1],
              _cS_ = caml_call1(Camlboy_lib_Uints[2][36], n),
              _cT_ = caml_call1(Camlboy_lib_Uints[2][20], 65280),
              addr$5 = caml_call2(Camlboy_lib_Uints[2][23], _cT_, _cS_);
             return caml_call3(Bus[2], t[2], addr$5, y);
            default:
             var _cR_ = caml_call1(Stdlib_Printf[4], _c_);
             return caml_call1(Stdlib[2], _cR_);
          }
         }
         function check_condition(t, param){
          switch(param){
            case 0:
             return 1;
            case 1:
             return 1 - caml_call2(Camlboy_lib_Registers[6], t[1], 3);
            case 2:
             return caml_call2(Camlboy_lib_Registers[6], t[1], 3);
            case 3:
             return 1 - caml_call2(Camlboy_lib_Registers[6], t[1], 0);
            default: return caml_call2(Camlboy_lib_Registers[6], t[1], 0);
          }
         }
         if(typeof inst === "number")
          switch(inst){
            case 0:
             var
              n_flag = caml_call2(Camlboy_lib_Registers[6], t[1], 2),
              c_flag = caml_call2(Camlboy_lib_Registers[6], t[1], 0),
              h_flag = caml_call2(Camlboy_lib_Registers[6], t[1], 1),
              a = [0, caml_call2(Camlboy_lib_Registers[2], t[1], 0)];
             if(n_flag){
              if(c_flag){
               var _ao_ = caml_call1(Camlboy_lib_Uints[1][20], 96);
               a[1] = caml_call2(Camlboy_lib_Uints[1][24], a[1], _ao_);
              }
              if(h_flag){
               var _ap_ = caml_call1(Camlboy_lib_Uints[1][20], 6);
               a[1] = caml_call2(Camlboy_lib_Uints[1][24], a[1], _ap_);
              }
             }
             else{
              if(c_flag)
               var c_flag$0 = c_flag;
              else
               var
                _au_ = caml_call1(Camlboy_lib_Uints[1][20], 153),
                c_flag$0 = caml_greaterthan(a[1], _au_);
              if(c_flag$0){
               var _aq_ = caml_call1(Camlboy_lib_Uints[1][20], 96);
               a[1] = caml_call2(Camlboy_lib_Uints[1][23], a[1], _aq_);
               caml_call5(set_flags, _e_, 0, 0, 0, 0);
              }
              if(h_flag)
               var h_flag$0 = h_flag;
              else
               var
                _as_ = caml_call1(Camlboy_lib_Uints[1][20], 9),
                _at_ = caml_call1(Camlboy_lib_Uints[1][20], 15),
                h_flag$0 =
                  caml_greaterthan
                   (caml_call2(Camlboy_lib_Uints[1][31], a[1], _at_), _as_);
              if(h_flag$0){
               var _ar_ = caml_call1(Camlboy_lib_Uints[1][20], 6);
               a[1] = caml_call2(Camlboy_lib_Uints[1][23], a[1], _ar_);
              }
             }
             caml_call5
              (set_flags,
               0,
               _d_,
               0,
               [0,
                caml_call2
                 (Camlboy_lib_Uints[1][27], a[1], Camlboy_lib_Uints[1][3])],
               0);
             caml_call3(Camlboy_lib_Registers[3], t[1], 0, a[1]);
             var next_pc = 0;
             break;
            case 1:
             caml_call5(set_flags, 0, _g_, _f_, 0, 0);
             var
              n = caml_call2(Camlboy_lib_Registers[2], t[1], 0),
              _av_ =
                caml_call2
                 (Camlboy_lib_Uints[1][33], n, Camlboy_lib_Uints[1][2]);
             caml_call1(caml_call2(Camlboy_lib_Registers[3], t[1], 0), _av_);
             var next_pc = 0;
             break;
            case 2:
             var c = caml_call2(Camlboy_lib_Registers[6], t[1], 0);
             caml_call5(set_flags, [0, 1 - c], _i_, _h_, 0, 0);
             var next_pc = 0;
             break;
            case 3:
             caml_call5(set_flags, _l_, _k_, _j_, 0, 0);
             var next_pc = 0;
             break;
            case 4:
             var next_pc = 0; break;
            case 5:
             t[6] = 1; var next_pc = 0; break;
            case 6:
             throw caml_maybe_attach_backtrace([0, Assert_failure, _m_], 1);
            case 7:
             t[8] = 0; t[7] = 0; var next_pc = 0; break;
            case 8:
             t[8] = 1; var next_pc = 0; break;
            case 9:
             var
              a$0 = caml_call2(Camlboy_lib_Registers[2], t[1], 0),
              _aw_ = Camlboy_lib_Uints[1][3],
              _ax_ = caml_call1(Camlboy_lib_Uints[1][20], 128),
              _ay_ = caml_call2(Camlboy_lib_Uints[1][31], a$0, _ax_),
              c$0 = caml_call2(Camlboy_lib_Uints[1][28], _ay_, _aw_),
              _az_ = c$0 ? Camlboy_lib_Uints[1][4] : Camlboy_lib_Uints[1][3],
              _aA_ = caml_call2(Camlboy_lib_Uints[1][34], a$0, 1),
              n$0 = caml_call2(Camlboy_lib_Uints[1][32], _aA_, _az_);
             caml_call3(Camlboy_lib_Registers[3], t[1], 0, n$0);
             caml_call5(set_flags, [0, c$0], _p_, _o_, _n_, 0);
             var next_pc = 0;
             break;
            case 10:
             var
              a$1 = caml_call2(Camlboy_lib_Registers[2], t[1], 0),
              old_c = caml_call2(Camlboy_lib_Registers[6], t[1], 0),
              _aB_ = old_c ? Camlboy_lib_Uints[1][4] : Camlboy_lib_Uints[1][3],
              _aC_ = caml_call2(Camlboy_lib_Uints[1][34], a$1, 1),
              n$1 = caml_call2(Camlboy_lib_Uints[1][32], _aC_, _aB_);
             caml_call3(Camlboy_lib_Registers[3], t[1], 0, n$1);
             var
              _aD_ = Camlboy_lib_Uints[1][3],
              _aE_ = caml_call1(Camlboy_lib_Uints[1][20], 128),
              _aF_ = caml_call2(Camlboy_lib_Uints[1][31], a$1, _aE_),
              new_c = caml_call2(Camlboy_lib_Uints[1][28], _aF_, _aD_);
             caml_call5(set_flags, [0, new_c], _s_, _r_, _q_, 0);
             var next_pc = 0;
             break;
            case 11:
             var
              a$2 = caml_call2(Camlboy_lib_Registers[2], t[1], 0),
              _aG_ = Camlboy_lib_Uints[1][3],
              _aH_ = caml_call1(Camlboy_lib_Uints[1][20], 1),
              _aI_ = caml_call2(Camlboy_lib_Uints[1][31], a$2, _aH_),
              c$1 = caml_call2(Camlboy_lib_Uints[1][28], _aI_, _aG_),
              _aJ_ =
                c$1
                 ? caml_call1(Camlboy_lib_Uints[1][20], 128)
                 : Camlboy_lib_Uints[1][3],
              _aK_ = caml_call2(Camlboy_lib_Uints[1][35], a$2, 1),
              n$2 = caml_call2(Camlboy_lib_Uints[1][32], _aK_, _aJ_);
             caml_call3(Camlboy_lib_Registers[3], t[1], 0, n$2);
             caml_call5(set_flags, [0, c$1], _v_, _u_, _t_, 0);
             var next_pc = 0;
             break;
            case 12:
             var
              a$3 = caml_call2(Camlboy_lib_Registers[2], t[1], 0),
              old_c$0 = caml_call2(Camlboy_lib_Registers[6], t[1], 0),
              _aL_ =
                old_c$0
                 ? caml_call1(Camlboy_lib_Uints[1][20], 128)
                 : Camlboy_lib_Uints[1][3],
              _aM_ = caml_call2(Camlboy_lib_Uints[1][35], a$3, 1),
              n$3 = caml_call2(Camlboy_lib_Uints[1][32], _aM_, _aL_);
             caml_call3(Camlboy_lib_Registers[3], t[1], 0, n$3);
             var
              _aN_ = Camlboy_lib_Uints[1][3],
              _aO_ = caml_call1(Camlboy_lib_Uints[1][20], 1),
              _aP_ = caml_call2(Camlboy_lib_Uints[1][31], a$3, _aO_),
              new_c$0 = caml_call2(Camlboy_lib_Uints[1][28], _aP_, _aN_);
             caml_call5(set_flags, [0, new_c$0], _y_, _x_, _w_, 0);
             var next_pc = 0;
             break;
            default:
             var
              addr$0 = caml_call2(Bus[4], t[2], t[5]),
              _aQ_ = caml_call1(Camlboy_lib_Uints[2][20], 2);
             t[5] = caml_call2(Camlboy_lib_Uints[2][23], t[5], _aQ_);
             t[7] = 1;
             var next_pc = [0, addr$0];
          }
         else
          switch(inst[0]){
            case 0:
             var y = inst[2], x = inst[1];
             symbol(x, read(y));
             var next_pc = 0;
             break;
            case 1:
             var y$0 = inst[2], x$0 = inst[1];
             symbol(x$0, read(y$0));
             var next_pc = 0;
             break;
            case 2:
             var
              y$1 = inst[2],
              x$1 = inst[1],
              y$2 = read(y$1),
              x$2 = read(x$1),
              n$4 = caml_call2(Camlboy_lib_Uints[1][23], x$2, y$2),
              _aR_ = [0, caml_equal(n$4, Camlboy_lib_Uints[1][3])],
              _aS_ = caml_call1(Camlboy_lib_Uints[1][20], 15),
              _aT_ = caml_call1(Camlboy_lib_Uints[1][20], 15),
              _aU_ = caml_call2(Camlboy_lib_Uints[1][31], y$2, _aT_),
              _aV_ = caml_call1(Camlboy_lib_Uints[1][20], 15),
              _aW_ = caml_call2(Camlboy_lib_Uints[1][31], x$2, _aV_),
              _aX_ =
                [0,
                 caml_greaterthan
                  (caml_call2(Camlboy_lib_Uints[1][23], _aW_, _aU_), _aS_)],
              _aY_ = caml_call1(Camlboy_lib_Uints[1][20], 255);
             caml_call5
              (set_flags,
               [0,
                caml_greaterthan
                 (x$2, caml_call2(Camlboy_lib_Uints[1][24], _aY_, y$2))],
               _aX_,
               _z_,
               _aR_,
               0);
             symbol(x$1, n$4);
             var next_pc = 0;
             break;
            case 3:
             var
              y$3 = inst[2],
              x$3 = inst[1],
              y$4 = read(y$3),
              x$4 = read(x$3),
              n$5 = caml_call2(Camlboy_lib_Uints[2][23], x$4, y$4),
              _aZ_ = caml_call1(Camlboy_lib_Uints[2][20], 4095),
              _a0_ = caml_call1(Camlboy_lib_Uints[2][20], 4095),
              _a1_ = caml_call2(Camlboy_lib_Uints[2][31], y$4, _a0_),
              _a2_ = caml_call1(Camlboy_lib_Uints[2][20], 4095),
              _a3_ = caml_call2(Camlboy_lib_Uints[2][31], x$4, _a2_),
              _a4_ =
                [0,
                 caml_greaterthan
                  (caml_call2(Camlboy_lib_Uints[2][23], _a3_, _a1_), _aZ_)],
              _a5_ = caml_call1(Camlboy_lib_Uints[2][20], 65535);
             caml_call5
              (set_flags,
               [0,
                caml_greaterthan
                 (x$4, caml_call2(Camlboy_lib_Uints[2][24], _a5_, y$4))],
               _a4_,
               _A_,
               0,
               0);
             symbol(x$3, n$5);
             var next_pc = 0;
             break;
            case 4:
             var
              y$5 = inst[1],
              _a6_ = read(3),
              x$5 = caml_call1(Camlboy_lib_Uints[2][21], _a6_),
              y$6 = caml_call1(Camlboy_lib_Uints[3][3], y$5);
             caml_call5
              (set_flags,
               [0, 255 < ((x$5 & 255) + (y$6 & 255) | 0) ? 1 : 0],
               [0, 15 < ((x$5 & 15) + (y$6 & 15) | 0) ? 1 : 0],
               _C_,
               _B_,
               0);
             symbol(3, caml_call1(Camlboy_lib_Uints[2][20], x$5 + y$6 | 0));
             var next_pc = 0;
             break;
            case 5:
             var
              y$7 = inst[2],
              x$6 = inst[1],
              c$2 =
                caml_call2(Camlboy_lib_Registers[6], t[1], 0)
                 ? Camlboy_lib_Uints[1][4]
                 : Camlboy_lib_Uints[1][3],
              y$8 = read(y$7),
              x$7 = read(x$6),
              _a7_ = caml_call2(Camlboy_lib_Uints[1][23], x$7, y$8),
              n$6 = caml_call2(Camlboy_lib_Uints[1][23], _a7_, c$2),
              _a8_ = [0, caml_equal(n$6, Camlboy_lib_Uints[1][3])],
              _a9_ = caml_call1(Camlboy_lib_Uints[1][20], 15),
              _a__ = caml_call1(Camlboy_lib_Uints[1][20], 15),
              _a$_ = caml_call2(Camlboy_lib_Uints[1][31], y$8, _a__),
              _ba_ = caml_call1(Camlboy_lib_Uints[1][20], 15),
              _bb_ = caml_call2(Camlboy_lib_Uints[1][31], x$7, _ba_),
              _bc_ = caml_call2(Camlboy_lib_Uints[1][23], _bb_, _a$_),
              _bd_ =
                [0,
                 caml_greaterthan
                  (caml_call2(Camlboy_lib_Uints[1][23], _bc_, c$2), _a9_)],
              _be_ = caml_call1(Camlboy_lib_Uints[1][21], c$2),
              _bf_ = caml_call1(Camlboy_lib_Uints[1][21], y$8);
             caml_call5
              (set_flags,
               [0,
                255
                 <
                  ((caml_call1(Camlboy_lib_Uints[1][21], x$7) + _bf_ | 0)
                  + _be_
                  | 0)
                 ? 1
                 : 0],
               _bd_,
               _D_,
               _a8_,
               0);
             symbol(x$6, n$6);
             var next_pc = 0;
             break;
            case 6:
             var
              y$9 = inst[2],
              x$8 = inst[1],
              y$10 = read(y$9),
              x$9 = read(x$8),
              n$7 = caml_call2(Camlboy_lib_Uints[1][24], x$9, y$10),
              _bg_ = [0, caml_equal(n$7, Camlboy_lib_Uints[1][3])],
              _bh_ = caml_call1(Camlboy_lib_Uints[1][20], 15),
              _bi_ = caml_call2(Camlboy_lib_Uints[1][31], y$10, _bh_),
              _bj_ = caml_call1(Camlboy_lib_Uints[1][20], 15),
              _bk_ =
                [0,
                 caml_lessthan
                  (caml_call2(Camlboy_lib_Uints[1][31], x$9, _bj_), _bi_)],
              _bl_ = caml_call1(Camlboy_lib_Uints[1][21], y$10);
             caml_call5
              (set_flags,
               [0, caml_call1(Camlboy_lib_Uints[1][21], x$9) < _bl_ ? 1 : 0],
               _bk_,
               _E_,
               _bg_,
               0);
             symbol(x$8, n$7);
             var next_pc = 0;
             break;
            case 7:
             var
              y$11 = inst[2],
              x$10 = inst[1],
              c$3 =
                caml_call2(Camlboy_lib_Registers[6], t[1], 0)
                 ? Camlboy_lib_Uints[1][4]
                 : Camlboy_lib_Uints[1][3],
              y$12 = read(y$11),
              x$11 = read(x$10),
              _bm_ = caml_call2(Camlboy_lib_Uints[1][23], y$12, c$3),
              n$8 = caml_call2(Camlboy_lib_Uints[1][24], x$11, _bm_),
              _bn_ = [0, caml_equal(n$8, Camlboy_lib_Uints[1][3])],
              _bo_ = caml_call1(Camlboy_lib_Uints[1][20], 15),
              _bp_ = caml_call2(Camlboy_lib_Uints[1][31], y$12, _bo_),
              _bq_ = caml_call2(Camlboy_lib_Uints[1][23], _bp_, c$3),
              _br_ = caml_call1(Camlboy_lib_Uints[1][20], 15),
              _bs_ =
                [0,
                 caml_lessthan
                  (caml_call2(Camlboy_lib_Uints[1][31], x$11, _br_), _bq_)],
              _bt_ = caml_call1(Camlboy_lib_Uints[1][21], c$3),
              _bu_ = caml_call1(Camlboy_lib_Uints[1][21], y$12) + _bt_ | 0;
             caml_call5
              (set_flags,
               [0, caml_call1(Camlboy_lib_Uints[1][21], x$11) < _bu_ ? 1 : 0],
               _bs_,
               _F_,
               _bn_,
               0);
             symbol(x$10, n$8);
             var next_pc = 0;
             break;
            case 8:
             var
              y$13 = inst[2],
              x$12 = inst[1],
              _bv_ = read(y$13),
              _bw_ = read(x$12),
              n$9 = caml_call2(Camlboy_lib_Uints[1][31], _bw_, _bv_);
             caml_call5
              (set_flags,
               _I_,
               _H_,
               _G_,
               [0, caml_equal(n$9, Camlboy_lib_Uints[1][3])],
               0);
             symbol(x$12, n$9);
             var next_pc = 0;
             break;
            case 9:
             var
              y$14 = inst[2],
              x$13 = inst[1],
              _bx_ = read(y$14),
              _by_ = read(x$13),
              n$10 = caml_call2(Camlboy_lib_Uints[1][32], _by_, _bx_);
             caml_call5
              (set_flags,
               _L_,
               _K_,
               _J_,
               [0, caml_equal(n$10, Camlboy_lib_Uints[1][3])],
               0);
             symbol(x$13, n$10);
             var next_pc = 0;
             break;
            case 10:
             var
              y$15 = inst[2],
              x$14 = inst[1],
              _bz_ = read(y$15),
              _bA_ = read(x$14),
              n$11 = caml_call2(Camlboy_lib_Uints[1][33], _bA_, _bz_);
             caml_call5
              (set_flags,
               _O_,
               _N_,
               _M_,
               [0, caml_equal(n$11, Camlboy_lib_Uints[1][3])],
               0);
             symbol(x$14, n$11);
             var next_pc = 0;
             break;
            case 11:
             var
              y$16 = inst[2],
              x$15 = inst[1],
              y$17 = read(y$16),
              x$16 = read(x$15),
              n$12 = caml_call2(Camlboy_lib_Uints[1][24], x$16, y$17),
              _bB_ = [0, caml_equal(n$12, Camlboy_lib_Uints[1][3])],
              _bC_ = caml_call1(Camlboy_lib_Uints[1][20], 15),
              _bD_ = caml_call2(Camlboy_lib_Uints[1][31], y$17, _bC_),
              _bE_ = caml_call1(Camlboy_lib_Uints[1][20], 15),
              _bF_ =
                [0,
                 caml_lessthan
                  (caml_call2(Camlboy_lib_Uints[1][31], x$16, _bE_), _bD_)],
              _bG_ = caml_call1(Camlboy_lib_Uints[1][21], y$17);
             caml_call5
              (set_flags,
               [0, caml_call1(Camlboy_lib_Uints[1][21], x$16) < _bG_ ? 1 : 0],
               _bF_,
               _P_,
               _bB_,
               0);
             var next_pc = 0;
             break;
            case 12:
             var
              x$17 = inst[1],
              x$18 = read(x$17),
              n$13 = caml_call1(Camlboy_lib_Uints[1][13], x$18),
              _bH_ = [0, caml_equal(n$13, Camlboy_lib_Uints[1][3])],
              _bI_ = caml_call1(Camlboy_lib_Uints[1][20], 15),
              _bJ_ = caml_call1(Camlboy_lib_Uints[1][20], 15),
              _bK_ = caml_call2(Camlboy_lib_Uints[1][31], x$18, _bJ_);
             caml_call5
              (set_flags,
               0,
               [0, caml_call2(Camlboy_lib_Uints[1][27], _bK_, _bI_)],
               _Q_,
               _bH_,
               0);
             symbol(x$17, n$13);
             var next_pc = 0;
             break;
            case 13:
             var x$19 = inst[1], _bL_ = read(x$19);
             symbol(x$19, caml_call1(Camlboy_lib_Uints[2][13], _bL_));
             var next_pc = 0;
             break;
            case 14:
             var
              x$20 = inst[1],
              x$21 = read(x$20),
              n$14 = caml_call1(Camlboy_lib_Uints[1][14], x$21),
              _bM_ = [0, caml_equal(n$14, Camlboy_lib_Uints[1][3])],
              _bN_ = caml_call1(Camlboy_lib_Uints[1][20], 0),
              _bO_ = caml_call1(Camlboy_lib_Uints[1][20], 15),
              _bP_ = caml_call2(Camlboy_lib_Uints[1][31], x$21, _bO_);
             caml_call5
              (set_flags,
               0,
               [0, caml_call2(Camlboy_lib_Uints[1][27], _bP_, _bN_)],
               _R_,
               _bM_,
               0);
             symbol(x$20, n$14);
             var next_pc = 0;
             break;
            case 15:
             var x$22 = inst[1], _bQ_ = read(x$22);
             symbol(x$22, caml_call1(Camlboy_lib_Uints[2][14], _bQ_));
             var next_pc = 0;
             break;
            case 16:
             var
              x$23 = inst[1],
              x$24 = read(x$23),
              _bR_ = caml_call2(Camlboy_lib_Uints[1][35], x$24, 4),
              _bS_ = caml_call2(Camlboy_lib_Uints[1][34], x$24, 4),
              n$15 = caml_call2(Camlboy_lib_Uints[1][32], _bS_, _bR_);
             caml_call5
              (set_flags,
               _U_,
               _T_,
               _S_,
               [0, caml_equal(n$15, Camlboy_lib_Uints[1][3])],
               0);
             symbol(x$23, n$15);
             var next_pc = 0;
             break;
            case 17:
             var
              x$25 = inst[1],
              x$26 = read(x$25),
              _bT_ = Camlboy_lib_Uints[1][3],
              _bU_ = caml_call1(Camlboy_lib_Uints[1][20], 128),
              _bV_ = caml_call2(Camlboy_lib_Uints[1][31], x$26, _bU_),
              c$4 = caml_call2(Camlboy_lib_Uints[1][28], _bV_, _bT_),
              _bW_ = c$4 ? Camlboy_lib_Uints[1][4] : Camlboy_lib_Uints[1][3],
              _bX_ = caml_call2(Camlboy_lib_Uints[1][34], x$26, 1),
              n$16 = caml_call2(Camlboy_lib_Uints[1][32], _bX_, _bW_);
             symbol(x$25, n$16);
             caml_call5
              (set_flags,
               [0, c$4],
               _W_,
               _V_,
               [0,
                caml_call2
                 (Camlboy_lib_Uints[1][27], n$16, Camlboy_lib_Uints[1][3])],
               0);
             var next_pc = 0;
             break;
            case 18:
             var
              x$27 = inst[1],
              x$28 = read(x$27),
              old_c$1 = caml_call2(Camlboy_lib_Registers[6], t[1], 0),
              _bY_ =
                old_c$1 ? Camlboy_lib_Uints[1][4] : Camlboy_lib_Uints[1][3],
              _bZ_ = caml_call2(Camlboy_lib_Uints[1][34], x$28, 1),
              n$17 = caml_call2(Camlboy_lib_Uints[1][32], _bZ_, _bY_);
             symbol(x$27, n$17);
             var
              _b0_ = Camlboy_lib_Uints[1][3],
              _b1_ = caml_call1(Camlboy_lib_Uints[1][20], 128),
              _b2_ = caml_call2(Camlboy_lib_Uints[1][31], x$28, _b1_),
              new_c$1 = caml_call2(Camlboy_lib_Uints[1][28], _b2_, _b0_);
             caml_call5
              (set_flags,
               [0, new_c$1],
               _Y_,
               _X_,
               [0,
                caml_call2
                 (Camlboy_lib_Uints[1][27], n$17, Camlboy_lib_Uints[1][3])],
               0);
             var next_pc = 0;
             break;
            case 19:
             var
              x$29 = inst[1],
              x$30 = read(x$29),
              _b3_ = Camlboy_lib_Uints[1][3],
              _b4_ = caml_call1(Camlboy_lib_Uints[1][20], 1),
              _b5_ = caml_call2(Camlboy_lib_Uints[1][31], x$30, _b4_),
              c$5 = caml_call2(Camlboy_lib_Uints[1][28], _b5_, _b3_),
              _b6_ =
                c$5
                 ? caml_call1(Camlboy_lib_Uints[1][20], 128)
                 : Camlboy_lib_Uints[1][3],
              _b7_ = caml_call2(Camlboy_lib_Uints[1][35], x$30, 1),
              n$18 = caml_call2(Camlboy_lib_Uints[1][32], _b7_, _b6_);
             symbol(x$29, n$18);
             caml_call5
              (set_flags,
               [0, c$5],
               ___,
               _Z_,
               [0,
                caml_call2
                 (Camlboy_lib_Uints[1][27], n$18, Camlboy_lib_Uints[1][3])],
               0);
             var next_pc = 0;
             break;
            case 20:
             var
              x$31 = inst[1],
              x$32 = read(x$31),
              old_c$2 = caml_call2(Camlboy_lib_Registers[6], t[1], 0),
              _b8_ =
                old_c$2
                 ? caml_call1(Camlboy_lib_Uints[1][20], 128)
                 : Camlboy_lib_Uints[1][3],
              _b9_ = caml_call2(Camlboy_lib_Uints[1][35], x$32, 1),
              n$19 = caml_call2(Camlboy_lib_Uints[1][32], _b9_, _b8_);
             symbol(x$31, n$19);
             var
              _b__ =
                [0,
                 caml_call2
                  (Camlboy_lib_Uints[1][27], n$19, Camlboy_lib_Uints[1][3])],
              _b$_ = Camlboy_lib_Uints[1][3],
              _ca_ = caml_call1(Camlboy_lib_Uints[1][20], 1),
              _cb_ = caml_call2(Camlboy_lib_Uints[1][31], x$32, _ca_);
             caml_call5
              (set_flags,
               [0, caml_call2(Camlboy_lib_Uints[1][28], _cb_, _b$_)],
               _aa_,
               _$_,
               _b__,
               0);
             var next_pc = 0;
             break;
            case 21:
             var
              x$33 = inst[1],
              x$34 = read(x$33),
              n$20 = caml_call2(Camlboy_lib_Uints[1][34], x$34, 1);
             symbol(x$33, n$20);
             var
              _cc_ =
                [0,
                 caml_call2
                  (Camlboy_lib_Uints[1][27], n$20, Camlboy_lib_Uints[1][3])],
              _cd_ = Camlboy_lib_Uints[1][3],
              _ce_ = caml_call1(Camlboy_lib_Uints[1][20], 128),
              _cf_ = caml_call2(Camlboy_lib_Uints[1][31], x$34, _ce_);
             caml_call5
              (set_flags,
               [0, caml_call2(Camlboy_lib_Uints[1][28], _cf_, _cd_)],
               _ac_,
               _ab_,
               _cc_,
               0);
             var next_pc = 0;
             break;
            case 22:
             var
              x$35 = inst[1],
              x$36 = read(x$35),
              _cg_ = caml_call1(Camlboy_lib_Uints[1][20], 128),
              _ch_ = caml_call2(Camlboy_lib_Uints[1][31], x$36, _cg_),
              _ci_ = caml_call2(Camlboy_lib_Uints[1][35], x$36, 1),
              n$21 = caml_call2(Camlboy_lib_Uints[1][32], _ci_, _ch_);
             symbol(x$35, n$21);
             var
              _cj_ =
                [0,
                 caml_call2
                  (Camlboy_lib_Uints[1][27], n$21, Camlboy_lib_Uints[1][3])],
              _ck_ = Camlboy_lib_Uints[1][3],
              _cl_ = caml_call1(Camlboy_lib_Uints[1][20], 1),
              _cm_ = caml_call2(Camlboy_lib_Uints[1][31], x$36, _cl_);
             caml_call5
              (set_flags,
               [0, caml_call2(Camlboy_lib_Uints[1][28], _cm_, _ck_)],
               _ae_,
               _ad_,
               _cj_,
               0);
             var next_pc = 0;
             break;
            case 23:
             var
              x$37 = inst[1],
              x$38 = read(x$37),
              n$22 = caml_call2(Camlboy_lib_Uints[1][35], x$38, 1);
             symbol(x$37, n$22);
             var
              _cn_ =
                [0,
                 caml_call2
                  (Camlboy_lib_Uints[1][27], n$22, Camlboy_lib_Uints[1][3])],
              _co_ = Camlboy_lib_Uints[1][3],
              _cp_ = caml_call1(Camlboy_lib_Uints[1][20], 1),
              _cq_ = caml_call2(Camlboy_lib_Uints[1][31], x$38, _cp_);
             caml_call5
              (set_flags,
               [0, caml_call2(Camlboy_lib_Uints[1][28], _cq_, _co_)],
               _ag_,
               _af_,
               _cn_,
               0);
             var next_pc = 0;
             break;
            case 24:
             var
              x$39 = inst[2],
              n$23 = inst[1],
              _cr_ = Camlboy_lib_Uints[1][3],
              _cs_ =
                caml_call2
                 (Camlboy_lib_Uints[1][34], Camlboy_lib_Uints[1][4], n$23),
              _ct_ = read(x$39),
              _cu_ = caml_call2(Camlboy_lib_Uints[1][31], _ct_, _cs_),
              b = caml_call2(Camlboy_lib_Uints[1][27], _cu_, _cr_);
             caml_call5(set_flags, 0, _ai_, _ah_, [0, b], 0);
             var next_pc = 0;
             break;
            case 25:
             var
              x$40 = inst[2],
              n$24 = inst[1],
              _cv_ =
                caml_call2
                 (Camlboy_lib_Uints[1][34], Camlboy_lib_Uints[1][4], n$24),
              _cw_ = read(x$40);
             symbol(x$40, caml_call2(Camlboy_lib_Uints[1][32], _cw_, _cv_));
             var next_pc = 0;
             break;
            case 26:
             var
              x$41 = inst[2],
              n$25 = inst[1],
              _cx_ = caml_call1(Camlboy_lib_Uints[1][20], 255),
              _cy_ =
                caml_call2
                 (Camlboy_lib_Uints[1][34], Camlboy_lib_Uints[1][4], n$25),
              mask = caml_call2(Camlboy_lib_Uints[1][33], _cy_, _cx_),
              _cz_ = read(x$41);
             symbol(x$41, caml_call2(Camlboy_lib_Uints[1][31], _cz_, mask));
             var next_pc = 0;
             break;
            case 27:
             var rr = inst[1], _cA_ = caml_call1(Camlboy_lib_Uints[2][20], 2);
             t[5] = caml_call2(Camlboy_lib_Uints[2][24], t[5], _cA_);
             var _cB_ = caml_call2(Camlboy_lib_Registers[4], t[1], rr);
             caml_call3(Bus[5], t[2], t[5], _cB_);
             var next_pc = 0;
             break;
            case 28:
             var rr$0 = inst[1], _cC_ = caml_call2(Bus[4], t[2], t[5]);
             caml_call3(Camlboy_lib_Registers[5], t[1], rr$0, _cC_);
             var _cD_ = caml_call1(Camlboy_lib_Uints[2][20], 2);
             t[5] = caml_call2(Camlboy_lib_Uints[2][23], t[5], _cD_);
             var next_pc = 0;
             break;
            case 29:
             var
              x$42 = inst[2],
              c$6 = inst[1],
              _cE_ = check_condition(t, c$6) ? [0, read(x$42)] : 0,
              next_pc = _cE_;
             break;
            case 30:
             var x$43 = inst[2], c$7 = inst[1];
             if(check_condition(t, c$7))
              var
               _cF_ = caml_call1(Camlboy_lib_Uints[3][3], x$43),
               _cG_ = caml_call1(Camlboy_lib_Uints[2][21], t[4]) + _cF_ | 0,
               addr$1 = caml_call1(Camlboy_lib_Uints[2][20], _cG_),
               _cH_ = [0, addr$1];
             else
              var _cH_ = 0;
             var next_pc = _cH_;
             break;
            case 31:
             var x$44 = inst[2], c$8 = inst[1];
             if(check_condition(t, c$8)){
              var _cI_ = caml_call1(Camlboy_lib_Uints[2][20], 2);
              t[5] = caml_call2(Camlboy_lib_Uints[2][24], t[5], _cI_);
              caml_call3(Bus[5], t[2], t[5], t[4]);
              var _cJ_ = [0, x$44];
             }
             else
              var _cJ_ = 0;
             var next_pc = _cJ_;
             break;
            case 32:
             var
              x$45 = inst[1],
              _cK_ = caml_call1(Camlboy_lib_Uints[2][20], 2);
             t[5] = caml_call2(Camlboy_lib_Uints[2][24], t[5], _cK_);
             caml_call3(Bus[5], t[2], t[5], t[4]);
             var next_pc = [0, x$45];
             break;
            default:
             var c$9 = inst[1];
             if(check_condition(t, c$9)){
              var
               addr$2 = caml_call2(Bus[4], t[2], t[5]),
               _cL_ = caml_call1(Camlboy_lib_Uints[2][20], 2);
              t[5] = caml_call2(Camlboy_lib_Uints[2][23], t[5], _cL_);
              var _cM_ = [0, addr$2];
             }
             else
              var _cM_ = 0;
             var next_pc = _cM_;
          }
         t[9] = inst;
         if(! next_pc) return not_branched_mcycles;
         var addr = next_pc[1];
         t[4] = addr;
         return branched_mcycles;
        }
        function run_instruction(t){
         if(t[8]){t[7] = 1; t[8] = 0;}
         if(t[6])
          var inst_mcycles = 4;
         else{
          var inst_info = caml_call2(Fetch_and_decode[1], t[2], t[4]);
          t[4] = caml_call2(Camlboy_lib_Uints[2][23], t[4], inst_info[1]);
          var inst_mcycles = execute(t, inst_info);
         }
         var match = caml_call1(Camlboy_lib_Interrupt_controll[5], t[3]);
         if(match){
          var type = match[1];
          t[6] = 0;
          if(t[7]){
           t[7] = 0;
           caml_call2(Camlboy_lib_Interrupt_controll[3], t[3], type);
           switch(type){
             case 0:
              var addr = caml_call1(Camlboy_lib_Uints[2][20], 64); break;
             case 1:
              var addr = caml_call1(Camlboy_lib_Uints[2][20], 72); break;
             case 2:
              var addr = caml_call1(Camlboy_lib_Uints[2][20], 80); break;
             case 3:
              var addr = caml_call1(Camlboy_lib_Uints[2][20], 88); break;
             default: var addr = caml_call1(Camlboy_lib_Uints[2][20], 96);
           }
           var _an_ = caml_call1(Camlboy_lib_Uints[2][20], 2);
           t[5] = caml_call2(Camlboy_lib_Uints[2][24], t[5], _an_);
           caml_call3(Bus[5], t[2], t[5], t[4]);
           t[4] = addr;
           var interrupt_mcycles = 5;
          }
          else
           var interrupt_mcycles = 0;
         }
         else
          var interrupt_mcycles = 0;
         return inst_mcycles + interrupt_mcycles | 0;
        }
        function show(t){
         var
          _ak_ = caml_call1(Camlboy_lib_Uints[2][1], t[4]),
          _al_ = caml_call1(Camlboy_lib_Uints[2][1], t[5]),
          _am_ = caml_call1(Camlboy_lib_Registers[11], t[1]);
         return caml_call4(Stdlib_Printf[4], _aj_, _am_, _al_, _ak_);
        }
        function prev_inst(t){return t[9];}
        var For_tests = [0, execute, prev_inst];
        return [0, create, run_instruction, show, For_tests];
       }];
   runtime.caml_register_global(71, Camlboy_lib_Cpu, "Camlboy_lib__Cpu");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Camlboy_lib__Camlboy_intf
(function(globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Camlboy_lib_Camlboy_intf = [0];
   runtime.caml_register_global
    (0, Camlboy_lib_Camlboy_intf, "Camlboy_lib__Camlboy_intf");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Camlboy_lib__Bus
//# unitInfo: Requires: Camlboy_lib__Gpu, Camlboy_lib__Interrupt_controller, Camlboy_lib__Joypad, Camlboy_lib__Mmap_register, Camlboy_lib__Ram, Camlboy_lib__Serial_port, Camlboy_lib__Shadow_ram, Camlboy_lib__Timer, Camlboy_lib__Uints
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Camlboy_lib_Uints = global_data.Camlboy_lib__Uints,
    Camlboy_lib_Ram = global_data.Camlboy_lib__Ram,
    Camlboy_lib_Gpu = global_data.Camlboy_lib__Gpu,
    Camlboy_lib_Shadow_ram = global_data.Camlboy_lib__Shadow_ram,
    Camlboy_lib_Joypad = global_data.Camlboy_lib__Joypad,
    Camlboy_lib_Serial_port = global_data.Camlboy_lib__Serial_port,
    Camlboy_lib_Interrupt_controll =
      global_data.Camlboy_lib__Interrupt_controller,
    Camlboy_lib_Timer = global_data.Camlboy_lib__Timer,
    Camlboy_lib_Mmap_register = global_data.Camlboy_lib__Mmap_register;
   function Make(Cartridge){
    function create
    (cartridge,
     wram,
     gpu,
     zero_page,
     shadow_ram,
     joypad,
     serial_port,
     ic,
     timer,
     dma_transfer){
     return [0,
             cartridge,
             wram,
             shadow_ram,
             gpu,
             zero_page,
             joypad,
             serial_port,
             ic,
             timer,
             dma_transfer];
    }
    function read_byte(t, addr){
     return caml_call2(Cartridge[3], t[1], addr)
             ? caml_call2(Cartridge[1], t[1], addr)
             : caml_call2
                (Camlboy_lib_Ram[4], t[2], addr)
               ? caml_call2(Camlboy_lib_Ram[2], t[2], addr)
               : caml_call2
                  (Camlboy_lib_Ram[4], t[5], addr)
                 ? caml_call2(Camlboy_lib_Ram[2], t[5], addr)
                 : caml_call2
                    (Camlboy_lib_Gpu[7], t[4], addr)
                   ? caml_call2(Camlboy_lib_Gpu[5], t[4], addr)
                   : caml_call2
                      (Camlboy_lib_Joypad[6], t[6], addr)
                     ? caml_call2(Camlboy_lib_Joypad[4], t[6], addr)
                     : caml_call2
                        (Camlboy_lib_Shadow_ram[4], t[3], addr)
                       ? caml_call2(Camlboy_lib_Shadow_ram[2], t[3], addr)
                       : caml_call2
                          (Camlboy_lib_Serial_port[4], t[7], addr)
                         ? caml_call2(Camlboy_lib_Serial_port[2], t[7], addr)
                         : caml_call2
                            (Camlboy_lib_Interrupt_controll[8], t[8], addr)
                           ? caml_call2(Camlboy_lib_Interrupt_controll[6], t[8], addr)
                           : caml_call2
                              (Camlboy_lib_Timer[5], t[9], addr)
                             ? caml_call2(Camlboy_lib_Timer[3], t[9], addr)
                             : caml_call2
                                (Camlboy_lib_Mmap_register[5], t[10], addr)
                               ? caml_call2(Camlboy_lib_Mmap_register[3], t[10], addr)
                               : caml_call1(Camlboy_lib_Uints[1][20], 255);
    }
    function write_byte(t, addr, source){
     if(caml_call2(Cartridge[3], t[1], addr))
      return caml_call3(Cartridge[2], t[1], addr, source);
     if(caml_call2(Camlboy_lib_Ram[4], t[2], addr))
      return caml_call3(Camlboy_lib_Ram[3], t[2], addr, source);
     if(caml_call2(Camlboy_lib_Ram[4], t[5], addr))
      return caml_call3(Camlboy_lib_Ram[3], t[5], addr, source);
     if(caml_call2(Camlboy_lib_Gpu[7], t[4], addr))
      return caml_call3(Camlboy_lib_Gpu[6], t[4], addr, source);
     if(caml_call2(Camlboy_lib_Joypad[6], t[6], addr))
      return caml_call3(Camlboy_lib_Joypad[5], t[6], addr, source);
     if(caml_call2(Camlboy_lib_Shadow_ram[4], t[3], addr))
      return caml_call3(Camlboy_lib_Shadow_ram[3], t[3], addr, source);
     if(caml_call2(Camlboy_lib_Serial_port[4], t[7], addr))
      return caml_call3(Camlboy_lib_Serial_port[3], t[7], addr, source);
     if(caml_call2(Camlboy_lib_Interrupt_controll[8], t[8], addr))
      return caml_call3(Camlboy_lib_Interrupt_controll[7], t[8], addr, source);
     if(caml_call2(Camlboy_lib_Timer[5], t[9], addr))
      return caml_call3(Camlboy_lib_Timer[4], t[9], addr, source);
     if(! caml_call2(Camlboy_lib_Mmap_register[5], t[10], addr)) return 0;
     caml_call3(Camlboy_lib_Mmap_register[4], t[10], addr, source);
     var
      _n_ = caml_call1(Camlboy_lib_Uints[2][36], source),
      source$0 = caml_call2(Camlboy_lib_Uints[2][34], _n_, 8),
      i = 0;
     for(;;){
      var
       _o_ = caml_call1(Camlboy_lib_Uints[2][20], i),
       data =
         read_byte(t, caml_call2(Camlboy_lib_Uints[2][23], source$0, _o_));
      caml_call3(Camlboy_lib_Gpu[3], t[4], i, data);
      var _p_ = i + 1 | 0;
      if(159 === i) return 0;
      i = _p_;
     }
    }
    function accepts(t, addr){
     var _c_ = caml_call2(Cartridge[3], t[1], addr);
     if(_c_)
      var _d_ = _c_;
     else{
      var _e_ = caml_call2(Camlboy_lib_Ram[4], t[2], addr);
      if(_e_)
       var _d_ = _e_;
      else{
       var _f_ = caml_call2(Camlboy_lib_Gpu[7], t[4], addr);
       if(_f_)
        var _d_ = _f_;
       else{
        var _g_ = caml_call2(Camlboy_lib_Ram[4], t[5], addr);
        if(_g_)
         var _d_ = _g_;
        else{
         var _h_ = caml_call2(Camlboy_lib_Shadow_ram[4], t[3], addr);
         if(_h_)
          var _d_ = _h_;
         else{
          var _i_ = caml_call2(Camlboy_lib_Shadow_ram[4], t[3], addr);
          if(_i_)
           var _d_ = _i_;
          else{
           var _j_ = caml_call2(Camlboy_lib_Joypad[6], t[6], addr);
           if(_j_)
            var _d_ = _j_;
           else{
            var _k_ = caml_call2(Camlboy_lib_Serial_port[4], t[7], addr);
            if(_k_)
             var _d_ = _k_;
            else{
             var
              _l_ = caml_call2(Camlboy_lib_Interrupt_controll[8], t[8], addr);
             if(_l_)
              var _d_ = _l_;
             else{
              var _m_ = caml_call2(Camlboy_lib_Timer[5], t[9], addr);
              if(! _m_)
               return caml_call2(Camlboy_lib_Mmap_register[5], t[10], addr);
              var _d_ = _m_;
             }
            }
           }
          }
         }
        }
       }
      }
     }
     return _d_;
    }
    function read_word(t, addr){
     var
      _a_ = read_byte(t, addr),
      lo = caml_call1(Camlboy_lib_Uints[1][21], _a_),
      _b_ = read_byte(t, caml_call1(Camlboy_lib_Uints[2][13], addr)),
      hi = caml_call1(Camlboy_lib_Uints[1][21], _b_);
     return caml_call1(Camlboy_lib_Uints[2][20], (hi << 8) + lo | 0);
    }
    function write_word(t, addr, data){
     var
      data$0 = caml_call1(Camlboy_lib_Uints[2][21], data),
      hi = caml_call1(Camlboy_lib_Uints[1][20], data$0 >>> 8 | 0),
      lo = caml_call1(Camlboy_lib_Uints[1][20], data$0 & 255);
     write_byte(t, addr, lo);
     return write_byte(t, caml_call1(Camlboy_lib_Uints[2][13], addr), hi);
    }
    return [0, create, read_byte, write_byte, accepts, read_word, write_word];
   }
   var Camlboy_lib_Bus = [0, Make];
   runtime.caml_register_global(9, Camlboy_lib_Bus, "Camlboy_lib__Bus");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Camlboy_lib__Camlboy
//# unitInfo: Requires: Camlboy_lib__Bus, Camlboy_lib__Cpu, Camlboy_lib__Gpu, Camlboy_lib__Interrupt_controller, Camlboy_lib__Joypad, Camlboy_lib__Lcd_control, Camlboy_lib__Lcd_position, Camlboy_lib__Lcd_stat, Camlboy_lib__Mmap_register, Camlboy_lib__Oam_table, Camlboy_lib__Pallete, Camlboy_lib__Ram, Camlboy_lib__Registers, Camlboy_lib__Serial_port, Camlboy_lib__Shadow_ram, Camlboy_lib__Tile_data, Camlboy_lib__Tile_map, Camlboy_lib__Timer, Camlboy_lib__Uints, Stdlib__List
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_list_of_js_array = runtime.caml_list_of_js_array;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) === 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) === 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   function caml_call7(f, a0, a1, a2, a3, a4, a5, a6){
    return (f.l >= 0 ? f.l : f.l = f.length) === 7
            ? f(a0, a1, a2, a3, a4, a5, a6)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6]);
   }
   function caml_call10(f, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9){
    return (f.l >= 0 ? f.l : f.l = f.length) === 10
            ? f(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9)
            : runtime.caml_call_gen
              (f, [a0, a1, a2, a3, a4, a5, a6, a7, a8, a9]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Camlboy_lib_Timer = global_data.Camlboy_lib__Timer,
    Camlboy_lib_Gpu = global_data.Camlboy_lib__Gpu,
    Camlboy_lib_Uints = global_data.Camlboy_lib__Uints,
    Camlboy_lib_Joypad = global_data.Camlboy_lib__Joypad,
    Camlboy_lib_Ram = global_data.Camlboy_lib__Ram,
    Camlboy_lib_Shadow_ram = global_data.Camlboy_lib__Shadow_ram,
    Camlboy_lib_Mmap_register = global_data.Camlboy_lib__Mmap_register,
    Camlboy_lib_Serial_port = global_data.Camlboy_lib__Serial_port,
    Camlboy_lib_Interrupt_controll =
      global_data.Camlboy_lib__Interrupt_controller,
    Camlboy_lib_Tile_data = global_data.Camlboy_lib__Tile_data,
    Camlboy_lib_Tile_map = global_data.Camlboy_lib__Tile_map,
    Camlboy_lib_Oam_table = global_data.Camlboy_lib__Oam_table,
    Camlboy_lib_Lcd_stat = global_data.Camlboy_lib__Lcd_stat,
    Camlboy_lib_Lcd_position = global_data.Camlboy_lib__Lcd_position,
    Camlboy_lib_Lcd_control = global_data.Camlboy_lib__Lcd_control,
    Camlboy_lib_Pallete = global_data.Camlboy_lib__Pallete,
    Camlboy_lib_Registers = global_data.Camlboy_lib__Registers,
    Stdlib_List = global_data.Stdlib__List,
    Camlboy_lib_Bus = global_data.Camlboy_lib__Bus,
    Camlboy_lib_Cpu = global_data.Camlboy_lib__Cpu,
    _a_ = [0, 1],
    _b_ = [0, 0],
    _c_ = [0, 1],
    _d_ = [0, 1],
    _e_ =
      [0, [0, 0, 432], [0, [0, 1, 19], [0, [0, 2, 216], [0, [0, 3, 333], 0]]]],
    _f_ =
      caml_list_of_js_array
       ([[0, 65280, 207],
         [0, 65281, 0],
         [0, 65282, 126],
         [0, 65284, 171],
         [0, 65285, 0],
         [0, 65286, 0],
         [0, 65287, 248],
         [0, 65295, 225],
         [0, 65344, 145],
         [0, 65346, 0],
         [0, 65347, 0],
         [0, 65348, 0],
         [0, 65349, 0],
         [0, 65350, 255],
         [0, 65351, 252],
         [0, 65354, 0],
         [0, 65355, 0],
         [0, 65535, 0]]),
    Camlboy_lib_Camlboy =
      [0,
       function(Cartridge){
        var
         Bus =
           caml_call1
            (Camlboy_lib_Bus[1],
             [0, Cartridge[2], Cartridge[3], Cartridge[4]]),
         Cpu =
           caml_call1
            (Camlboy_lib_Cpu[1], [0, Bus[2], Bus[3], Bus[4], Bus[5], Bus[6]]);
        function show(t){return caml_call1(Cpu[3], t[1]);}
        var
         ly_addr = caml_call1(Camlboy_lib_Uints[2][20], 65348),
         lcd_stat_addr = caml_call1(Camlboy_lib_Uints[2][20], 65345);
        function create_with_rom(print_serial_port, rom_bytes){
         var
          cartridge = caml_call1(Cartridge[1], rom_bytes),
          _h_ = caml_call1(Camlboy_lib_Uints[2][20], 57343),
          _i_ = caml_call1(Camlboy_lib_Uints[2][20], 49152),
          wram = caml_call2(Camlboy_lib_Ram[1], _i_, _h_),
          _j_ = caml_call1(Camlboy_lib_Uints[2][20], 65023),
          _k_ = caml_call1(Camlboy_lib_Uints[2][20], 57344),
          _l_ = caml_call1(Camlboy_lib_Uints[2][20], 49152),
          shadow_ram =
            caml_call4(Camlboy_lib_Shadow_ram[1], wram, _l_, _k_, _j_),
          _m_ = caml_call1(Camlboy_lib_Uints[2][20], 65534),
          _n_ = caml_call1(Camlboy_lib_Uints[2][20], 65408),
          zero_page = caml_call2(Camlboy_lib_Ram[1], _n_, _m_),
          _o_ = caml_call1(Camlboy_lib_Uints[2][20], 65282),
          _p_ = caml_call4(Camlboy_lib_Mmap_register[1], _o_, 18373, 0, 0),
          _q_ = caml_call1(Camlboy_lib_Uints[2][20], 65281),
          _r_ = caml_call4(Camlboy_lib_Mmap_register[1], _q_, 18373, 0, 0),
          serial_port =
            caml_call4
             (Camlboy_lib_Serial_port[1], _r_, _p_, [0, print_serial_port], 0),
          _s_ = caml_call1(Camlboy_lib_Uints[2][20], 65295),
          _t_ = caml_call1(Camlboy_lib_Uints[2][20], 65535),
          ic = caml_call2(Camlboy_lib_Interrupt_controll[1], _t_, _s_),
          _u_ = caml_call1(Camlboy_lib_Uints[2][20], 38911),
          _v_ = caml_call1(Camlboy_lib_Uints[2][20], 32768),
          tile_data = caml_call2(Camlboy_lib_Tile_data[1], _v_, _u_),
          _w_ = caml_call1(Camlboy_lib_Uints[2][20], 40959),
          _x_ = caml_call1(Camlboy_lib_Uints[2][20], 39936),
          _y_ = caml_call1(Camlboy_lib_Uints[2][20], 39935),
          _z_ = caml_call1(Camlboy_lib_Uints[2][20], 38912),
          tile_map = caml_call4(Camlboy_lib_Tile_map[1], _z_, _y_, _x_, _w_),
          _A_ = caml_call1(Camlboy_lib_Uints[2][20], 65183),
          _B_ = caml_call1(Camlboy_lib_Uints[2][20], 65024),
          oam_table = caml_call2(Camlboy_lib_Oam_table[2], _B_, _A_),
          lcd_stat = caml_call1(Camlboy_lib_Lcd_stat[1], lcd_stat_addr),
          _C_ = caml_call1(Camlboy_lib_Uints[2][20], 65280),
          joypad = caml_call2(Camlboy_lib_Joypad[1], _C_, ic),
          _D_ = caml_call1(Camlboy_lib_Uints[2][20], 65355),
          _E_ = caml_call1(Camlboy_lib_Uints[2][20], 65354),
          _F_ = caml_call1(Camlboy_lib_Uints[2][20], 65349),
          _G_ = caml_call1(Camlboy_lib_Uints[2][20], 65347),
          _H_ = caml_call1(Camlboy_lib_Uints[2][20], 65346),
          _I_ =
            caml_call6
             (Camlboy_lib_Lcd_position[1], _H_, _G_, ly_addr, _F_, _E_, _D_),
          _J_ = caml_call1(Camlboy_lib_Uints[2][20], 65344),
          _K_ = caml_call1(Camlboy_lib_Lcd_control[1], _J_),
          _L_ = caml_call1(Camlboy_lib_Uints[2][20], 65353),
          _M_ = caml_call1(Camlboy_lib_Pallete[1], _L_),
          _N_ = caml_call1(Camlboy_lib_Uints[2][20], 65352),
          _O_ = caml_call1(Camlboy_lib_Pallete[1], _N_),
          _P_ = caml_call1(Camlboy_lib_Uints[2][20], 65351),
          _Q_ = caml_call1(Camlboy_lib_Pallete[1], _P_),
          gpu =
            caml_call10
             (Camlboy_lib_Gpu[1],
              tile_data,
              tile_map,
              oam_table,
              _Q_,
              _O_,
              _M_,
              lcd_stat,
              _K_,
              _I_,
              ic),
          _R_ = caml_call1(Camlboy_lib_Uints[2][20], 65287),
          _S_ = caml_call1(Camlboy_lib_Uints[2][20], 65286),
          _T_ = caml_call1(Camlboy_lib_Uints[2][20], 65285),
          _U_ = caml_call1(Camlboy_lib_Uints[2][20], 65284),
          timer = caml_call5(Camlboy_lib_Timer[1], _U_, _T_, _S_, _R_, ic),
          _V_ = caml_call1(Camlboy_lib_Uints[2][20], 65350),
          dma_transfer =
            caml_call4(Camlboy_lib_Mmap_register[1], _V_, 18373, 0, 0),
          bus =
            caml_call10
             (Bus[1],
              cartridge,
              wram,
              gpu,
              zero_page,
              shadow_ram,
              joypad,
              serial_port,
              ic,
              timer,
              dma_transfer),
          registers = caml_call1(Camlboy_lib_Registers[1], 0),
          _W_ = caml_call1(Camlboy_lib_Uints[2][20], 256),
          _X_ = caml_call1(Camlboy_lib_Uints[2][20], 65534),
          cpu = caml_call7(Cpu[1], bus, ic, registers, _X_, _W_, 0, 0);
         caml_call6
          (Camlboy_lib_Registers[8], registers, _d_, _c_, _b_, _a_, 0);
         caml_call1
          (caml_call1
            (Stdlib_List[17],
             function(param){
              var
               data = param[2],
               reg = param[1],
               ___ = caml_call1(Camlboy_lib_Uints[2][20], data);
              return caml_call3(Camlboy_lib_Registers[5], registers, reg, ___);
             }),
           _e_);
         caml_call1
          (caml_call1
            (Stdlib_List[17],
             function(param){
              var
               data = param[2],
               addr = param[1],
               _Y_ = caml_call1(Camlboy_lib_Uints[1][20], data),
               _Z_ = caml_call1(Camlboy_lib_Uints[2][20], addr);
              return caml_call3(Bus[3], bus, _Z_, _Y_);
             }),
           _f_);
         caml_call2(Camlboy_lib_Lcd_stat[6], lcd_stat, 3);
         return [0, cpu, timer, gpu, joypad];
        }
        function run_instruction(t){
         var mcycles = caml_call1(Cpu[2], t[1]);
         caml_call2(Camlboy_lib_Timer[2], t[2], mcycles);
         return caml_call2(Camlboy_lib_Gpu[4], t[3], mcycles);
        }
        function press(t, key){
         return caml_call2(Camlboy_lib_Joypad[2], t[4], key);
        }
        function release(t, key){
         return caml_call2(Camlboy_lib_Joypad[3], t[4], key);
        }
        function prev_inst(t){return caml_call1(Cpu[4][2], t[1]);}
        function get_ly(t){
         var _g_ = caml_call2(Camlboy_lib_Gpu[5], t[3], ly_addr);
         return caml_call1(Camlboy_lib_Uints[1][21], _g_);
        }
        function get_lcd_stat(t){
         return caml_call2(Camlboy_lib_Gpu[5], t[3], lcd_stat_addr);
        }
        function get_mcycles_in_mode(t){
         return caml_call1(Camlboy_lib_Gpu[8][3], t[3]);
        }
        function get_tima_count(t){
         return caml_call1(Camlboy_lib_Timer[6][1], t[2]);
        }
        var
         For_tests =
           [0,
            prev_inst,
            get_ly,
            get_lcd_stat,
            get_mcycles_in_mode,
            get_tima_count];
        return [0,
                show,
                create_with_rom,
                run_instruction,
                press,
                release,
                For_tests];
       }];
   runtime.caml_register_global
    (26, Camlboy_lib_Camlboy, "Camlboy_lib__Camlboy");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
