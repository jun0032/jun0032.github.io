// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cmo, use-js-string=true, version=5.9.1

//# unitInfo: Provides: Dune__exe__Bench
//# unitInfo: Requires: Brr, Brr_io, Camlboy_lib__Camlboy, Camlboy_lib__Detect_cartridge, Fut, Jstr, Jv, Stdlib, Stdlib__Option, Stdlib__Printf
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst = ": ",
    caml_jsstring_of_string = runtime.caml_jsstring_of_string;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call9(f, a0, a1, a2, a3, a4, a5, a6, a7, a8){
    return (f.l >= 0 ? f.l : f.l = f.length) === 9
            ? f(a0, a1, a2, a3, a4, a5, a6, a7, a8)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7, a8]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    partial =
      [8,
       [0, 0, 0],
       0,
       0,
       [12, 10, [2, [0, 1, 8], [11, cst, [8, [0, 0, 0], 0, 0, [12, 10, 0]]]]]],
    Stdlib_Printf = global_data.Stdlib__Printf,
    Brr = global_data.Brr,
    Fut = global_data.Fut,
    Jv = global_data.Jv,
    Brr_io = global_data.Brr_io,
    Camlboy_lib_Detect_cartridge = global_data.Camlboy_lib__Detect_cartridge,
    Camlboy_lib_Camlboy = global_data.Camlboy_lib__Camlboy,
    Stdlib_Option = global_data.Stdlib__Option;
   function read_param(param_key, default$0){
    var
     uri = caml_call1(Brr[13][12], Brr[16][5]),
     _n_ = caml_call1(Brr[6][6], uri),
     param = caml_call1(Brr[6][11][7], _n_),
     match =
       caml_call2(Brr[6][11][3], caml_jsstring_of_string(param_key), param);
    if(! match) return default$0;
    var jstr = match[1];
    return runtime.caml_string_of_jsstring(jstr);
   }
   var
    rom_path = read_param("rom_path", "tobu.gb"),
    frames = runtime.caml_int_of_string(read_param("frames", "1500")),
    cst_FPS = "FPS",
    cst_Duration = "Duration",
    cst_Frames = "Frames",
    cst_ROM_path = "ROM path",
    _c_ =
      [0,
       [2,
        [0, 1, 8],
        [11,
         cst,
         [2,
          0,
          [12,
           10,
           [2,
            [0, 1, 8],
            [11,
             cst,
             [4, 0, 0, 0, [12, 10, [2, [0, 1, 8], [11, cst, partial]]]]]]]]]],
       "%8s: %s\n%8s: %d\n%8s: %f\n%8s: %f\n"],
    _a_ = caml_call2(Brr_io[3][7], 0, caml_jsstring_of_string(rom_path)),
    _b_ =
      caml_call2
       (Fut[15][1],
        _a_,
        function(result){
         if(0 === result[0]){
          var
           response = result[1],
           _h_ = caml_call1(Brr_io[3][1][9], response);
          return caml_call2
                  (Fut[15][1],
                   _h_,
                   function(result){
                    if(0 === result[0]){
                     var
                      rom_blob = result[1],
                      _j_ = caml_call2(Brr[2][8], 0, rom_blob);
                     return caml_call2
                             (Fut[15][3],
                              _j_,
                              function(result){
                               if(0 !== result[0]){
                                var e = result[1], _m_ = [0, caml_call1(Jv[32][4], e), 0];
                                caml_call1(Brr[12][9], _m_);
                                return 0.;
                               }
                               var
                                buf = result[1],
                                rom_bytes =
                                  runtime.caml_ba_from_typed_array
                                   (caml_call4(Brr[1][5], 3, 0, 0, buf)),
                                cartridge =
                                  caml_call1(Camlboy_lib_Detect_cartridge[1], rom_bytes),
                                C = caml_call1(Camlboy_lib_Camlboy[1], cartridge),
                                t = caml_call2(C[2], 0, rom_bytes),
                                frame_count = [0, 0],
                                _l_ = caml_call1(Brr[15][9], Brr[16][4]);
                               for(;;){
                                if(frame_count[1] >= frames)
                                 return caml_call1(Brr[15][9], Brr[16][4]) - _l_;
                                if(caml_call1(C[3], t)) frame_count[1]++;
                               }
                              });
                    }
                    var e = result[1], _k_ = [0, caml_call1(Jv[32][4], e), 0];
                    caml_call1(Brr[12][9], _k_);
                    return caml_call1(Fut[3], 0.);
                   });
         }
         var e = result[1], _i_ = [0, caml_call1(Jv[32][4], e), 0];
         caml_call1(Brr[12][9], _i_);
         return caml_call1(Fut[3], 0.);
        }),
    _d_ =
      caml_call2
       (Fut[15][3],
        _b_,
        function(duration_ms){
         var
          duration = duration_ms / 1000.,
          fps = frames / duration,
          msg =
            caml_call9
             (Stdlib_Printf[4],
              _c_,
              cst_ROM_path,
              rom_path,
              cst_Frames,
              frames,
              cst_Duration,
              duration,
              cst_FPS,
              fps),
          _f_ = caml_call2(Brr[10][2], Brr[16][2], "bench_result"),
          result_el = caml_call1(Stdlib_Option[4], _f_),
          _g_ = [0, caml_call2(Brr[9][2], 0, caml_jsstring_of_string(msg)), 0];
         return caml_call2(Brr[9][18], result_el, _g_);
        });
   caml_call2(Fut[2], _d_, function(_e_){return _e_;});
   var Dune_exe_Bench = [0];
   runtime.caml_register_global(22, Dune_exe_Bench, "Dune__exe__Bench");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLmluZGV4LmVvYmpzL2pzb28vZHVuZV9fZXhlX19CZW5jaC5jbW8uanMiLCJzZWN0aW9ucyI6W3sib2Zmc2V0Ijp7ImxpbmUiOjksImNvbHVtbiI6MH0sIm1hcCI6eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLmluZGV4LmVvYmpzL2pzb28vZHVuZV9fZXhlX19CZW5jaC5jbW8uanMiLCJuYW1lcyI6WyJydW50aW1lIiwiY3N0IiwiY2FtbF9qc3N0cmluZ19vZl9zdHJpbmciLCJjYW1sX2NhbGwxIiwiZiIsImEwIiwiY2FtbF9jYWxsMiIsImExIiwiY2FtbF9jYWxsNCIsImEyIiwiYTMiLCJjYW1sX2NhbGw5IiwiYTQiLCJhNSIsImE2IiwiYTciLCJhOCIsImdsb2JhbF9kYXRhIiwicGFydGlhbCIsIlN0ZGxpYl9QcmludGYiLCJCcnIiLCJGdXQiLCJKdiIsIkJycl9pbyIsIkNhbWxib3lfbGliX0RldGVjdF9jYXJ0cmlkZ2UiLCJDYW1sYm95X2xpYl9DYW1sYm95IiwiU3RkbGliX09wdGlvbiIsInJlYWRfcGFyYW0iLCJwYXJhbV9rZXkiLCJkZWZhdWx0IiwidXJpIiwicGFyYW0iLCJtYXRjaCIsImpzdHIiLCJyb21fcGF0aCIsImZyYW1lcyIsImNzdF9GUFMiLCJjc3RfRHVyYXRpb24iLCJjc3RfRnJhbWVzIiwiY3N0X1JPTV9wYXRoIiwicmVzdWx0IiwicmVzcG9uc2UiLCJyb21fYmxvYiIsImUiLCJidWYiLCJyb21fYnl0ZXMiLCJjYXJ0cmlkZ2UiLCJDIiwidCIsImZyYW1lX2NvdW50IiwiZHVyYXRpb25fbXMiLCJkdXJhdGlvbiIsImZwcyIsIm1zZyIsInJlc3VsdF9lbCIsIkR1bmVfZXhlX0JlbmNoIl0sInNvdXJjZXMiOlsiL2J1aWx0aW4vYmxhY2tib3gubWwiLCIvd29ya3NwYWNlX3Jvb3QvYmluL3dlYi9iZW5jaC5tbCJdLCJtYXBwaW5ncyI6IklBQUFBLFVBQUE7QUFBQSxJQUFBQyxNQUFBO0FBQUEsSUFBQUMsMEJBQUE7QUFBQSxZQUFBQyxXQUFBQyxHQUFBQztBQUFBQSxJQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsWUFBQUMsV0FBQUYsR0FBQUMsSUFBQUU7QUFBQUEsSUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLFlBQUFDLFdBQUFKLEdBQUFDLElBQUFFLElBQUFFLElBQUFDO0FBQUFBLElBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxZQUFBQyxXQUFBUCxHQUFBQyxJQUFBRSxJQUFBRSxJQUFBQyxJQUFBRSxJQUFBQyxJQUFBQyxJQUFBQyxJQUFBQztBQUFBQSxJQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxJQUFBQyxjQUFBO0FBQUEsSUFBQUM7QUFBQUEsTUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsSUFBQUMsZ0JBQUE7QUFBQSxJQUFBQyxNQUFBO0FBQUEsSUFBQUMsTUFBQTtBQUFBLElBQUFDLEtBQUE7QUFBQSxJQUFBQyxTQUFBO0FBQUEsSUFBQUMsK0JBQUE7QUFBQSxJQUFBQyxzQkFBQTtBQUFBLElBQUFDLGdCQUFBO0FBQUEsWUFBQUMsV0FBQUMsV0FBQUM7QUFBQUE7QUFBQUEsS0FBQUMsTUNxRFk7QUFBQSxXQUVSO0FBQUEsS0FBQUMsUUFBQTtBQUFBLEtBQUFDO0FBQUFBLE9BSUksMEJBQXNCO0FBQUEsSUFBa0IsWUFFcEM7QUFBQSxRQUFBQyxPQUZvQztBQUFBLElBQy9CLDRDQUNFO0FBQUE7QUFBQTtBQUFBLElBQUFDLFdBSUY7QUFBQSxJQUFBQyxTQUNGO0FBQUEsSUFBQUMsVUFFYjtBQUFBLElBQUFDLGVBQUE7QUFBQSxJQUFBQyxhQUFBO0FBQUEsSUFBQUMsZUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsVUFoQ2MsNEJBQVU7QUFBQTtBQUFBLE1BQWlCO0FBQUE7QUFBQTtBQUFBLGlCQUFBQztBQUFBQSxTQUN6QztBQUFBO0FBQUEsV0FBQUMsV0FBQTtBQUFBLGlCQUdnQjtBQUFBLFVBQW9CO0FBQUE7QUFBQTtBQUFBLDRCQUFBRDtBQUFBQSxvQkFDbEM7QUFBQTtBQUFBLHNCQUFBRSxXQUFBO0FBQUEsNEJBcEJZO0FBQUEscUJBQTBCO0FBQUE7QUFBQTtBQUFBLHVDQUFBRjtBQUFBQSwrQkFDeEM7QUFBQSxvQ0FBQUcsSUFBQSxpQkFVZ0I7QUFBQSxnQ0FBTDtBQUFBLGdDQUF3QjtBQUFBO0FBQUE7QUFBQSxnQ0FBQUMsTUFWbkM7QUFBQSxnQ0FBQUM7QUFBQUEsa0NBR0k7QUFBQTtBQUFBLGdDQUFBQztBQUFBQSxrQ0FqQlk7QUFBQSxnQ0FBQUMsSUFDaEI7QUFBQSxnQ0FBQUMsSUFDUztBQUFBLGdDQUFBQyxjQUNUO0FBQUEsc0NBQ3FCO0FBQUEsK0JBQ3JCO0FBQUE7QUFBQSxpQ0FLQSwrQ0FBaUQ7QUFBQSxnQ0FKekMsd0JBRWE7QUFBQTtBQUFBLDhCQWlCakIsRUFjQztBQUFBO0FBQUEsd0JBQUFOLElBTkgsaUJBSWtCO0FBQUEsb0JBQUw7QUFBQSxvQkFBd0IsNkJBRWxDO0FBQUEscUJBR1U7QUFBQTtBQUFBLGFBQUFBLElBYmYsaUJBWWdCO0FBQUEsU0FBTDtBQUFBLFNBQXdCLDZCQUNwQjtBQUFBO0FBQUE7QUFBQSxNQWtCZ0M7QUFBQTtBQUFBO0FBQUEsaUJBQUFPO0FBQUFBO0FBQUFBLFVBQUFDLFdBQ2hDO0FBQUEsVUFBQUMsTUFDRTtBQUFBLFVBQUFDO0FBQUFBLFlBQ1A7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLGdCQWxFVztBQUFBLFVBQUFDLFlBQTZDO0FBQUEsZ0JBeUVoQyxJQUFQLHlCQUFPO0FBQUEsU0FBWSw2Q0FBQztBQUFBO0FBQUEsR0FFeEMsc0NEaEZUO0FBQUEsT0FBQUMsaUJDZ0ZtQztBQUFBO0FBQUE7QUFBQSxFRGhGbkMiLCJzb3VyY2VzQ29udGVudCI6WyIoKiBnZW5lcmF0ZWQgY29kZSAqKSIsIm9wZW4gQ2FtbGJveV9saWJcbm9wZW4gQnJyXG5vcGVuIEJycl9pb1xub3BlbiBGdXQuU3ludGF4XG5cbmxldCBmaW5kX2VsX2J5X2lkIGlkID0gRG9jdW1lbnQuZmluZF9lbF9ieV9pZCBHLmRvY3VtZW50IChKc3RyLnYgaWQpIHw+IE9wdGlvbi5nZXRcblxubGV0IHJ1bl9yb21fYnl0ZXMgcm9tX2J5dGVzIGZyYW1lcyA9XG4gIGxldCBjYXJ0cmlkZ2UgPSBEZXRlY3RfY2FydHJpZGdlLmYgfnJvbV9ieXRlcyBpblxuICBsZXQgbW9kdWxlIEMgPSBDYW1sYm95Lk1ha2UodmFsIGNhcnRyaWRnZSkgaW5cbiAgbGV0IHQgPSAgQy5jcmVhdGVfd2l0aF9yb20gfnByaW50X3NlcmlhbF9wb3J0OmZhbHNlIH5yb21fYnl0ZXMgaW5cbiAgbGV0IGZyYW1lX2NvdW50ID0gcmVmIDAgaW5cbiAgbGV0IHN0YXJ0X3RpbWUgPSByZWYgKFBlcmZvcm1hbmNlLm5vd19tcyBHLnBlcmZvcm1hbmNlKSBpblxuICB3aGlsZSAhZnJhbWVfY291bnQgPCBmcmFtZXMgZG9cbiAgICBtYXRjaCBDLnJ1bl9pbnN0cnVjdGlvbiB0IHdpdGhcbiAgICB8IEluX2ZyYW1lIC0+ICgpXG4gICAgfCBGcmFtZV9lbmRlZCBfIC0+IGluY3IgZnJhbWVfY291bnRcbiAgZG9uZTtcbiAgKFBlcmZvcm1hbmNlLm5vd19tcyBHLnBlcmZvcm1hbmNlKSAtLiAhc3RhcnRfdGltZVxuXG5sZXQgcnVuX3JvbV9ibG9iIHJvbV9ibG9iIGZyYW1lcyA9XG4gIGxldCsgcmVzdWx0ID0gQmxvYi5hcnJheV9idWZmZXIgcm9tX2Jsb2IgaW5cbiAgbWF0Y2ggcmVzdWx0IHdpdGhcbiAgfCBPayBidWYgLT5cbiAgICBsZXQgcm9tX2J5dGVzID1cbiAgICAgIFRhcnJheS5vZl9idWZmZXIgVWludDggYnVmXG4gICAgICB8PiBUYXJyYXkudG9fYmlnYXJyYXkxXG4gICAgICAoKiBDb252ZXJ0IHVpbnQ4IGJpZ2FycmF5IHRvIGNoYXIgYmlnYXJyYXkgKilcbiAgICAgIHw+IE9iai5tYWdpY1xuICAgIGluXG4gICAgcnVuX3JvbV9ieXRlcyByb21fYnl0ZXMgZnJhbWVzXG4gIHwgRXJyb3IgZSAtPlxuICAgIENvbnNvbGUuKGxvZyBbSnYuRXJyb3IubWVzc2FnZSBlXSk7XG4gICAgMC5cblxubGV0IHJ1bl9yb21fcGF0aCByb21fcGF0aCBmcmFtZXMgPVxuICBsZXQqIHJlc3VsdCA9IEZldGNoLnVybCAoSnN0ci52IHJvbV9wYXRoKSBpblxuICBtYXRjaCByZXN1bHQgd2l0aFxuICB8IE9rIHJlc3BvbnNlIC0+XG4gICAgbGV0IGJvZHkgPSBGZXRjaC5SZXNwb25zZS5hc19ib2R5IHJlc3BvbnNlIGluXG4gICAgbGV0KiByZXN1bHQgPSBGZXRjaC5Cb2R5LmJsb2IgYm9keSBpblxuICAgIGJlZ2luIG1hdGNoIHJlc3VsdCB3aXRoXG4gICAgICB8IE9rIGJsb2IgLT5cbiAgICAgICAgcnVuX3JvbV9ibG9iIGJsb2IgZnJhbWVzXG4gICAgICB8IEVycm9yIGUgIC0+XG4gICAgICAgIENvbnNvbGUuKGxvZyBbSnYuRXJyb3IubWVzc2FnZSBlXSk7XG4gICAgICAgIEZ1dC5yZXR1cm4gMC5cbiAgICBlbmRcbiAgfCBFcnJvciBlICAtPlxuICAgIENvbnNvbGUuKGxvZyBbSnYuRXJyb3IubWVzc2FnZSBlXSk7XG4gICAgRnV0LnJldHVybiAwLlxuXG5sZXQgcmVhZF9wYXJhbSBwYXJhbV9rZXkgfmRlZmF1bHQgPVxuICBsZXQgdXJpID0gV2luZG93LmxvY2F0aW9uIEcud2luZG93IGluXG4gIGxldCBwYXJhbSA9XG4gICAgdXJpXG4gICAgfD4gVXJpLnF1ZXJ5XG4gICAgfD4gVXJpLlBhcmFtcy5vZl9qc3RyXG4gIGluXG4gIG1hdGNoIFVyaS5QYXJhbXMuZmluZCBKc3RyLih2IHBhcmFtX2tleSkgcGFyYW0gd2l0aFxuICB8IFNvbWUganN0ciAtPiBKc3RyLnRvX3N0cmluZyBqc3RyXG4gIHwgTm9uZSAtPiBkZWZhdWx0XG5cbmxldCBtYWluICgpID1cbiAgKCogUmVhZCBVUkwgcGFyYW1ldGVycyAqKVxuICBsZXQgcm9tX3BhdGggPSByZWFkX3BhcmFtIFwicm9tX3BhdGhcIiB+ZGVmYXVsdDpcInRvYnUuZ2JcIiBpblxuICBsZXQgZnJhbWVzID0gcmVhZF9wYXJhbSBcImZyYW1lc1wiIH5kZWZhdWx0OlwiMTUwMFwiIHw+IGludF9vZl9zdHJpbmcgaW5cbiAgKCogTG9hZCBpbml0aWFsIHJvbSAqKVxuICBsZXQrIGR1cmF0aW9uX21zID0gcnVuX3JvbV9wYXRoIHJvbV9wYXRoIGZyYW1lcyBpblxuICBsZXQgZHVyYXRpb24gPSBkdXJhdGlvbl9tcyAvLiAxMDAwLiBpblxuICBsZXQgZnBzID0gRmxvYXQuKG9mX2ludCBmcmFtZXMgLy4gZHVyYXRpb24pIGluXG4gIGxldCBtc2cgPSBQcmludGYuc3ByaW50ZiBcIiU4czogJXNcXG4lOHM6ICVkXFxuJThzOiAlZlxcbiU4czogJWZcXG5cIlxuICAgICAgXCJST00gcGF0aFwiIHJvbV9wYXRoXG4gICAgICBcIkZyYW1lc1wiIGZyYW1lc1xuICAgICAgXCJEdXJhdGlvblwiIGR1cmF0aW9uXG4gICAgICBcIkZQU1wiIGZwc1xuICBpblxuICBsZXQgcmVzdWx0X2VsID0gZmluZF9lbF9ieV9pZCBcImJlbmNoX3Jlc3VsdFwiIGluXG4gIEVsLnNldF9jaGlsZHJlbiByZXN1bHRfZWwgW0VsLnR4dCAoSnN0ci52IG1zZyldXG5cbmxldCAoKSA9IEZ1dC5hd2FpdCAobWFpbiAoKSkgRnVuLmlkXG4iXSwiaWdub3JlTGlzdCI6WzBdfX1dfQ==
